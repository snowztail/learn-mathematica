(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    558047,      11836]
NotebookOptionsPosition[    488283,      10541]
NotebookOutlinePosition[    526928,      11358]
CellTagsIndexPosition[    526856,      11353]
WindowTitle->Syntax and Programming
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Syntax and Programming", "Subtitle",ExpressionUUID->"abd2714b-c40b-491d-9b98-1f3d249655e3"],

Cell[TextData[{
 "Please click on the ",
 Cell[BoxData[
  FrameBox[
   StyleBox["\[RightGuillemet]", "Text",
    FontSize->15,
    FontColor->RGBColor[
      Rational[91, 255], 
      Rational[178, 255], 
      Rational[166, 255]]],
   ContentPadding->False,
   FrameStyle->RGBColor[
     Rational[91, 255], 
     Rational[178, 255], 
     Rational[166, 255]],
   RoundingRadius->2]],ExpressionUUID->"45fa3a3a-a8c3-4005-ab9d-61ddba15cce6"],
 " to open collapsed sections."
}], "OpenCollapsedSection",ExpressionUUID->"828c07e1-0af3-4e1d-9cc7-\
5abbac8f295f"],

Cell[CellGroupData[{

Cell["Learning Objectives", "Section",ExpressionUUID->"a97f34a4-babe-4547-8f90-f67ece348d5f"],

Cell["\<\
This section will introduce you to the different aspects of writing Wolfram \
Language code.\
\>", "Text",
 CellChangeTimes->{{3.829817714878036*^9, 
  3.8298177533070593`*^9}},ExpressionUUID->"8763c07a-e85a-4b98-9650-\
d4239191e7d7"],

Cell[CellGroupData[{

Cell["Built-in Functions", "Subsection",
 CellChangeTimes->{{3.87087616841682*^9, 
  3.87087617188132*^9}},ExpressionUUID->"dd79d975-2382-4695-825f-\
af23fdf885c0"],

Cell["Accomplish tasks using built-in functions", "Item",
 CellChangeTimes->{{3.8709559440499287`*^9, 
  3.8709559546077003`*^9}},ExpressionUUID->"ae7292b4-e40f-4421-9140-\
d80f5062b274"]
}, Closed]],

Cell[CellGroupData[{

Cell["Symbolic Expressions", "Subsection",
 CellChangeTimes->{{3.613837046627521*^9, 3.613837058954652*^9}, {
   3.778481941324009*^9, 3.7784820058836803`*^9}, {3.778482037395603*^9, 
   3.778482060568163*^9}, 3.778482094909484*^9, {3.7784889291211357`*^9, 
   3.778488935447434*^9}, {3.783168082955763*^9, 3.783168084199174*^9}, 
   3.783190232609784*^9, {3.790612752177149*^9, 3.790612752980598*^9}, {
   3.829766664544853*^9, 3.829766668323215*^9}, {3.829766956743642*^9, 
   3.829766960552009*^9}, 3.829817457753921*^9, {3.8708761757286253`*^9, 
   3.870876177320117*^9}},ExpressionUUID->"121eeb56-b4cb-40ef-b054-\
f5ba8ec2f5e1"],

Cell["\<\
Understand that everything in Wolfram Language is an expression\
\>", "Item",
 CellChangeTimes->{{3.829817499350047*^9, 3.8298175186747427`*^9}, 
   3.892718311033267*^9},ExpressionUUID->"879fd4f4-2964-4543-bbf2-\
df40a5b032d0"],

Cell["Building blocks of an expression", "Item",
 CellChangeTimes->{{3.829817499350047*^9, 3.8298175279576883`*^9}, {
  3.829817643240094*^9, 3.829817647548854*^9}, {3.891705170205476*^9, 
  3.891705171700911*^9}},ExpressionUUID->"3a603bdb-8139-4e0f-bcea-\
ebbec08928ec"],

Cell["Anatomy of an expression", "Item",
 CellChangeTimes->{{3.829817499350047*^9, 3.8298175279576883`*^9}, {
  3.829817643240094*^9, 3.829817647548854*^9}, {3.891705170205476*^9, 
  3.891705176105858*^9}},ExpressionUUID->"f5ad4b53-f64d-48e5-937c-\
b0476758cc1b"]
}, Closed]],

Cell[CellGroupData[{

Cell["Assignments", "Subsection",
 CellChangeTimes->{{3.7904497984038143`*^9, 
  3.7904498002251*^9}},ExpressionUUID->"284fcb5b-f809-422e-a1e8-e19a7cb922e8"],

Cell[CellGroupData[{

Cell["\<\
Assign values to symbols using the two different forms of assignment\
\>", "Item",
 CellChangeTimes->{{3.8298178645295067`*^9, 3.829817867536648*^9}, {
   3.829817906248246*^9, 3.8298179154662952`*^9}, {3.829818162219995*^9, 
   3.829818175922336*^9}, 
   3.8340547099347467`*^9},ExpressionUUID->"519d0be0-ad1c-43f6-8a17-\
cd8a6dd60f9a"],

Cell["Immediate assignment", "Subitem",
 CellChangeTimes->{{3.8298178645295067`*^9, 3.829817867536648*^9}, {
  3.829817906248246*^9, 
  3.829817926525526*^9}},ExpressionUUID->"e40f690e-92a2-4de7-98e8-\
9a1d6fca85cb"],

Cell["Delayed assignment", "Subitem",
 CellChangeTimes->{{3.8298178645295067`*^9, 3.829817867536648*^9}, {
  3.829817906248246*^9, 
  3.8298179300172567`*^9}},ExpressionUUID->"6b70d80f-dffa-4269-9998-\
07c16deff4a7"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Function Definitions", "Subsection",
 CellChangeTimes->{{3.783161493527019*^9, 
  3.783161496859976*^9}},ExpressionUUID->"52a7457a-6e31-4346-9c8d-\
315ef47eceec"],

Cell["Define your own custom functions", "Item",
 CellChangeTimes->{{3.82981814138813*^9, 3.829818147887103*^9}, {
  3.829818493632688*^9, 
  3.829818493634004*^9}},ExpressionUUID->"a5aaae66-111a-4866-be73-\
7aad7fc19d9b"],

Cell["Use pure functions", "Item",
 CellChangeTimes->{{3.891705127711707*^9, 
  3.8917051316498938`*^9}},ExpressionUUID->"d9d606f6-ffdb-450e-af8c-\
27c0f2b03d95"]
}, Closed]],

Cell[CellGroupData[{

Cell["Lists and Doing Things Repeatedly", "Subsection",
 CellChangeTimes->{{3.8298188867062597`*^9, 3.829818897100374*^9}, {
  3.887133516205575*^9, 3.887133523517211*^9}, {3.891705134363571*^9, 
  3.891705136712468*^9}},ExpressionUUID->"54e8e0e0-762e-4982-9c46-\
2272b8e48b1b"],

Cell["Making lists of expressions", "Item",
 CellChangeTimes->{{3.783190280834201*^9, 3.783190284712151*^9}, {
  3.829818913516241*^9, 3.829818934627152*^9}, {3.88713352697114*^9, 
  3.88713356932918*^9}, {3.891705217174877*^9, 
  3.8917052266167603`*^9}},ExpressionUUID->"6a7d4045-b60f-4242-9e07-\
2dc61ca64ec8"],

Cell["Different approaches to doing things repeatedly", "Item",
 CellChangeTimes->{{3.783190280834201*^9, 3.783190284712151*^9}, {
   3.829818913229225*^9, 3.829818913230171*^9}, {3.8298192784869013`*^9, 
   3.8298192804130783`*^9}, {3.829819391684409*^9, 3.82981940324823*^9}, 
   3.8709537405081367`*^9, 
   3.891705229932947*^9},ExpressionUUID->"7ccdb54d-149e-4b39-b74a-\
84dd12288628"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Built-in Functions", "Section",ExpressionUUID->"546f8fe2-fa18-4012-b162-93e5daa714d1"],

Cell["\<\
There are more than 6000 functions built into Wolfram Language. These are \
easily identifiable:\
\>", "Text",
 CellChangeTimes->{{3.78317265440937*^9, 3.783172690911374*^9}, 
   3.794335724005896*^9, {3.829780300597571*^9, 3.829780384507544*^9}, {
   3.8303450860950823`*^9, 3.8303450864105663`*^9}, {3.870953757713977*^9, 
   3.870953758792906*^9}, 
   3.892718314444722*^9},ExpressionUUID->"9078e285-a3c8-4021-b7cb-\
53cba3ee1db9"],

Cell["\<\
Their names start with capital letters and they accept inputs within square \
brackets.\
\>", "Item",
 CellChangeTimes->{
  3.7776317496211576`*^9, {3.777632210415074*^9, 3.7776322480726647`*^9}, {
   3.7776323417283707`*^9, 3.7776323440648723`*^9}, {3.779796844082629*^9, 
   3.779796852203204*^9}, {3.779798408767392*^9, 3.7797984176309757`*^9}, 
   3.780674781455654*^9, {3.783186795231305*^9, 3.783186798075652*^9}, {
   3.7904404606286983`*^9, 
   3.790440482141675*^9}},ExpressionUUID->"26c973b1-d1fb-415e-b283-\
6a7946d7617f"],

Cell[TextData[{
 "The function names are usually intuitive complete English words or standard \
mathematical abbreviations, making it easy to search for them in the ",
 ButtonBox["Documentation Center",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/"], None},
  ButtonNote->"https://reference.wolfram.com/language/"],
 "."
}], "Item",
 CellChangeTimes->{{3.7777039336494446`*^9, 3.7777039377029343`*^9}, {
   3.779798539841989*^9, 3.7797985538706293`*^9}, {3.7806747859578333`*^9, 
   3.780674792918097*^9}, {3.783173302647909*^9, 3.783173303433468*^9}, {
   3.783186806577098*^9, 3.783186817488871*^9}, {3.7904404946110687`*^9, 
   3.7904405202514887`*^9}, {3.790440569875786*^9, 3.790440569878302*^9}, {
   3.790440604175045*^9, 3.790440605924642*^9}, {3.790612777345922*^9, 
   3.790612785344418*^9}, {3.790613497572253*^9, 3.790613500540213*^9}, {
   3.790685071328431*^9, 3.790685077033132*^9}, {3.791116816409452*^9, 
   3.791116816410232*^9}, {3.8709547948330507`*^9, 3.870954815201249*^9}, 
   3.8927173630480423`*^9},ExpressionUUID->"0a5de4ed-19ea-44fb-881f-\
bdbb2577d2b1"],

Cell["Here are a few examples of built-in functions in action:", "Text",
 CellChangeTimes->{{3.870954826568321*^9, 
  3.870954837657095*^9}},ExpressionUUID->"3e743bff-8aa6-488b-b2a1-\
912e1c043fbd"],

Cell[BoxData[
 RowBox[{"Range", "[", "10", "]"}]], "Input",
 CellLabel->
  "In[791]:=",ExpressionUUID->"5fa7ee3e-2c4b-4f85-9a93-430231bc6a05"],

Cell[BoxData[
 RowBox[{"RandomInteger", "[", "100", "]"}]], "Input",
 CellLabel->
  "In[792]:=",ExpressionUUID->"cc7c5f2f-9fd1-4e5a-a0bd-55a3d2a8de45"],

Cell[BoxData[
 RowBox[{"RandomInteger", "[", 
  RowBox[{"100", ",", "10"}], "]"}]], "Input",
 CellLabel->
  "In[793]:=",ExpressionUUID->"9957193c-6aaf-4b2c-9c1d-624860867160"],

Cell[BoxData[
 RowBox[{"Max", "[", 
  RowBox[{
  "44", ",", "22", ",", "7", ",", "88", ",", "94", ",", "51", ",", "12", ",", 
   "42", ",", "34", ",", "6"}], "]"}]], "Input",
 CellLabel->
  "In[794]:=",ExpressionUUID->"0ad63792-1bc3-4e4e-8465-172d9b80edbd"],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"2", "x"}], "-", "7"}], "\[Equal]", "0"}], ",", "x"}], 
  "]"}]], "Input",
 CellLabel->
  "In[795]:=",ExpressionUUID->"f2a787e7-7fba-4e61-944a-ef958feb4dfd"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"Sin", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellLabel->
  "In[796]:=",ExpressionUUID->"afa3a94e-8af9-4885-a6e5-a25c3efd15c8"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], "/", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[797]:=",ExpressionUUID->"2844eaed-34de-44a7-8090-bfc2584096bf"],

Cell[BoxData[
 RowBox[{"ImageIdentify", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1: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
Zhrs1vPfmL967e57puuWbz7b9VkTX6Tpdsgf5skP5GfqYp+oIo+R33qB20bX
bhmnaeH9txN3o4uoX1KKyHOpw53NiCshD6cOEdY0DK0iknoglM88jVxTc1Mk
cUwpJ1fcRX7iDB4vnrN190O4/YPmF9b2uKwqdJGbi9tIQ0kbietkOeoxOrOG
kup6juF+lLma4HAHEJdRYpiiuJs30IOWvnFUN7SRXyzj0KlQhMZmoHNgBuFJ
eRbzikgv43X0Waz+1rNfwqX3UddtOTRrt59Zzqdi/sqHiMoss3ic8rWVAzVB
+3MxKo3fvYEM3n91fS/7xX3UkweVudvhpl7U9U8u37Zrl058+1S0aUdtT6fm
e/NwCJK4nkN+NT5/HeHUjQXOVsPdc1EFKHJ3kX+1W934/3y8CH94sgh/dKoY
f3SiEH8YVIA/O12Eb4c48XKMFz8IqcCPI10IymxBct0Mzua04kSaH188kIAf
nM7Gd4JS8e2jyfgpbf33T2XhaIIXcc5RpPLYl3mu/DVfO5GLH14sxeuRTvwo
uASvkwdcLlLO3YjphEJqO2/fgsW3A2MbNiZV4ytbkuXqsfd8KqGUdr+Mdr6J
Y3QcTeSWbXxGPo4LxTUCw3MW1xBfl74fXNzlMrKNTmKMavV8vUscG5Ps42tw
NPKcsR2bs+Kl0FxqwjyczK7FhYLAp3opgPSGCSTXjiKxZhgHEqgXLxXge2dy
sS/aafdwNKUBL4ZUUj+WG76eL+ihdvTjhdMF1g7E1uBoso/PKRffOJyM75zI
sOd0MKYSp1K85qtKVw1YYBYXc5vwk+BscpYC7AvJxuHwfKSTE6WRd6mlUAO7
lEfk7bM+f4oaT/5l5TMrBq68G+lG5RYOzG9bDqxySuQjVpxT8yU0946he2TW
YlPjqjlY2LCYsHBIvEc+Q9UeiusIU3bj52PGE2VHlc9c4GmznOc52kBxR0/7
hPk40soakU9brlpi+VW07CLfbuiestxcfY/y5vZyUAqrm7ltnPZ41OomO6ev
21K1l57OWdqEOeS4uixPIJEaK8Xhx4vHw60++0h4BkaoV2Z2HmP9wYdYvvPc
4l/SQhv6fPc5NdfPce3ZJ7j70d9hgTxGmFNPXiUdF5XnNK7lpE1XbpPiDst3
PzD9lEoNdzQi0ziws3UUxRx/F5LKzEZlkMOcJUf56Zl4nIopsPyLAXLUJT6L
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
l/zHu7XfGzb3qOqo1ORTlu5SvpyOVW624g/K3/B86qsR3vgHFy1vSFij3GUH
uZZyF8VNnB26p2FbCjN8fdOW19JMzKlu5fdQS7QpRjY4a7XgqvnWXGNdXK8V
9ihWzzHs5XniKOIk7cRWxQ0Co5vIrelHUb3qP6Zp49qRWNqF1Io+vEy+Gl1U
b3mUqlXR/Iuq5UikHovhuwnLdVvOk7aJL+3Nc64aOtWsCTNVjxmSkGe1YaqR
Lqz2Gyfcq2NVfuNe7rX8wMoP0Pje9cdv2/w/V+8+tbl59L84hDmaS6Oedl7b
zkan2Dwxizt3bZvmqUrnuLz59CPi1c9w/8NPrO5RWKC5NBavPkT/+DoaOUYH
qZPGqLP8XYpDpyKj2IGUwkrkVzXhyIVkzG8+wSC1rDBGuYbyx8s///hnv7N5
gBQTk09eNeqK2V9JKrKYvLBGuT+qnVJcS3XckellFlfS/8eISC1H3+Q2dh58
gq6xdZsLLKfCj58cuWzzVUxv3DSsHVvZxPmYJPKjEhRV1xJ3OkwjRqTlIy67
3J6TzovJrsLJK9l4+3QCvvBWIf70QDH+/J0ifHF/Pv787RxiTR5+dKaYPED1
0VX4aXARLmc2WO5dJseGYtRZ1R1wdcwjtVrz781Ql2Tgq8eyzLec6FvAqzF1
+OpZB752rhx/caIYXwwqwhcOZ5NPZZFLOfBSaLVhz398JQ5f52/9IKQKb8jv
GubEkYwAjme14HwhbZSjH9GuYaTVTSObXCqTmJfiGzO8iSbXyfdP2nzq6V7i
UnUv8aUYf30oBt88mogXTqQQd5qspvJiTsBiZ/FVA8SDDvKOUYvdK0704vkC
6q0ivB1WjgOR5Xg7vBRvU9vtDy/EiaQKywtS/rHi8bKdVao/Zz/M43vMaxiA
e2DZaiA0l47qynV8juZY1/+PaR3DIO2V5qao6Z0xuyue384xJVvePLGJ+qF1
NI0ql3Hb8oLlE5H/Q+O9yXTNIIpquy0vWv+fRhqjom3Kzt2tB5/8rEZVMST5
TzSvoLiO5lJQ3oxqEDSXtzi0ahflSxjcq3FY3jF7riY/kHJPhTn6XsW/VBOi
OTWEN0O0wcpZzK/ZrUPNqelANfuVk+NlD3s8vcTTjjF4uF0xaOUp9M1fJb6s
Wf2JsEZzUXRMCMOWeN8r5B3bXK6jbmDBeIi0Yvv0DvnNGDmKB0f4TjKcfcjz
jvH3byOmsB1h2Y3Ej0pijs+er+pbT8UXWc5MXCntRZYTQbEFyPZ0omFoGYcj
sq2mVVh0PCbf4t2am0t2/nR4qnG9u89/aXMPv/vJ/26xZZs7nvpDekU4pHiT
nqPqVzXXwu6cYjummaSXptevY0H/04f4Ik2lOfGknzIdHnRNLBgmaal963ce
29ycd9/7heU+tdDGtImnEw97hpexc+85SqpqcfhMMF5++x2ci4zFT49fQChx
43R4LrXSE2zc+sDmFFP8OjHXZf9HRxikugnVWeRyvMsnpHwf1Ucof0b5zqox
PR+VYxinOFpwbK59R7G7w3TUjUe/Qrnq9qp28xYUC1dNyNzWLn+rIrY4m9pR
7PIh6NIVxGbkWQzi2Sd/j0Lqq9DEXcxRzUWxh8e5u5GU78O3TzrwjWPF+DK5
zJffyeJ6DrGG+iPUwbFXaePucLTD8lyv5NbyHbrs/Ybz3t4OzSQXcOMrh9KI
VSmW+/fC+TJ88Vge/uRIHv4TceuPj+TjC8cK8RcnSy3m9bXTZdRvhfjikVz8
b/y9vzpViq+fr8DfBFda++6lKrwc6cEhcqrzRT0IrxpBgm+KemyEnKnR8mCO
pflwgnrnULLbdE9QiguvhhTgW8eS8P3T6Z/6TtzYH1WOPNrEyLJOlLWvoG70
FurHbiO/ac5q0ffz/hRz2x/lxGHquSRxqao+8xud4H1Z7m4OuVihz2ojnV1T
HGOjlguWWF7PftyOWo6PhrENq786Ep2LNy6l4HRSCRL5nis4RrvIB+QnUGxW
vo424oCaNIets2+0Tm2afhAGiTvI/6H4tnwHioFI21hdRlM/PJ3kDsS2Muk7
jklv96zNa6raCGmdEmJgqeZ08nZYLp6a/LbSCJoXQE3+iL2aKfktxIXUhFHy
CXrZt+QTLqhpNz2n+S9U+9E1fY0YsG3zmWncildUdihXYciw10PNlVbdTJ7W
j+KmXjQMLxBHF3n/VzHFsVzXP0mNRR5Fuz1JPdJLDBpYuY5u8oRW9vtKYlWG
uxXxDvZXcjhh/MUMN0KyiQeJ1XzmXTiT5EF8KbGX/PRwhMPyHk8nlll84EyS
A2F5XmrNCvtfPsqjEC+dvPau1cYpf1zzxFZ/WqcrTNJ846W1bab1VOug2gf9
z4ObTz+2/9cl3aQ4n+ZIlG3fi93tnaO5UvV/NwJD05jhWPQPTiGnusHm8Vm/
965tK/a1GMaK1w3Mb2CH3EbLpZuPbC6OSn838agencSYSvLgiMRidLNf5VLj
RcSkoqjCjR/vP4h9QadRRq6UVlKLxDzeC+19L3mI5hbddyrGcg8VSzrCPrj/
bDziye/iclw4dCGJOrESB88nWmz7jZPRSMyvQXBcvs2brBzOuc2HaKTtUgwp
qcCLqoYh2qPrljutvD5hmearVswtg/wsOC4NDp8fIfGp5DdlqKNGHFtYt/8n
4mnusdreeGov+YpDk4qRXd6M8NRKfP9cGV4Ld+FEmuqg+xFXOYxoR5/l1yh+
ci7dg5iyZpt/KqWyFaf4LILi8xGcUYaTyQ4b1986mYevEadUOyUs+U8Hc/DV
cxX4YUQ9MacAf3K0CH8WVIq/OuMgtlTihQtV+K7lLTt5bC6+eKLE8ph/EFaD
v4304cfkRm8mNODt5EYcSvMjKLsZR9Ob8FpUleXcqb0UUmC1kd8OSsYrl/Px
TkwFdZPb6rOTPbzWmmHEVPQgnjZR+UJlHUuo7FlHSesS9w8hu24KhYEFmyc5
o3bS/E8prhH7v1a67zieW9BIjdY2bfPiFJHbi6/EljVwDFSa7zGiwGNzGmvM
aan8dzVpLbP7bSOGMcrlV82QmvyoWop7aNkonFAdiuoqFS8mxsgXo9wX+Q0U
G7GaAfPRzqO2f8FwTznR0mivsF+d5/vUHDpVn855Y/Xxn2oi5eZpjlnFguQL
FodRzFs6SnWOjTaXYN9n81Y4iGuKEWseMKuvb92dT6iev9s9s4O+xVtoHt8w
zJG2PJlSSu1ZxefZg3xqlhMJygsvRRG/q14+ZXI68RbFpYeoURr0v6xGFqzG
ShjcTf7g6ZtCVk0rueCIYdeB8EzLtVLutPLLL8rffy4LEfkB4voY8Z7b0ur5
zKcsx1rPQXOmtU1doy67ze+ZoNZtMnxRzav+b6HmYGyZ3LLaV9XRqy5NuiqK
40HzWvTwPU1u3Mb1xx/bfGEag5onbOXGU5vftdDVgpVbTy22n0o+pPlxNIeP
+Jr84Y9/8Y9Y4POUnyo+32lzv5YT2zVH7NlYXntmGVaJX1rq+0rJjTTvmHzm
xcSujLJ6q81MyKxGaFQeDhwORXqOA3FJ2bgUHosXXnoFf/vWYVyOz7aYT66z
G/F5DTa/+dHLqYYzbeRwqhvX57BUB85E5thn6SH5a4UxqjM/T243uXqXGvoW
Vm8+x4MP/573+cxsj45pHdL/N5wjf3pMfPEb7ynxtBmvy6usR1pxFXFpAEXu
OlwiHuaSu/m7aVuJp/pfZIq9JRfszgWUmO8yzLlCHSv8eyWkHPtjPPZ/n5SH
n9NEe8ZxWTuyg8bJG2hfuIuOxbsY2nqKka0n6Fq6iQ5eVwttcVn7FFK843gz
Snl9efjqiSJ8iVzmT9n+8nQ5vni6En92qgJfOOHAHx8rNdz5k8OF+MLRAnzx
6O5x/+GNNPznoBJ8O6QGPwivxXdD3cQdN/YlNiIopx2vRnM9Qf4g8p28Vpsv
56VLhRbH/trRJPPtRlAvFZDHVHTSvrfMI51YI8yQLopxdCHbN46iwCycvK/y
jmX7nzLKTfQMbcPRsYrsRr7zjhVElfWQL9UjvKTN/i9EYWDK/DL6X3jys8jX
q5bfOGjjoYbcV34BB7WxOIDGpnLRnK3DFnNVrrNqh6SNlIvZqpok2sa9GlPV
s8vXoZw1xXh6yTnkc1F8aG+e9Ka+ScuvUf3XkDjIzDXjVJoLXv4g/W8saRvl
w+r/Y6keVfggn47yrDWHuPIBNXe78gFlr6WfFC9S7rFq91RfIO3mo35Sno2w
JoW4GU8urDm9Sur7bV4dNeWBi1/pf2Eciynks9dc0+xDUbk4lVJOu9Rv/vRC
cnLlZXYtXLe8TPlk1HzUDNHsg2ry8VxhX1QuQ03fLLlRK8a3H1tupziL5kNT
LdkL1McHw0sQRVsSXdRGrjliPEc5DvqfmbsY0mD+r0w3+UFBveVcpVS183uX
bQ7qEv84ueQOxjbfRVxZwLYrn6C8iXq4nThHPNa8PYrFyT7kuXbnedXc6zWq
GaNG/X+5es/oOM8zSxAiKUqmsmwlW5IlWZFBYhQJkiAAIhCBRM4ZKGSgUIVC
oQqohKpCzjlnkiAJMEOMEoOoZEu2u22rLXe3e6Z7u2e8Z/vMzmyfPjtn/+y5
+9wHgrbP/HhPRRQqfN99733Cfdg7Xt7Yob1hnPXG/iv2brB2eYo+poKhrIWj
b0Zj9wSya1xrtSoLF5Ar+zP74dk/z95V3k//jnnRaryPfDQqtRK9w2dRXOlG
QkoprPZmZOWVIS27ALsOBaOkph7R6aU4mlIueLWE5NImVDoGUFzbhhJLu3KI
3Cqv8gjGZwtNLThz9QvUeoY0dsLaPeKTTXgjtQ17t1knfunur+GR42jijOy5
rgFc++xb0YtXcWb1SxSbmzXmUy+cs6lzBHZfN8yOZkycPAeLuxnH04vkdhu6
RubROSwcvGtU509w7odb+DE9yXq4H7ePY1j2zHzPHFLrRxFV2Y3w0jX/K86b
axi+iNaF23CMXtT5KYMr97B09/c4/8V3WP3mH3Dpy+8wc+0bmHsv6fwG6qOf
CY68dNyBlxOa8EK8FxsYD0puxfMJfjwT48FjxxrxREQDfnyMeOPEy8JrIsyz
OFQ1rlyIdYbEoudj6vFGghPb0t2a59oSZMCPg4vxxvFqvBFdhRdDi/BWbBWO
5LkUZ4gx7pErsPYuo1L0ELkJvY6JO1bBGmok1j97xlfhldWzdBetM7cUf0av
/hoOwRpz74rWTxv8cygXPkTMKfFPo6p9QfPhzHfV959Bfe8pOddXNF/F2p6O
2Uvqa8PzvGN6RXPCPGfZl0iM4bneL5jCfYw6hlyc+VbOGuD19b5qesRMf993
yh5Uznwh3rCOhvsnOQ75EjWaf2IZ/mnBtdnL6p+z7g1Y3TSgtSwN3dPKcRjn
JYacXv1U9u6vVC+xh0bzRMKfGNchFq55Ha8qHyK3qZFjK114C+v66duhdUD8
nFPntd9k5nufstTaFqTWyXHeexJHC+yax+s6eRPnH/yN+rJOr36h9eCMkY+c
+1i1GLlRkuy1cbKHB2dUa57P4GQf/KBqHGINvQDoG81apHN3/iDY0iK44tVa
9mr/rK5S95Rgzyjiy3yKNdRcrBdlXz0xivcRe2KLXXo/+czoivCza7/SPnzO
2mQcn36v7KO/eOc3uCBYR59WxsmIQ1XyPVgFA3mbvq70qi20tq7p3uXbWnPE
v1v5+GuN77MGmfdVunpxvMAieuo77X03yu/Cv2NNJGuW+Jr8O8v3tUBW0aC1
8rdBsYWITzciMaUShmIbklKLkFtYjl37DiExPRsWp1/9I+h3U1w/iOjcRvXx
K6Ivt2CJ1TeKetEgxB16QIzIb0AsyqHOFPxJyLMiKs0oOqcTSQU29cFpkv0y
u9oFW+u4+llwLkVD+7TqKfaisq+0pNaPWme39ltYPR3oGJoQDOpFXqUZFleH
9o53Cy9tlj2PMWe7fC7ORCUnYl0BfVftcn+LcN5gQxsCc0X7pDu1Vu1Qnhdx
poG1mXPdyyhuXtC8NHVJy7wcl5d/hZnrf4WBc5/B2ndBtdjrsQ2KN6+dcCp/
efG4B6+lduDl5HY8Ee3BFsEaXj4f5xOd1Yr383pwsGQYoVWTSPasYH/ZmOqt
zaFmPBFeJxrLgsdDjNiwvxAvhBvxXHgFtifVI7a6G9n2MeQ6xlQvMTfGWkPW
NjfI0uuCL43kLrM3MXL+c/Qsfqy1hLlW5rHn9bK2k546K3KerPUu2SdXkeuZ
1JriwDwnQpkPF34UWuzFQc5crOnSej8u1ulxbrmxY1Hz26xFa5bjkPPPOAuP
M6lYC0Ydw5m5jLPRX5vnOWse1v1l2CdJL2HOh9EZMYJFnFfAxbmZnGXHRT9x
8m9iFvPO1CeekSXlEOQWjKEw18KcDOtViDk8P8izGNNhDFnjyYJ7xD9ii/ay
yvscF6yZF33AelrGkxj3aeBeJjqptmVEOdP4+U/Uj5WeYMy/z330JS4++BYT
oq2osdPqOtWvgzMFOd+9rHlKPcrGRdewNpO5N3qYJVf7VcdEFtRrXu70rW8w
L6916bPvhIMOq1c9+9vpXT8lnNokWNGxcF1+wwf6e0XIecVaqr6lO9rfqr+l
fUD7XFlvwLrQMt+kvMaM3s6o69H8YuvsNdj6zmjtKP2IeJ33sTfWJxqMtUzD
Z29pHJ6zDbPl/DIKfrN/oswzgCrPoMad6d9KLsvnsXad8SzmCxuEW16699fy
HX6t9Zi3fvm3aB9f1lkLVW7h2GlVOk8hs6pJjpMzgkerWlNVLa974IQBKRUO
7QXjrLpcwYWyGtEhJY0ok/srK20oLKxAUWkFouNTkFZQpp6l9PnzDq6ILr0r
x8dVxOXbkG9uw6mrX4o2XFGPP86f4n30/+Pi7fu//Sfc+80/ok24MW8Tt+hT
SCzl56htHv3Bl4u+gxklTuQJBtELtbmHHKcTnvYB9I7NwtnSiWOJmTDaW7V3
vLKuFTbRbdqTKpqcPWIjcrwSY1hjzP5R+hjvTHNpn8+rx0x49kgZHttfhB/t
K8QTBwx4KrAYLwRX4PVjZiSYR4Xn3Ebr4gPRW3dhH1xFkfe06BrhK2FmvBRl
U75C7kLt9FJCC7Ycc+GRKBe2RLsVb34S58fLSa14O70D7+f0rsV3Ylx4Isoh
vMeGxwRrnoqw4sVoq+au3oi3YVuKQ71lSltPwzd3W3Tep2ieu6VcxTN6VXHG
Myz76uxtOW4+Q9/iXe2vMAmnYXyR+dNsSx8MDSOo9E0hsVywpKoVFZ5xOabn
4RMOVz9+FdFm4XdVbThY5NE64yTBJfaCE3cSRGOxju9ogQ8h+V6EG5oRLFpt
f0qt9gjzHCXmcG8jz56Qc5m+26yr5Ywyzkgg1rDXZL2en/Xm7Jkj1xk/u4Y1
nEvAGfbEGc7P1DmVq3fUL7xvbhnugTmtWzOJbmoYFA03eV60yppvIXO+1FaM
KXOx93A9d8UeBMac1ftz9b7moIg3vM2YET31WF/DGDExk7n3Cnevvg75E/M5
9BQk5rBvjbFX7V8bl++5cwETq18jQ74rxu1Z1xhX3YLD2TYUuISvjF0UzLgv
PIexmi+VW+RYu1AjuJSoub9xdC7eQl33Ka1RIn5wJjPngTF2Zu5YED55QT3p
iSP8zeib2DLzkeIHn0//Enq4Mr7P6/Sw5yXxiItYM3H5K/WWzrL2rvmgyfOJ
hXm2HqTW+NWXlTHmUuFZ7A1mzUG6uQV5wr/4WW3feyhm1bauxYMEe+lpNH/l
c52ZQG/zmqYR0WVLgtfT6nl+LKtW+NK8aNpLqGuZ1t52eqPTSyPX1K69GbXs
eTf7RL9NYmj2Ko4nV+PWx8J9hA8VFdXA4fRi+659SM3KR72nVfTRfTiEVx9K
MIpG60W1YDDnYYan1SCz0qu+fvb2GVjlf/B6crETY6dvwzewJL/7PZ0nztv0
HnV1LyjOsFfM07+omEjfwuhss87HZOyH/ZrsPaUPvdHuQ9ewHA9GC0wNboTH
pwvujKBKfs9iwTRzY6/2QbAnw948rD2nblmcc8Y8Bec8HCnsQlBBp+zj7TiQ
0/rDCsyVcy+vE498WIptiW5kOU4J51nGB8l+PLS9EJt2FuP5YDO2p3jxSowN
r8Y24mfCb54Mq1/TTVFuBASa8ViMVxfxhuuxY05sDrPh4ZA6bAiqxUOyHgln
DsspHGdNY72X5kWQaLRo8whSG2ZQ3nEWDWOrGvNtmvhIscY5JPqm9yxaJ+R6
37Lo5TNwkOd0LaHUOS7fYT9y63r1dzlR3CS3e2FoHEQ9+yOcw7K/jOm54J2/
hUhTB149UYFAgxshFS14K7FGcM6KyOouJNQNIqRkLU7NPoWDuU3KAdkTFV7Y
JMdKu85Q7Z+7rL1DCxc+Eb1yW2eLsC+aGM+6iLmz13BSND4Xr7OWk54PnNvE
+ilqKOZUiTFzK1d1EXOYT2XNinqST57V2lvH8CmNjxBzSmUPLpd9pbChC/m2
DuSKxqnxDWttDOtLmCcn52LOi5qJ8eH1/getQ+ZME/YLEYPkOSvMU5y8qj7s
3NsL7J26mCvgzFHmdujnRU/CiuZJ5DmGkSJ4bpHvfuTiV8I9R7E/ow6VrQuI
EWzfI98lvTj8sg+TtwzKnuwcPKv+sDWCTTElPuQJb3QOX1A+kiCYT3wYv/iF
YgpnEBIXJq98ieX736peq2ie0DnOyeQCgkFrOY0xxRBiCXGHr5XfOKQYUyi/
N/kPsYk8iRyIj5UIJ8u2da/VcMprkq9FybnLeRycAcT/Qw/FQtegeitylhl7
+ji/wyHn7/ESF8bP3RXu+BH8Q8uYPHcPBvm/nLNQKPyKMxZSy32KMWUNg4jM
tCA6xybP6RXMoQeTfH+WVpQ09ugMmOkzn6Br4Ax+9c2f0Szna2Z6CVxOHw4e
CkG5sRbz565ofQO9gmJlv4vOderrcDYDZ37bBJM5nyFGvm/eN3fhMxxJqEJm
hV8fp/bKExwmJ6LfOjHIJ8cRuRyxJrvGp3hkkddnnKfG1aeeWeQ3lVY/iox2
9c4oqalDSo4BmYZqFFS6kFfmRSFnBdR3C9bIcUIvO9GjnFvBfk17q+jG3nG5
7MPBgl4EFw/iWJV8hpopRFVPyPk1hH05XYIlzcj3nsfe7E68GGbX9ZMQK54L
rccrxxx6+8kjZrwYWY/3Upvx8wQvNhwyCYbU4QXhNy8nd2JDhODLMfIbL56J
XVuPRbsUczYI5tB/Z3NwHQJ2leLJ0Fqd+VDgW4GxfxW1A6vq6cAYE49nLs7a
ZOzXNrAsx43s93JcF1oHkVol55plUOuec2oHkFnTu6ahRBc29p5DQf2QcpuO
GXolzSGzul3jAfSa2Jvnwc5sJwKL/MJxBKOK2/BqjAm7sz2qM1+JrMaLRyv0
Ot9PZFk3Yqv6kVU/jKKGfu2nnFz+WL0viDlcgwtXdRYUMYf9+Avnb6tnAXsW
OfdsTB5jHS9r4MhvmC89+f3sSc6lZB0usYj1udRCzBWRb9DfhjU9VazPlz0w
tcYrn2dc80WMjTDOwloT5rFY38P6Y+a1GMvhnEjW1lC/cW4C50EzX8YeBHIg
/g/W87HOhrli1rLQM5nxlVI576iLemVvpNcqOcTbUSXYeqIaIfK9vZ9Upz3u
dQPn0X7yDs5//g9wy15A/ZltH0SFfOfsK3njaCFapq9pb0fT+BWU++Y0Bpco
v0eEQfb7zlOoEmw4IbjP2u5I+pwVuxUfgvPsopO6fuinY60CuQ+xhJhDDpRq
7tT3xn6R42U+1U/EHOIRsYmYw346vh65UrqlU/lSjq0XQVkW+b9e/R9h+Xb1
T4wobER0sUu1c6PgZHhBgy5iVffiDaTLeUbccPWcFuzoRLGtX2/H5jWoD2Cl
YB37vvi4TbiOR94Pbx+T8z3e4FRddu3Lb3Hl09/jkvCab37/z1i9+StUm9xI
STMIv2nB3gMhcDX36tyJ2OxqnL3xjfocpAvnjs93yD5yC199+xcsXful+hfz
8vZX/6Ce6NcefCfH01ewy3dA/JsQPVov+M3rnDXDGRB5FjkXfGPqdUY+xNl5
tfIe7S0TyldcwnfptUGvwexSi/pXHE8rEF7jQZ5glVEw1ibcrk4wmvksn/A+
1hfSj4O+6fQ1qfV06tznZ0NFv0TK3p3bi7i6BYSVj+Nnom94/1bBgjfjvXgn
0S/X27AjrVPXtpR2vJXQjNdOePFSrAsvxjjxnOiiHwunIa95LNKDRyKbsDnC
g4BD9QgIaRRd5cXziW2yWvAjee5DYVZsCLbgRcGiTXur8dThWkRXjMM2dBvO
kY+RUz+Dgxku2f/aUN1+Cv7pG3CMXtY4dvOinFdL9+CfvSmc9izSqrkHj+BE
eTuSjT1at8f+67Q6HlfTcjyeQXHTDMLzm3Renl1wi3/D57Knm75hnBHKOVrE
3t1Z7diV2oL9WR346dE65XeBfE6R8MBMH34RacTeVIcc97Pq38M62KEztzF5
8b72U46d/Vi1PWe5sAeKvlCc1cp5rMQg5jwY4+GaYH3/ybUciPpyyn2MKWpM
coU+HbfU6501fvR96pPH2P/e0D8PU9soSkT3sPaFNc/MSXvGljWOzMumiXPI
FkyqaBrQfmn6kZMnEc9Yb6Z9TCs3NFbNuDX9gxl3Zk6/iDVWjl7ElLq0XrpW
zsm6vrPaUxJZ2ap98/TqCCuV7yq9EVFVPbCPXUPT7CfIc0+L/pTvt25I6w9Y
250qupQxwHrZL5pnbmLiyjco889pbJ81VNHyHGqyfSl1WtdwIL1e9RkxKLLE
q71m5E3ELGPnSZQ1zyBa8CTd2qczMTiXh36KacJpjxY49Tr7UU6IdiYHI9ei
jz33Kd7m87iot6ix2CdMDXY4s0752IFUM2JLvRoHWl/kXXyeVbCD+i/D3AWT
6ENqzWrBH/qf0FejrmNGMaXSO4LDSVWC2y7hnOOqzT48Xqr9KAZ7n/pufPTF
H/DFH/83/M2//F/q+XH6yj31Hzc1tCBO+M3QxBLe3h2qvsAu0dF5ovmqRHeS
r5OjM3bj6ZrHl9/+F8GUKZ0hTi/jZOFe9Cx78Nf/jBZ5T5xV5RuWPVt0LDk5
sS/b1KavRQ1YJthubZ3R29SA5EMD8x+hRDCU8eZM2XsYy2HsOL2gDgmCe5kG
Kwqr3Mpx6CPqbhuHT/Q3LzuH1vpJ6UVK3PF1TWjt9o/DGhQ3dmVzrt0wtgue
/DTKhZ9Fu/GuYMyzR+16/Z2kVn1sW2oH3hSseTW2SXDGLTrIrVjD/NM61myJ
cCvWbA73Ctdx4KFQBzYeFYwJbUDAYQsCRENtiLDh+Xg3Nuwuxzvy9/GmaeEr
l1DmPSt79rD8Rp1IqepGimiaqAK37D+DaJ69Dp/wk0w5XmJlD2PfQkZdH9Jq
enSeQ7plWOuHq7tXUOBZUE8Mzgguaz2rnjz07jG4Z5HfMIboQi+iDC0a796e
xn6OJrwvHG1neptctoh26sBRwxD2pLVhn2DNzmQPjhS0o8A1r30QrFXmOcJ9
kbkP1t8xr0LfGvfgWZ3fUt81p3M/vdQ+opObBk6ia/q89lHX+oUvVznR2DMp
x90gKj09MInu1dzzxAX1HONr0f+H1zvlt2euh/VrzqGTaBQuwnqVceFLbs6j
EqzpFB00evm+8INJxFXLMSI6iN4djC+zT3F46arypXPXObf6vvYVTqvP5901
38/TVwW/Rb/KHkUfZPvAac09eWeuovXUJ6gbOq8e9x9k2GU1aj0UfVQ5a4Ne
I2VdK7IX3EfP8ldwTN5EkX9R/X3eOm4UDJpEkWALsScwqwE5jaPq6eGZXIW1
f1kw5LTmBKPKW5Bk7kFQrgNHC2XPEI5KPCIGsfYhqmwNl8hzmb8ghhB7ir38
zG3CiYYUh2IrmhVPyJXWHydW8X5iU4lvSld0sRchuY2q68ipqOciizzqn80Z
rtR6yr0K3erTGF6wVv+aax9SrhRbRM/bIZ2lwRgQe0wYA4rIqxM8akFRY6/e
n1Ll1fs594f+cbxvf2IJYgpM6gdGj0LuOfTgps97WHwOkvIqEZVsQHJhLRLz
zDq/12Dt0tl3hxOrcSi+EuFp1VrXQu/ie7/5s84Q55yXGvkN6Qk9d/EBMiq9
6mWWItwttdKHtomL+r7pFRmeYUGFnE/porm4iEcJRWsz9KjDcuT56YJd7H1i
TXNOhQdBsQbtp+CqtLXrrK0G35ByGX/XjM4U7R4+rbGEXs67pqdA37ze/0Kk
A28J5yCOEHeIPy8ec+KNeL/iDbFmfRFjXo/z6XpF8OV50UXPRXvwlDz2lMZm
XIo1j4ZTL7l1vZ7aK1zHjYAPa2QZNVbzVEyjYE41At7LxuNBFfgg2akzNgud
s4Ifwzor3Ngs3GBmVc83a9e8amv2Y3acvI5K+c2ynAM6C8rOvqrOM8LL5+Ea
WYV98KpiDfu46H8RWd4ve/Kieg5aei/A2nteMG1OeM644lNF54p6K7+b2Iif
RprwSnQd3jhhF97jwp70JhzIEo1VIvtaZR8y5W+s/fL/hFOxd5z94uT1jDmy
VoT1H+q3wzmbsneRk7D+19LCeFKr5is6Jpcxce6WzqRj/S7r/dsmltQnlb0S
zDURp+ij3iT7Uff8de2J5mszr8zYCfGjnTxIdE/L1LJij0VwotAle16H7HFy
nOc6+tQT2uAZhINaev6S6irmqDi7mzOEyHHOXP9UfThZ/8N5fKyf5vOZQ6Jv
vE00vlv+f+PEVe2VDS1twdbEWjlebNifzzhbm/a77cpyK/bQ36hh/DoMzSeF
F1oVa549XIDtiWbsFO6yR9YHcn1XsnDb4AKtB9+TYlFsYe3mgUybYg5rxLmI
QcH5LuxMMivO9J6V9/vxH7Q+jHWdxPwE4ar0FYgSPKLfxwnRGezJZ11WiXdG
dO+QajZyqZgy+W4aRkSLDurfcNZQbJlf8YR7Wrl/Ri95H3GF+JJlFY3vGBGt
1i2abU3r8THqtqQKn/auJ4o+Ya8tf7MS0V61bTPqw8i5PfSFpScsF30ZQzNr
9bGLD/6AO7/9M779l/+BP/3l37T+hzMEk4pM+DAsAZFJ+YhMLER8rlF7EIZP
XkPP9BUcTTUhRvTa5PJ93Pn6z2iTc/vGF3+D7qnzij+cW0W8SSppRKdgi6OL
fu9dSBB84WVQcrXuZa3yu4al16Jt7CKMnlHZ/5o1jk1+Y5Q9lNyJeJMnupA5
d/KcUjmOjyaUaJ48t9KtnKfc1gazq197F+jhTL8bairOR+dMmO7xs+gZX7sk
tqxjCLHn8WCrYg6xhTxmX96A4g4fezrUppfEmnW8WdNQrjWsiXSuYc1RJx4W
PrM5hPV8dsEk4UKxXjwq2mRDYCUeDTXh1XgHtqe7US8YUS+anzyb3nbU2/Qr
5j4xdem+xiC4ukWHOIYX9byqlb28poe1w5OiGVZlH7qqWOUY+QiFTYsILenS
eTTBpX2Ir5tSD2X6YKXVTyjm2ITreIT7s6chuX5YnitaL6IcmwPz8PoJk85c
SLNPas8ofU85Y6p+5CJaT95Gy8J1lHLOs61LezKZw+VscXqEMeaYZmxBqvw+
5tZJraenLxTnidPDple4Dr1i6CvM3m/O32VfdSe1zOgSqn3C82v8+vc8Tj1D
y2v9au1zGp9kfSFn4rD/ofeUcI6ZFa275CU5ydaYAsWaPM4jEszKdw3o/D6z
cKtWwTdyHHqb0+uZea+Vm59qjSFxiL6IDs7MGVwQ/FpQb7N85+D3HiDNopdE
28i5eqTIpzpqV5YTOzMd2uPGFVndhx3pDrwbb5Hv2iGc0KV+QEmWQdFeHq0F
Z80UcYZ1UwezG/WSXhy7kmsVb3hJj0P22dJriDxnf0b9D/UI9Pdg3wrrycl/
eJ29tcSbOPbkGny6WOdJ7OF9xBvFFfKr72cN8X7+HTGppGlSuUycaETiCH1L
wvKdep1z6olHXLxNTCLf4fOZq2BePrnSr/4hYdlWxZCYQof89tPIrevGQTmv
w3PqEV3QoLmK9dvEpDVvjfM4ff0L3P7mO60rj8qtgq1lEImFNcgpq0PI8UwE
RWfqfGAv++eaR7D1SJrmw+KEn0ycvYtv/vb/wMXbX6sfFuOGnDnFmVR9cqzQ
O4ke0PSc5/OJM4wpxcr7qfKOae9ZlWsEvkE57+QYI68JSzejWd4feRTjOA7Z
R72y77D/ifU9JbUtiEwu18usUvmsngE4qKGE11iEs9N7lPkTn/AZ1vTQy4Le
gJyp1SmY81xEoy5qKGIIL6mhiDm8vTe3XzGHeouaivhE3OHjz0U5Nd+05T/w
mkdFOxFnHg5uwCNHRD99UInNBy145LAJD+0pwZagKhws6kJx24rsmTfQtnhb
vSS4WuV8ZH7X2iU8omtMa6H6Fs/L3rys/ZGeUc5pGUaBu1u48BDMgqENgxcV
Z04YBxFZ0Yf3khyyz/oQUjaIw6X9OGYcw/6CLrwQYRa+0ywaa1Rxp7LtnGij
aexMq5PPJvtwolEwthzhwtfrhi+g5dQdeX+r8Exfg330AmqFXzlGl+GePIci
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
64rLBMMZhz2aVaf8gZizn+d6tlV7CIoaBrTnyj92QX3gfaJ1WRdzPN+GPdH5
mgMi3sRlVuJ4Wimsnq7v/e05B+w0YvOMiDfUwtY5LnzIpjkp5sPJbZaufYH4
gnrlHOz15kyhq59+iwJLBzqnr2rslvHpmYufIb++R73I2WPF2WZxhfVwdM+h
xjuoM82K69uFm3ShVnCNsZsPIzOQV+1CbFal9os720cwt3JL5zazjo9zHDjL
ualnTrCmA/aWMSzf/CVcndP6uMU7pPdv2FeteSjyGuIHrzM+Q+7CmA1vr+e/
yW/W+6mIQXzs8WCbYs6zwje2pnZhZ+YgfnrMJ69bp+unx5oRsKsGAe+Jngo0
698zvsJcUcCeUuEjFsGCMuUcIaJxIksH8GZkLRKEV/im7snePiN70ITsL8MI
yuvC3vQ27Mpk/XyX9q3zb14JM2OLvN6BnHa8HusQLdeMt5L8CNhZpu/x6aNW
PB1SK7gnelGw7dVIC2Irh1HVeRFNMx8LB7is3mHGzrOy908h3cpeLNF05d3Y
LxwjsapLZ6Vzvxs+S4+4X+o8BYvwkyz5LfPtvZoPp18cZ6AzpstYMetv6Ps7
Ir8nfZaopzlzWz3IBxe1N4GeXsHlrTheOyi40y/nRavOC4wVbcI5NeZO0V2y
fzuFVzX0ntG90S/H08TyHcUb+jrRC4r6PEf0EfujY4XX81xkjILnHtdxOWc5
N1TjMdRNokVijR3anxAi5yXPz2NVnbqIOYwLEzPia4c0F0U9xdnvxBwu9nfE
VPcjsqJHeQ05DufMM65DbkOsiRRcCjU0K+YQbxi/ZV6IftLMFzF3RDxZz4Ex
700ew5w36wCppaijmP9mPIe5c+ayGF/WmHFJ81rtsujOdbzk4vxC3heY58ab
J4zYkWLFznSbLtYrxhi7FW/I6ThXkXFg8hViyclbv0PHwm3VTcx7E1dYb8MY
MvuoGLMh7hCT2JNe2TSmdcWMh8SITmFfA+voWHMcX+JWHsFZ7+x54IxCau2r
n/8JS7d+o7VaUTk2HE2vRc/MquatP4zIw44jiTrnMrfMhqGZs1g4fwOtg3Pq
fWywNmuN+LWv/qD+aOQgzBvNyB7G85r1MPTnY/1NaGql8ib2fbNPlL1TzCHV
yd40cvaO5gwYJyYP4Vrn3/QjzKx06KxRT7fsWRY/ojMq1DuLXjja8z08j5MX
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
5/BX0n0vJU6oFzU+BSWM6VroKwiLtUroia+y1jZb8yz8YlKQpCmBdUAiDpCm
etctXnin2sflYW9oFvaHZ5Fe1IthzbWmEdzrqljEgjln64f4MeMs4wvHcArq
Tav7b7HsPawSY817qh/x5lnzHKGpVnVW5o+6ap01vf/dKJi9GYh9bjl0TU30
DI6Jus3O/hF6ngZIQ/XCND2IzqkBNNMz2T4xgaruQVR3j4vcpO2Oodho7Sdy
j/IqmmHr5Cn2wXU6HYp0BZifmsJwfw+G6PkbMfWgkLRWZHgMpKRxo+KIu8cr
IYlXC79UHg8//wPO33mMB598jS9+/x0On1wh7TCLvqF+woM8+kwtkuIi4Ovp
CLdDVgj2dcfOrethvnUD1r3xCvGQBly++wg1Le3IoTXx+OnTpEcGcPbsaXz5
2ce4e+sKhvs6MdjTjqHeDjTVlmPARJqHtEIvPbtqwu6J47fR2LeMvMoeWnfm
MDZ3RPCG3pFuoWcqaJ3dZ+2DtS/vhYz4KPuJpNJapifs0xDXz8gqJMyZxczC
PNIVKYRR1ait16KhUYPaGiWWjvTh+NFhtLeUorOlivDGhLGBbjRW6aEvlKO1
uRh1tVq0d1TDYCjByBitg531NDfrMDhmwuB4H0amhtE11I2WnjacOE+8lHBz
ZHZMaKVzF05hcKQHC4vTWDo2L15Xzh7DxStnxFp/4dIK7j64gZu3r4jx4ZOH
hIc3SYN8RO9bFuPm7Uv46JNHePzknhiff/MJ8bRjePjRPTz6+AEOE95o9RpI
ooMJ9yZw/NxJXL17jTTjEdQRF2smPG/raSENytqpgo6ba9rakK9To7KmSHiz
lVVo6Zq3YHKqD+OEC/X1eigypHR/wxAc4IoMmRQ5ynRERAQgL585XiPxn3zS
ikbxPMwRXly7fROThxdEPOnUpdMoLMsmbhQJdV4SaboWlJZroMgkDRUlEbEo
rSZHPJszs3Oora1HfUPT6l6/qRtzhGmy1ARcuXKWMOm6+FstrU1YPHoERwlL
79y/h7bODty8ewvHji3D28sVmempyEhJgDQsAAcstiIiPAjaPLXgaIOkNb/8
zW9w5/EHOH/9Ju588ASnLt/Axdv3hCfcmavXcfXOPTykn9++/wjXbt3G1RvX
cfYirRv376DZ2IJzl85ien4KKtKzx2mN6OhsxbVrFzA7N46p6SE8fnwX5eX5
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
xLllvFEO+w9YM5/OrzjXi/fFY5leIuPNcv0k/v23/6HH/3dL4I6UrCf7TBbu
TWSOI/DmUFgBIjLLIDVvOdbQ2V6/SYMwRwvLNihA6isZzN6qj4Wkh2YqBOET
jRjWcJ/Q/87ViMdn2r9gjlY84+UM0mqC58xVFXF8eh31UGy2SOQ8illK3pij
7EX7yR9LDWOxwiINXxI2LTBMw1KjZMal9TrBqD35CIm5xzFniRJxGgsoalhD
Vpn4t4Ix5m3XxxbiN3JW9Lwm4ZCh55a1SsdOm0youBRA4XAm4U4aY46udwaM
/bNhEVJEn7EcjhHliMrv4BqhzMp2XH00gq4bd3Hx7j3OZxsU/URFztiz73D6
4h34S1LYft8feYpHkyLPdrpeU+DMPcIVkauflFPCvhoRjxK+Qs6npf8R+X4i
RiFyz0QfjpI6Ou9FhWg7Vojei7XobEzD6aYMXO+uQXt9LpLiA3me5fGubhQ1
HOc4huj/IXRfScMJeJM+MTO3RnigG040FyI8wA5FOTE4e7oFUZG+PC+hvaMV
xZWV6Dh7nuu4rz8Y4vyDxOIG7jmZR8+VTxym6GgHylq7eb50ZfsV5DeeRUJJ
O3E/0YOrjW2rDe3p9ov32N/yiDSmwAsRvxNYc39iEvkNx+AZHc952SInUOQ4
3iRN2kOcaIg0WEFtM9dMiriwwJwrt/vR3dOH2yOE1RNv8e0+J3wmdwiL1Pzw
yZ4g3usiBjKT9o3gy3MIZz5R9SdeTfxH2R+Lae+KtUGfeK1xArbtj8aszVYI
TGnAxId/5lqSO8Qrnwusff0d9wv5/p//N9cELNhljJV7HVhXiZwJfY9s0iSF
0HRKZ0yZr+yGTxRcsVDVE/P3uGOdYShkLeOwzkjwLH9ei7WD8JmGL74yDOQl
4vIrdcK4P8IG7UDIanvyjGthbwSnGXjaj+HnA1yXO/J0Ai/efKDvpJfwxoNr
KzfrOkPdNoj4SzzHwiVZ1YjOqeX8HL/4Ao4Ziz47Nv6pPA/dlJYFLROXGO7f
YuEWC3v/FISllf82eyoqp5JnGouZdw6BybDynOYvf28JTJmrJmF/8K9L/C7O
ssCiVYYpvATWCMz5lQsJHiQlF/gP8Ub0IBW9SD9TicMywotZu1zgGluOyo4L
kJJeABl5Q+yUM4S8sjE27dLCvI3K+ErpANbqiWsfTVgRzZjzqWYsL8F5xHv7
FQdnKYcQr4nAEq1ILNWOYL/wepM4zslbsJd4qXkMNpnFktaj/zUkbCVu9qVJ
Gvu4l+6LJH7jicq2u6g8dpXez1rmNpt26uGT5TshtVQG0ps0sc7AlXT4tM3Z
Zp7AeLPLNoe4TeEveJMODdfUX/AmF+bBhTgYUkoctBSHw0tg5ZuMqvbLeEhn
QWglUTcl+vNeu/uA6z2v33nM/X5CYjM5j/iJ6PUisGZ4mLjxdKxT4IvAFdEz
QeCNyLsV9wvMETkX4mfxd1HLU03nLq+8gXvkinlVRQUxqC5JQl15KlJivSEJ
90BmFv3e0oSmM+d4TmFJ2zkUNp/lfthlTWe4p5O7TwCKijKRlBCE+NhApKdH
c76xh7crImIlxIOS4EM6LD6nCFEZhKlVzZzPGU86SuSvZRJ+FR49hdJjp1Ha
0s1zRETOR0zeUQSn13LtlMBiv4Qy7md1uqefc+kejU9jqci/fjD+DA+IQwi8
sfULwuT737F/XORD3h1+imv3Bn7jOoc8gzhWLnIBBdcTNSHCx3VjcArGdF6k
/x/W3ju+6jrPHsYyjKPj6thQEQREQGpoCSGk90p6J7333nvvvScQAiEQem8q
IAI2FAs2HBXbWKbtzO7sb3d/z+553ud9Ccu4Os6z+/zxed3cm5vk5t7P93zO
eZfzXuCB+9Yl4p716bJ/0zQHdZtppsYd7xCcudMkSc6nJM0l3Cff57ptaQJu
XxGH+9YKF1oegOD0Fq35u/r57wVnvlKfxVeoj+X9f080VnHHmJxRLhpbZr0y
81Suia1wiW+DiX+Z4J2cv8uCBHOiMVt4ys/XRuFp0Utrg6oVcx61z8D9lsma
673bPBF3W8XjfttkOeezMccxH/NsczHTNAGPrPDHA8/YY7dwug+/YG8898pr
eP3dK7JX3sOH8tqef+kdmPunwDw4S7AmA3Zhuep7w35watzMqu6beBNT0IzQ
7HoEpNVqzY9XSq0ujRlHFsMt0tALQT+wotbNqO3fgcKWISTSFzGvFkGpFVqL
Rj7yt9YUxhBDiDPkLVPXMvHo+1jD5/BsIK+gv/pP4c2dawSvLfNx5+p84YPF
uG1JCGLLB3FUdDnxZvp9z+Ce+5bgAbm+pz+0UOfH3DbXEvcYxwsvStW/R5y5
26pEcKfA8DoFXx6wKcKjjmWicWoxz6MSCzdWytdlmCE6bLpJopwPmVjsXSZc
ox92iZ140ku0n7loK8cSPORRhQediDc5uG91JPomzsuevS6vZ5bgjTlmLbbE
wwvNMGOFDaY9uR4zbUKxyCVVeG4GFnmU3sQbs6guWMZ1wCqhFfYJjXAUneiW
2gKP9DbtY/BL70BYbreeGVv2n5Hr5jP14nvhDfL9dzTvdEFrcK4p3tDfj70M
Z169glMvvYSTly5pvybPefIX3rYNbMUBwSjyGOIMcYhnOnuUiTXXvvhOOMtJ
bBZ91LtlKxzdHVBakYuRzZ2orMzF2FgfEpOiUFRRgqaePvXwqOoXLiR40Lr9
EOoGJrRHp75zCE2dPdg2MYYrb72MPfsncPz0Ubz1HvNCr6rXd35VDSLTc1FY
34HM6nbkNvSiqH1U69fKenYir3mzYcb94ITOEWFOlvHJpPJexBR1Iba4W/GG
/Zp+CUVolL994LmLOHbuJfWTYJ3x+Svv4N0vv5HPaDfsgjbhDeE35Dbs9zh+
4VXN2TF+RV21YJ2NcK1nFXOev3RFtSn7Pog3zItNm2GludOfm6Tq3pxukWeo
LRM+c7txkvDjBNwha/oawRzh5FzTV6fhzpUJoqvi8IhpNDYIz33lg2/Vk+J1
ORs++faP+OS7f1Sf0Q+/+SeMHDyP6YI3j6wPEQ2WoDkq5/hmxZu1fsLJTWPk
GgjELwRnuJ/uE46z3KcYVtEtMN1Uh/keBXjcIVP2caZcb/K61kWJ5kuQ/Z6u
/OYJy0ytSXtgiR/uftoO1aJXL70tPO/li4Kz9PJ4Tc4xuRUMviialDV7doK1
5CvURzz7WG+TVd2nODOlp9i3yRr4gIx6zXPTb8wnrV70Ve3NnJXTplzFFPKj
ps171ceYvsURObVam8y+rL8Hb6a00xSnmcKaqdgOH+f3+TxqLdVdN7TXT+HN
7SuTcL98rrctzdK48bT5/oo3L3/wpeLNtDtm4fbpc3D3/Ytw533zMO2Xc+Uc
ssNDFqn4uWn2Ta7F13GP/B7ymenrMrXGcLZLGdaHd2C96JqVfrWYZSc4JBp8
jlMuVgdUC+dogkNiG9wze7EytA53C77cIxrqV/Jz99jl65kxT86O/p0v4KPf
/Jt6LT8wZ41wm6WCN6b41RJLwT4zzLKJULxhnyb5zXLfOqwMbIZ5dDdcMwbh
Kr/fXbDFPUP+VlqrYo5ncgc8k5pv4s3QntN44a2PcOzFVxRvXnrzqsEHU3CE
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
wL79O3H9y0/x7rUP4BMajo6hESw3t4NPVJL2YN09fy384vM0F8788RrvXFht
qlTM5p5dInp2hXe51kk9YJYomFMA98Q24QZlmg8JSGtA+9YTOHj2Ki6985Wc
A/8H3/4L1IfWNzoHbwomX3r7U7n9WnukqKeYp/r4mz8go7gSaYXlOi+GfjCX
372K10RTsVf25Q++1fgn80LMO8wW3jDbqwIzRLc84FaIB53zte+Ffcdz3Ksx
b6N8zu7FmCOYONdNMNIpTX3yqWNmGgeql8FjRr5YZhsDK9E3tiElsAgph8Wm
Kjl3muCULGdOaqfgQ7vW+9lFNcIsrEZzGyuV6xSrllrhK/w7uAbr5SxcK3p/
mX855snredw+V7hJLhaIpmOs+VHLCMy2CRH+vx0LHMNFVyXhKetEPGUrXMfW
cB7OdsgSnBJNJnt2pksCFnuyLjlZuIhoKrtYmPrnKt5EFhhivSFZBi9/q9Bi
rPER/Sf4ZBpUBOuYWsHLduFheboWCq7Md85VnjXbTjDMNkOuhXTF7vku8nP+
ct2FlP4oj7l1/ZV++hsY8j/BG/JV1jg87FCHaYuE28zeiJCSHnz0p3/XeUOf
yrV97foftJ//w6/+oHkr78w63LY6Wj/vh8yzsMS1BG4JPYgpH0dG86RgzVHU
j50QXjOpPtScZWwakKbzcBhDtwstRWoVPRonUT1wCHmtkwgr3Qx7OW9MYztg
GteF9dEdMAmvV77YvfM8PvktdF8L1cKvf/fv+PUf/gNfyh7/7C/Acs90GHnl
a4/FIxa5WOLViFkOlerVtNSvDssCqrAmsEJjxubhtcqj7SNb4BTVJPymAyEZ
rXLNv4FjF1nLd01rJAw9UfSc/QTv/vo70VPbFHNYE8oeaeZxWSdPnJmKCXP1
je7SWr6pXPiU3lLfdVkffvatxnFYYzwinGZY+E3vzuMY2n0COw6eFj12EE6+
m3TmKHM9NgFx6Bo/hJ6JwzD3CsWOfUfQMzAMV2dHvPHaRVy6cApffv4exka7
MbqlW+dqXnjlAt77iB5Tv0ZOebXm1svaB/DgcnPt40uq6MTj6zyQVjMkHD9e
8cYkoEi5DM9pIz/Bad9qnQdv5FMl53wJVmyUc9wlR3uizf3z4ZvUiPCsVq0P
KW0ZxeFzb+l8wfTSduU3V659jXOX35f3S97L9z7WmPG7179GSX2rYg7nOlx+
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
M7Z6W+b0+6Tnnprk3NYFyW5dlvTmJUltXLBcFX4FOgFwHvgN15ppl4fVGd58
6XCWE2M5lGWzG758osD8lR/rGj8UVm1YcyGtS3ySOo3bMEuKHuAf+Zfamkfj
hJgk+j4214V4QlSb4Y1TN5zr7YvKsXPXl4LX7Macb/lV2zpzdGurLa/7XEPd
madEDYfDyUptT3ZnWYE7zNahzhAMpNcpPL/X6e+qGZWMpknJapnW47hxEjQm
UxQnUqr7JLWmV/2EPsmq6zXLru+TnLo+qeyYNKMuED8AHVesvHverKB9RjnO
uCRWD5pW7u76GRdn3B5OsGa3tudznKk0Db6vnKmwmgAw9ydhrYY1LgbvjWyT
I4l98sK5MqslIN6OodeOxg/8Bh1+fCZqeqmxQ6OVXDiaqvTHkqvmd6cf4Bxx
3NR2m+vHLFGbz5vjUd/TY1yQ+jnmoxOLSVHfyTQp1G+iT5PrbGT1kcxe13V7
B22G9/T4rnGNZV3bHOfVh6FXEWzguOPz6P2Lpg/j8BGO9CrOXntivhGYMn0V
zHqm9tTwC5u7/sxeA5xZpufpvmLKI/WFHn8gm4/et3Prk4Tf3H3fjPe1cvtd
Wbyh7wfdHn09anCxIcW2YcU417jNPMm5q7dl+eYdtXty48139G/v6Gs8lFtv
Efd5V649on/qiWw/fMf6F26/9VO59exnFntGW2J88570LzraF3UD8+oDLkvr
6KpUeaakZWhZqtrHpHdSfc2BOasFHJldlr7xGfGPjJbU/AL56Bcfy8//+hfy
3/73f5Vf/ddfW07qz/7q5/L3//xP8l/+t3+Rj//ur+XXynNG5hbkbGiEHPEN
Vdypl8Jqj3SMLEhp17he111S2jcn+R0zktuxICU9m9aPw3o9q+v3ZLz+5tmD
VvfpaP11SRi1reoHMD+VXAl1IUXK39FYq++f18+wZPN9a3um9DMtSh/f48oj
GVp7JlUDVyWnfUmulI1KWtOi9W6htQbfQRuCOQLomDJLg+uQuhvqV8AcsIZ4
LgbevB5GLtSj63bUer6Z68KczJcCyy2f+gP/cvNjbC6Tb7FzfYfUWAyBeOYf
HC/w1g3nGc5gnO+O2zjaLKU7vpXrX9HDCd7sVY6FOdrYtdYPSG0fsx32eGcE
v2JY4+gmowFNvSExYr+UZsszkUMDb4hhFum6oRY7u3nc8D+zYdhyVej9FbYM
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
54LlfECohIdFS1BQiBw6dESio2JNPyImIUcyC5skqUA5Q0i+6cUwX810EbIG
5ULRuPgp5pzM6JYj5NR0/QcU9klgca9cVDyJYv5Ii/pD+n3lKufL7lxU/JmV
5GZmdfYbJ4pQjGKGJZpqzA/0V25MjIq8OrMETRcJDqR8MLy4T/xzPIY36FEw
JyOicNDqi6k1vqTXHjN2ma97wjvH/GRyt2EPaxxNCua/M2uXnAd6Tfg1Xzme
bbmo79l8eEcL280/EYMhzgvuoD3HerIZeiG1hiHu3FX4C/3e5E6oF37hQolp
TDIDhPnGzAFkrguzMunvIP/op2snIKPLfMjATOW5+Y7+E3n/Yt2byxWfa3XP
axzT/WJUrx29Pova0U4YtBpsMKagecjOsTLPmHF0OHtN75Ry9Dmb30xOanj5
qvlV5KjAoOahGcWmCcWaYSn3DO/gDXVbxIbAG+ad+u3gTc1ODBhz+sGqduxw
Yp/F44mRWR83eoeKr2A9MTHiMxavRz9CuSYxMldfgjpw6pDOpPbq7zts2uT0
dHA8mdxp31uW56rNTnzJ60t926/Q8nnUsxd0bdu804u5yrv1t/fX/RBdEfr3
4MloONb16ueeuiUz2+SnfypXH38s248/Muwx/ZiH7zm2E4t517TGN2/Bf97Z
8Z84OjGb9+15YI37fHjS6s1nNltldvOBTK3eknF6OBdvyDBzgmevS9fEpvUb
1XTNSKlyVDQY6Wejzpv+8kZv/ps4HH1KWO3gkvV3lVKn1zpl9ePU4ue0jBgW
tM1ft76i5ulr4lHOQp6ucvCq1Cvfa5q6Z0f2LeZGVg9tKP5smnFeNbipj22Y
T4a/xnlpz5rkKl5R70bPYr76XMxySqxlbsGMXp+zZqm6TtMVY7DsliWLe2To
46nKd5gXklU3bbOTi1vnpFJ9xMq2cZuHEBRbIMFxhaZ/nlLqkYjMRovVnLtS
JWd1r2CePZq96IMfjmu3+b0+el346O/rmzckfmrMC/cvGJSgAnQ+ByRAsSBI
sQdtc/Q/Y6tGbQZVMjn7Rua5LOj7XZSkmlnFjQGrm6XOhL46dIrRk42vHlaf
EQ3RQasDjCzpNcwhT4X2I32+0cWDxn/AHWa30VNBHxWzguE5RxPa7bqlT2mP
d34hMztYE2AP5mpf0weIr/P1s0Vm1ACDTfQlW34rzFkraNDBWV6OarZZZujQ
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
P37wslNz/IrX32emCgYPYV6zac4EVe/4UqwXcASeA6bui26VV6NajPvgf7F3
21xFLy5xH7kS8AbeZK+v1/YrzMK9XGP968xZ5/cFQ017r7zf4n744VXd84Yz
bp8vPAYOA2Zwbnknz7RhENhRqL4+fAZeA6dBP4ujmWIOj7uciL8Ff8iVcx/z
qPg/9PFxG1+LWE+ZZ9T8KOLOYI3NqmocMz1NeNjFrDa5kNRos2ZcfHGN/J1r
5muG1JgmFrVMJxI6rYbyXKryXeUqwcpNAnKGzNAn4b6zqd26J7RbLJC5gdym
7843o8/89t36P/R62G9Hz0dEnWHUocuObh/chmuUeBhrAbxhnbwUUCgv+uRY
n2tAeptcVrzPrRsx/c7R1Qem74D+g/lSj9+zmZEb95/K5v1n1oNwVbEHzLE5
ko/+bf3Np7HHvf0JnqO+Fbizov9reuOB2eTG/U/YhNfQwMFmmZV57bHVRQ8u
35LO+W1pn9q0eC7+VFm3068dV6Y4kFat66ha97Q2SdTr4Eq5M3MjrLBLLime
oL/AjD3Wm/VN1U9LdOmQxQmxmNIR4yXZrauGM8HZ/fb9wWmoMT6b0GG6UGgn
gDd+arvxBnPxBszi9ViTu/GG2YJoQ1Ofx2zQvGb13TsXbTZBVqNTX0ePFnFM
/8wem5PKNeDuTaczXPukL+WruIEf5accDPNRDPHN7LQ8EjEM+g9C8nqdz5rX
Z3wX7ORzwkvIP7E2UxomJKd9TtKom1SD62Dcvxtv4DZoz6Jn7mINPhlYQ3+D
W/+HpgN5jBcDSwwP4CDwHGIHcHpiB9QFwvM5un0QxKmoUSavzv3O7Og68wXA
Knwy4sKYzVPchTfMZ+WzWpybfreSPkdXuHrQ+q5LOh28ARvAAPCGI1wH/sE5
vhH8xOU24Al+FJiDgTfwG9fwxcAS8Irncx+YA9cBv3htl/uQ0yI2nNfYbzEb
NLjSap1eT/pt0mqGnVq/tCabmXLyinKY4Lods5h5yPOZtj/09oyQX6K2wI3Z
oI3oo9dqYO6wXCoaV7wZtL0LToK+D1gCZjBnAkxhPjHmzrrh6J6/pM93Y8gY
1yQzp6LKp82IBxJjgNu8EVltdUyvhZbZnOILqS2SUj5oNS3U66LJB7ehtwFu
s/XobVm++UBWbj00Daq1u49l896bsg3uPHC4DnWBTo3xZ2PP7vt2cx1iOhi6
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
Go+xVixGpngDv3H9KX5DYsv4KvgaxDbgN8Rw4DgWO64Y0+tpxHqdbE57+fAO
rzHz+mEubjncqVeC0CFWjsM1EJQ3bPEacAZsIf8EzvD5LDcUW2f9TfAa4uTM
qARbAjPadq5fch4hehteBddivlRF77LUDK5bv33T+Lb122fUjyvPH7DcGfnv
sOwuqwk0DhNVazEaOIyLKY4eXqX1PXKNo41HTx+8B2wivkNdDLnyI7ofgj3g
EK8B9+E134hpsF71o3HNds7zeD7fN/vyG7GNpoWwT6/tPcrbma3H7Cvm7L1w
JkV+dCFLfnIhQ45EF1tfQGrtkOmVoFPSOLRm1xLXFTjj5p/ABNdvAj9c7oIR
y8VcfHHjOW4+iyM4Ql7cnfcSW9hillzeucOLwCteh+uZGo489IkrlcvkO/XE
F7ObjNcQ244o7La5v05etdHqrs0Ub6hJ+p4Xc8hpUzdJnJjrFf6Nlhk6qOSM
3oiol2OXG4z37btUapo++NZwfPKU1HLgB0WXgjH48hMSUzajfvO8+gZzEl44
qfveqPLTOqdmMNg76y7UO085vNb65fhf1uuKRoXutelNc1I7eku6lp/JyNYH
6q+8pZzimeLLM9Mtn7YZC/dlfI2ZCtdlYvWaLFy/KzObyjfm1mRsaUs27jyz
eDFx391cZjfufNo+y6cCd6hjZg7msuKOgzlPHMzZfmTzHqgFQm+Y2D7XBtcD
vzH6Z83jW9I4tqWYMmzasezBrTP3pGJgW3LaF61u5kBkhV3j7MPEa+LrZq0O
hTgq1zDzWKmnB7up2XYx5xTcRg0s4raDNz2GN9Q38RhY417/n8YbMIK4iFt7
C94QWwVzLIfMHBH169B5oM8SvKGWhdo5emzBGwzc2o03+Hcu5sDPqOOF04Az
aJCQ//a1fHTrDtb46bUK1uCf0bcOl2FGPLgD5qVUj1rcKK9lxnQJ0ZjF0OAl
Do9GKvNN0GEJz+2Si8q9/JObld83WN/Mp/GGo4s3r14sM6yB8+zGGvCQ/ZXv
DtyH27/q5UEcuU2cwcUj8lzcBmfAIP6G34/e5FcjK9WXUEyLrtD7G4zbfM8n
TddWrmGNb3K1XCnpVA456tRrjTjasuSKXD7jakOCGbvxxo3TuLjj4g1Y49bq
uH4S1ya8B2yB12Ccu3U5bl6dv+H/NAyu2iw3tEfhM+F5rRKcAf43WV8xeXvT
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
w0z59CZfe9xiazax9Y1h/CPjY3OudXjd5TeNuaLWCZdRM+I+LupzFytH9Dky
m6fl850ri7jjV7pctt3LltFN9TnH15+oFjXfsPxC9ZA7nd/pzpX2uJzmmGsZ
W9f5Qa08swN5LtO+g/NlAy6lvN+l1YR1jhCvI3aXMG6KrtbW4x/sO0WHalOx
PWaB8Tr0q9EWRc+Y2b78m1hDYuupet+pK0CPE55CT8/bxSPSPPig1vxRw4y0
Llt7xjVrYz4fzRnt61jmVNuhudEdxn2M36OlQl6PGrOsYO6SnVWcUz9nih0n
TbV96P1y7hjmUN8b4E3gQ4Eph/kMOAPXIMaJD8Jjfs7rwajBa/cVQ+asbrN9
iJ4RXALcB8ejS5/q7BY3Sv5OTzI2xHPEweAxkfk9YQx+RsjeV2/ituuZ2HE1
xv29fu60u9I6pe+f+mJmddGHJT1EuNPIltczNoN/0NdMzTfcKnrjC/V/Kv4j
PnFH74UZy+STSgYWdf7jL4E1QT0IuingDfyGPcXzcAP0GHvQNTc+wkzVBeO6
6Dve+d3f3M7Xf3a34NFP/6TYLTMUiAH3md/dHt+SX1cZWlT8FGwmrsHa5d7B
46i/4/4RqwFziOMQg+67dtNFVm4Lw/Chlh88tbX5e2HN7J1HihvHtz4T1gzj
ky0yB21XcS4wkpjFpUY/85Y4F3WL1FCTz2PWAbjyam7Y/Wt6r/tFRkjn4of1
s8KaNwqjhjUR91L2M7wBZ8Bkara5V8Rv0Mcp7PC9JjnU8Nj9KuteEs4UdRgO
2b59P7vPncoLi9OcKoy4E/kR94FhmfrHa2eVY6H34XhhTPld8EaYk6wrAW+O
Gg7Ba7j6mesDwh+wBU2uAHPAGf7N8+Rg6G+mPp58Rrmd72jq1g6uu4y6MVdp
51N+o322opDLro8pV05Ojb7gFDtvXk/v9L5Y8aB4c1N0SzWSDZENWxtRl1oZ
Ua/cx4Ylp0v63LmSkN2jEfWjVRvvYS4yscRc9nTjpEu3vZxjuKWYdM+UvZ9J
zeDh+0U3lPOke9q4zg3jBROrmtXMWUPtVmJjT7pF4BS8h7wLOV94BfEVctR8
t6erx32+ts78YPp/Oualv8X+h3sczkvjC+EXVCV9hjTqI+weEEcgxoD/zbWg
a+FnDQ7AviSegfHvIDeNX4KPoXjnIv04+8qzciXnSn0j2pLBz9CGIobL1b8m
aYYZI2CGGVeeiy2jH/epm1r/Uvnu2PK+/3uzd5TT5QpuMXdreOkzxTLALfgS
3JuzHw5Avk/r1T4LepbMCeAK5lQPrkkLpzG2eXAl/0JcNJgzSA8tekQL975X
b0FTUtsFI4ZETCm/+5r2Y1pTQr4UcRuvLz0jXYOg78rj97rwBm3TnrldcSZ8
qsTWI80gXH34g1szf4rcFPPBWmIrwotAfxx+U2H7v6LX3n//qnghn1MWvmE8
G963qTgTeRNix+jTwJPg2OMb993UrQeK2eBHXTOsmd55JD8qto5GGT02aCLy
+XeEpQf9lsk6IZ1lTdfUn0G9Eho+6Dm/WTRqmDMse7NoTPqFXF+zfQ/e/DJr
SPFi8AYs5j6RSyKujr8BD0BTHX+K7wu8YW9l1MVdlq3dvJYZ+VKZxAyqE7JL
dddk1I+ANdTc0NvpdSw83nCljpmaPvCDWn3whcdBPAfM+aeUzgPcCbgNmMQV
7kN/FT049AQ2RnaSeXrziWYfuGr7bkvsPANvmOdYZDyNddcwvC1u8y9nG42D
hQwfQ7YWEjrP8NnJSZwtGzQsCrlz5cxF7Tf8iakvhPpJfnaioFcx58vN5qcU
hw17jUMYF0wtHxbPqSQONLyoOal3f/8X9+Wf/8/Or29snQ+70u5xl9k4ZPgd
sddNKiY4f++J4Z3t7/aY67V9pFniN3/nJra/Mz67r5pd+g7ow/nQzsqz9Yaj
zVOK1VFPRZ4YQyc9MDBI/bO2/8CfLM0RmdTsevAHE+50/rwpbopvZfcT4zG5
Iup90TchdgqegDPgAnlArgGmgDdBvYevk/lCFryO3pP49c/cxI3PNYN0cu2R
ZnVN3PDGrEDicDxGx5GY/tC124rVwG+Y8xxeeOhCM3uqrWlG69c+L/uxzPgb
eENNMdxc3LYxIcwBbzhbyFU1jK7pHIerEKsAb9DmAmvQ0Fl88AfjA38QNmhu
e/K8KbKzh/1I/RlYjgX9nOANtSUYHJx9FcTD+F6YUcPsZnALfxEfiFpFer/h
uawXuE1F35S9zwX5jsSrawZXxNcqelfUm8H5Cu7weYVBdgZSnyDeqZiNz1+R
L4/euONia7uGObvGZe7aWXjf1prd8+3P5UdFV/dd/5L5r7YG26Utv5PUzF7y
dYvmf8NrwBpqcMn5nEQ7psJro75t+5y5WWDMG4Ux2Yt4E+hzEifGp8LnBHfI
h6MPfMl8MyytzhtYk1k/oVw4V+YK4U9Rq4lPBeZ8TM6rIq4+TXBHveSGEfhT
xG4wMAbsCOas/5QFWAQPwnguwBzixfRnvZs7qPfwcWnEvZ/Z7S5URNylsmGX
Wz/mSo1Hpxk2fFw46D4uCbsPC+33M3vk95E/4zyidpD+/yOX29xH5nNRJwHv
pY6JM4t8g+fKfs+mGn86Z/8HtT+n8gZdmvk3H+SGVIuUZ34Y/ljX9C03t/vU
7X77P+7z//6723z8R1dn64bZhlfNr64esr3cN+mu7Xzp511uPdTMQ7S30OVk
Vhk6W+iVU6/L7KUMw7VjBQPiNRXGZ84ap2qbue86r+2rp4z+tdDS58IY+sx4
zNpGGxBNXz4X7599oZos+3flkO2BweeN+pTAqD2hVoXnuZb1Lkpvv254Xb4G
uUDiUNScUWsX6CMEuixB3XzQg8xzQW2e5gfwM2zl02fXQxaZ95wGfOmf2pYd
xIVt/xPnIa5IHou4jGYb93t8oRccP4ramULD2Tz7HnPs++QKFqkOZ2DBsMP2
aGxd/lE38W78P3Sttp6I2zDDXDmayHVhTEHXtCvum1dcg5gNvTXgOOtEMzNq
kjmYyolkjtH7DV7LfVX1kNTjU0OM5mZ536z0JiIr+2769mO3/Ol3bvbu165r
ZsvWyaxxqmV7b1t6f01optv7Jg4FPyvtWlQ/GP6GPpPhUdv4luJM5KrIW4E3
GHHEia194Uxs3e7h0k1xmrBx7j7z/+E14A0ak2g+txl3pV4or9f73vRl0G8a
zFgnnkFvQjBrQhrwpRMyP0cr7n5te/3VvBHN7QN/0B8/Vexz189hjvGbHOME
whrz/cGa9HqPNVnmZzHDDK4D3mRRV0Pcp85znJSqCZ9nr+C+J3Sl9xC8IV6s
mDGPjc8EsZufMl7HFZx5EW/QLtXfN76SUT+l3Ab3n/MtlLjjOkZvuoKmCeFN
muEI/h/xqAvGEc6URNRTSk0kWPNObo/WDHyXGDyYot4J+z2uKbVjivnRi0p8
+lTJkPGcQfmTpwuG3L+dqXFHL7crRsC6KOqytd06qvmpM3ZmgSXooFM/ha4+
MaC2iQ03f/crW1/faI3xM9Z7XTQ5H3FmXzqGLYn7dtbsuSu99J/YZ7HPUGr+
wie2vok/DK8+cVN3fnADK4+87ui45zVgzNXJZ9rg8B5w1PtTC77GxPCEeVH+
rL8pXVB8S/LPYEzw88N4w3P8nFo/8ZekhkqgLxdY0EP4olG7Glgw4yj+4vX6
Z/K9xGnMjwJjeidvuq7xDdcxvq6elc5x/37pG6cug5wG+5DYDFjD3GreL1fy
AoXt0y7fzhCuxPiq+g1LB+aTeLMm3QpiwNR6gzVTt3/nru1+68Y2H9uZf1d4
U9g9Iz2avI5p+VHgDbEbjzfTvs9P2nCTWpvMjijsCfQ9Vg78WPwTfo/8F/pU
7YmbWhf0toM55KO7zRdqNn+qnXy2fX76e7nnYD24yuf1/uKialP4TAHekMcg
P06Og9oc4oajq2ig7InfRFa2Xd/8phtaum3nmvl30zeVn+9IzrMgv08sC6yh
Tlp6RG0LB1o+aAZRkw2vOcCaJN4EWIN5nInqMXrw71wZED+gJ5n9x94Fny9S
Z2nYEuANWENtHxiT0zSluAXnBNxUsxPteV4P5rCffVx+Qgb20Hf5XmHEvZMX
lh0rGFHdMPzl5wxMOow5AecJao+p7cEX5D1Qaw6npi9vav0rFzI+WN+/6PLN
77lUERbvSa2MKk5M3v6M8RF8Jnynd3O73Ht53fKXUqqJP5kfd6XHXjdk/GzY
fLAR422GyRUx5f2FV/Y3fnG23h273O2Opne4i4ZF2c0Jl2/r8aOyXnehut9N
3nosLpPZFHEplf3Ck07ipAsP9Hjm9tfCmuvmu4+an4FG0aWGMV+LYNyc2BS1
2fQMklei16hp8r6rNCz50LASrnLF/ATiKnXqp94QjgR+DzWYyiNN7+kxsRfi
McFrOCvBF8ViZu7LlC+ObulncJnDeBPsYf97G6p3Pax7C87QYxMYXCboMQg0
6AL9lKAXkD3BlVl/+tn1PR/fWfExZvYOcWJyUk3mxxAjqw0tqP4ODVH4Ap+7
UnrJy+qtRn8F3VxfS7ykvVhm3ITYB7/nbV45debOUqNPTDZqe5R+bHTQFu59
px4m+E2n8amqyIowJqstYX7FhK5wG7CDWDB4w1q8UDelWk0wB+0NYozgDT4V
fBrOTN0/s8MyGmKqQSUXQQ8DZ87YOlrWt+w8AgNvmo+9IxzsMY4FpzyMN8Sp
wJgK1STOq6aJfBW8E22u+IbXySYWBN7E1u7JrxqYR3udmXl2zsSpH78uqzPc
rYttqCeyeMD3YYA19LCjnSH9DuM19PFR2x7wmRdxhjhxECs+VhKTRvPZhln3
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
     "], {{0, 177}, {284, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{190.01562500000028`, Automatic},
   ImageSizeRaw->{284, 177},
   PlotRange->{{0, 284}, {0, 177}}], "]"}]], "Input",
 CellLabel->
  "In[798]:=",ExpressionUUID->"17bee132-1432-4cee-9d14-8de0f4bf9089"],

Cell[BoxData[
 RowBox[{"WordTranslation", "[", 
  RowBox[{"\"\<pancake\>\"", ",", "\"\<Dutch\>\""}], "]"}]], "Input",
 CellLabel->
  "In[799]:=",ExpressionUUID->"d1567fb1-2c6a-4355-886c-e5d299b174b5"],

Cell["\<\
You can accomplish most of your programming tasks by making use of these \
built-in functions.\
\>", "Text",
 CellChangeTimes->{{3.8709537821920443`*^9, 
  3.870953808002419*^9}},ExpressionUUID->"9116f42f-1d5d-4834-8297-\
9617c8b76974"],

Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`xx$$ = False, 
  WolframUTools`Private`size$$ = 400, WolframUTools`Private`neutral$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[1., 0.592156862745098, 0.10196078431372549`], FrameMargins -> 12, 
   FrameStyle -> None, RoundingRadius -> 5, ImageSize -> {240, 65}], 
  WolframUTools`Private`over$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
   FrameMargins -> 12, FrameStyle -> None, RoundingRadius -> 5, 
   ImageSize -> {240, 65}], WolframUTools`Private`chosenAnswers$$ = {0, 0}}, 
  TagBox[GridBox[{
     {
      PaneSelectorBox[{False->
       FrameBox[
        TemplateBox[{
          StyleBox[
          "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
           GrayLevel[1], StripOnInput -> False], 
          TemplateBox[{12}, "Spacer1"], 
          StyleBox[
          "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
           GrayLevel[1], StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1., 0.592156862745098, 0.10196078431372549`],
        FrameMargins->12,
        FrameStyle->None,
        ImageSize->{240, 65},
        RoundingRadius->5,
        StripOnInput->False], True->
       TagBox[
        FrameBox[
         TemplateBox[{
           StyleBox[
           "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
            GrayLevel[1], StripOnInput -> False], 
           TemplateBox[{12}, "Spacer1"], 
           StyleBox[
           "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
            GrayLevel[1], StripOnInput -> False]},
          "RowDefault"],
         Background->RGBColor[
          0.09019607843137255, 0.1607843137254902, 0.25882352941176473`],
         FrameMargins->12,
         FrameStyle->None,
         ImageSize->{240, 65},
         RoundingRadius->5,
         StripOnInput->False],
        EventHandlerTag[{
         "MouseClicked" :> (
           Switch[WolframUTools`Private`xx$$, True, 
             WolframUTools`Private`xx$$ = False, False, 
             WolframUTools`Private`xx$$ = True]; 
           WolframUTools`Private`chosenAnswers$$ = Table[0, 
              
              Length[{{
                "Which of the following shows the correct syntax for using \
the Wolfram Language built-in function to compute the square root of 4?", {{
                  "sqrt[4]", 
                   "Incorrect. There is no built-in function named \
\[OpenCurlyDoubleQuote]sqrt\[CloseCurlyDoubleQuote]."}, {
                  "Sqrt(4)", 
                   "Incorrect. Wolfram language built-in functions do not use \
parentheses around input arguments."}, {"Sqrt[4]", "Correct"}, {
                  "Sqrt{4}", 
                   "Incorrect. Wolfram language built-in functions do not use \
braces around input arguments."}}, {3}}, {
                "Which Wolfram Language function can be used to find the \
numerically largest element in a list of numbers?", {{
                  "Max", "That\[CloseCurlyQuote]s one way. But there are \
other ways to do this as well."}, {
                  "Sort", 
                   "That\[CloseCurlyQuote]s one way. But there are other ways \
to do this as well."}, {
                  "TakeLargest", 
                   "That\[CloseCurlyQuote]s one way. But there are other ways \
to do this as well."}, {"All of the above", "Correct"}}, {4}}}]]), Method -> 
          "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]]},
        Dynamic[
        CurrentValue["MouseOver"]],
       FrameMargins->0,
       ImageSize->Automatic]},
     {
      PaneSelectorBox[{True->
       FrameBox[
        TagBox[GridBox[{
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{0 -> "sqrt[4]", 1 -> Column[{
                  Style[
                   TextCell["sqrt[4]", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. There is no built-in function named \
\[OpenCurlyDoubleQuote]sqrt\[CloseCurlyDoubleQuote].", TextAlignment -> Left],
                    "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> "sqrt[4]", 3 -> "sqrt[4]", 
               4 -> "sqrt[4]"}, {
              0 -> "Sqrt(4)", 1 -> "Sqrt(4)", 2 -> Column[{
                  Style[
                   TextCell["Sqrt(4)", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. Wolfram language built-in functions do not use \
parentheses around input arguments.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 3 -> "Sqrt(4)", 4 -> 
               "Sqrt(4)"}, {
              0 -> "Sqrt[4]", 1 -> "Sqrt[4]", 2 -> "Sqrt[4]", 3 -> Column[{
                  Style[
                   TextCell["Sqrt[4]", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}], 4 -> "Sqrt[4]"}, {
              0 -> "Sqrt{4}", 1 -> "Sqrt{4}", 2 -> "Sqrt{4}", 3 -> "Sqrt{4}", 
               4 -> Column[{
                  Style[
                   TextCell["Sqrt{4}", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. Wolfram language built-in functions do not use \
braces around input arguments.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = True}, 
             TagBox[GridBox[{
                {"\<\"Which of the following shows the correct syntax for \
using the Wolfram Language built-in function to compute the square root of 4?\
\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   PaneSelectorBox[{0 -> "\"sqrt[4]\"", 1 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["sqrt[4]", TextAlignment -> Left], 
                    TextCell["sqrt[4]", TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. There is no built-in function named \
\[OpenCurlyDoubleQuote]sqrt\[CloseCurlyDoubleQuote].", TextAlignment -> Left], 
                    TextCell[
                    "Incorrect. There is no built-in function named \
\[OpenCurlyDoubleQuote]sqrt\[CloseCurlyDoubleQuote].", TextAlignment -> 
                    Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> "\"sqrt[4]\"", 3 -> "\"sqrt[4]\"", 4 -> 
                    "\"sqrt[4]\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"Sqrt(4)\"", 1 -> "\"Sqrt(4)\"", 2 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["Sqrt(4)", TextAlignment -> Left], 
                    TextCell["Sqrt(4)", TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. Wolfram language built-in functions do not \
use parentheses around input arguments.", TextAlignment -> Left], 
                    TextCell[
                    "Incorrect. Wolfram language built-in functions do not \
use parentheses around input arguments.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 3 -> "\"Sqrt(4)\"", 4 -> "\"Sqrt(4)\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {3}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"Sqrt[4]\"", 1 -> "\"Sqrt[4]\"", 2 -> 
                    "\"Sqrt[4]\"", 3 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["Sqrt[4]", TextAlignment -> Left], 
                    TextCell["Sqrt[4]", TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 4 -> "\"Sqrt[4]\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 3, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {4}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"Sqrt{4}\"", 1 -> "\"Sqrt{4}\"", 2 -> 
                    "\"Sqrt{4}\"", 3 -> "\"Sqrt{4}\"", 4 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["Sqrt{4}", TextAlignment -> Left], 
                    TextCell["Sqrt{4}", TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. Wolfram language built-in functions do not \
use braces around input arguments.", TextAlignment -> Left], 
                    TextCell[
                    "Incorrect. Wolfram language built-in functions do not \
use braces around input arguments.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 4, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]},
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{0 -> "Max", 1 -> Column[{
                  Style[
                   TextCell["Max", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "That\[CloseCurlyQuote]s one way. But there are other ways \
to do this as well.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> "Max", 3 -> "Max", 4 -> 
               "Max"}, {0 -> "Sort", 1 -> "Sort", 2 -> Column[{
                  Style[
                   TextCell["Sort", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "That\[CloseCurlyQuote]s one way. But there are other ways \
to do this as well.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 3 -> "Sort", 4 -> "Sort"}, {
              0 -> "TakeLargest", 1 -> "TakeLargest", 2 -> "TakeLargest", 3 -> 
               Column[{
                  Style[
                   TextCell["TakeLargest", TextAlignment -> Left], "Text", 
                   Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "That\[CloseCurlyQuote]s one way. But there are other ways \
to do this as well.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 4 -> "TakeLargest"}, {
              0 -> "All of the above", 1 -> "All of the above", 2 -> 
               "All of the above", 3 -> "All of the above", 4 -> Column[{
                  Style[
                   TextCell["All of the above", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = False}, 
             TagBox[GridBox[{
                {"\<\"Which Wolfram Language function can be used to find the \
numerically largest element in a list of numbers?\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   PaneSelectorBox[{0 -> "\"Max\"", 1 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["Max", TextAlignment -> Left], 
                    TextCell["Max", TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "That\[CloseCurlyQuote]s one way. But there are other \
ways to do this as well.", TextAlignment -> Left], 
                    TextCell[
                    "That\[CloseCurlyQuote]s one way. But there are other \
ways to do this as well.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> "\"Max\"", 3 -> "\"Max\"", 4 -> 
                    "\"Max\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 2] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"Sort\"", 1 -> "\"Sort\"", 2 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["Sort", TextAlignment -> Left], 
                    TextCell["Sort", TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "That\[CloseCurlyQuote]s one way. But there are other \
ways to do this as well.", TextAlignment -> Left], 
                    TextCell[
                    "That\[CloseCurlyQuote]s one way. But there are other \
ways to do this as well.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 3 -> "\"Sort\"", 4 -> "\"Sort\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 2] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], {3}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"TakeLargest\"", 1 -> "\"TakeLargest\"", 2 -> 
                    "\"TakeLargest\"", 3 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["TakeLargest", TextAlignment -> Left], 
                    TextCell["TakeLargest", TextAlignment -> Left]], "Text", 
                    Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "That\[CloseCurlyQuote]s one way. But there are other \
ways to do this as well.", TextAlignment -> Left], 
                    TextCell[
                    "That\[CloseCurlyQuote]s one way. But there are other \
ways to do this as well.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 4 -> "\"TakeLargest\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 2] == 3, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], {4}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"All of the above\"", 1 -> "\"All of the above\"", 
                    2 -> "\"All of the above\"", 3 -> "\"All of the above\"", 
                    4 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["All of the above", TextAlignment -> Left], 
                    TextCell["All of the above", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 2] == 4, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.92], 
            Thickness[Large]],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{
               GrayLevel[0.97]}}},
          
          GridBoxDividers->{
           "Columns" -> {{False}}, "Rows" -> {False, True, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{1}}}],
         "Grid"],
        Background->GrayLevel[0.97],
        FrameMargins->15,
        FrameStyle->Directive[
          GrayLevel[0.92], 
          Thickness[Large]],
        RoundingRadius->0,
        StripOnInput->False], False->
       TemplateBox[{0},
        "Spacer1"]}, Dynamic[WolframUTools`Private`xx$$],
       ImageSize->Automatic]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{
         Scaled[0.8]}}},
    GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0}}}],
   "Grid"],
  DynamicModuleValues:>{}]], "Text",
 CellTags->"answer",ExpressionUUID->"eb340e34-e685-4d3f-83f8-ecaa17c2d581"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Symbolic Expressions", "Section",
 CellID->150258009,ExpressionUUID->"2e1480e0-bc6a-4865-bca8-1c969b7b4830"],

Cell["\<\
Everything in Wolfram Language is a symbolic expression: numbers, strings, \
built-in functions, code that you write, even the notebook in which you write \
the code. \
\>", "Text",
 CellChangeTimes->{{3.7784995994895277`*^9, 3.778499680777913*^9}, 
   3.778499720266981*^9, 3.7785008348500566`*^9, {3.785568323652236*^9, 
   3.785568355133081*^9}, {3.785568686544176*^9, 3.78556869623485*^9}, {
   3.870953843813518*^9, 3.870953873486294*^9}, 3.892718318708355*^9},
 CellID->1679675790,ExpressionUUID->"87f3d081-22fe-4ca7-9bbc-e624beccfdc5"],

Cell["\<\
The fundamental structure of a symbolic expression is as follows:\
\>", "Text",
 CellChangeTimes->{{3.7784995994895277`*^9, 3.778499680777913*^9}, 
   3.778499720266981*^9, 3.7785008348500566`*^9, {3.785568323652236*^9, 
   3.785568355133081*^9}, {3.785568686544176*^9, 3.78556869623485*^9}, {
   3.870953843813518*^9, 3.8709538835976973`*^9}, {3.870953924699662*^9, 
   3.870953935659959*^9}, 3.8870313451792727`*^9, {3.89144404504274*^9, 
   3.891444052001789*^9}},ExpressionUUID->"474df3d2-97b6-48b4-997c-\
79ed0325aac8"],

Cell[BoxData[
 RowBox[{"Head", "[", 
  RowBox[{
   SubscriptBox["elem", "1"], ",", " ", 
   SubscriptBox["elem", "2"], ",", " ", 
   SubscriptBox["elem", "3"], ",", " ", "\[Ellipsis]"}], "]"}]], "Program",
 CellMargins->{{120, 60}, {8, 8}},
 CellChangeTimes->{{3.583566284954879*^9, 3.58356633742546*^9}, {
   3.734176414459256*^9, 3.734176445911234*^9}, 3.734178192123317*^9},
 TextAlignment->Center,
 FontSize->24,
 FontColor->GrayLevel[0],
 CellID->1645951534,ExpressionUUID->"37be7423-0bea-4d0d-b341-6b3f7e642137"],

Cell["\<\
The notion of expressions is a crucial unifying principle in the Wolfram \
System. It is the fact that every object in the Wolfram System has the same \
underlying structure that makes it possible for the Wolfram System to cover \
so many areas with a comparatively small number of basic operations. \
\>", "Text",
 CellChangeTimes->{3.82976456411744*^9, 
  3.8297651408534117`*^9},ExpressionUUID->"6041db04-88cd-4a30-9a31-\
41559240eda1"],

Cell["Here is a simple expression:", "Text",
 CellChangeTimes->{
  3.82976456411744*^9, {3.829765142467626*^9, 3.8297651795173187`*^9}, {
   3.829842465534088*^9, 
   3.829842466333796*^9}},ExpressionUUID->"631b827d-1b40-4683-aace-\
f75874ef18b2"],

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"x", ",", "y", ",", " ", "\[Ellipsis]"}], "]"}]], "Program",
 CellMargins->{{120, 60}, {8, 8}},
 CellChangeTimes->{{3.583566284954879*^9, 3.58356633742546*^9}, {
   3.734176414459256*^9, 3.734176445911234*^9}, 3.734178192123317*^9, 
   3.829778823764847*^9},
 TextAlignment->Center,
 FontSize->24,
 FontColor->GrayLevel[0],
 CellID->1074997770,ExpressionUUID->"e11f719f-fbb9-47a0-85e3-e3f975c73361"],

Cell[TextData[{
 "The meaning of ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"ccf2a394-0cbc-4a7c-9fc8-19c8d64d922e"],
 " can be interpreted as:"
}], "Text",
 CellChangeTimes->{{3.829765193916086*^9, 3.829765202586899*^9}, {
  3.834054851481927*^9, 
  3.834054865999189*^9}},ExpressionUUID->"72c695f6-0523-4110-9cb0-\
5243be42f1a7"],

Cell[TextData[{
 "a ",
 StyleBox["function",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 " with ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"e84f4013-b18f-49c7-ba9c-34ab7999cf63"],
 " and ",
 Cell[BoxData[
 "y"], "Input",ExpressionUUID->"74fca2e1-313f-4f83-96fb-bdc59ab002bc"],
 " as arguments or parameters: ",
 Cell[BoxData[
  RowBox[{"Sin", "[", "x", "]"}]], "Input",ExpressionUUID->
  "66991ab5-fd18-4346-b559-4bcd1d257d98"]
}], "Item",
 CellChangeTimes->{{3.8297652058578053`*^9, 3.829765260139427*^9}, {
  3.8299947134445057`*^9, 3.829994717698176*^9}, {3.834054969117807*^9, 
  3.834054977643054*^9}, {3.834055021373332*^9, 
  3.83405502266912*^9}},ExpressionUUID->"b81df762-bf3e-48e2-898c-\
d83214cd3469"],

Cell[TextData[{
 "a ",
 StyleBox["command",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 " with ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"a7ed947e-cf1a-43f5-81b7-64263956f5c8"],
 " and ",
 Cell[BoxData[
 "y"], "Input",ExpressionUUID->"71f6d012-1d8e-4722-815d-5816898369bd"],
 " as arguments or parameters: ",
 Cell[BoxData[
  RowBox[{"Print", "[", "\"\<hello world\>\"", "]"}]], "Input",ExpressionUUID->
  "d219a7fc-b694-47f0-af00-38fc40a0ddf2"]
}], "Item",
 CellChangeTimes->{{3.8297652058578053`*^9, 3.829765215613008*^9}, {
   3.829765291641925*^9, 3.829765312019063*^9}, 3.829994729570384*^9, {
   3.834055030740831*^9, 3.834055055349235*^9}, {3.891444279414482*^9, 
   3.891444280252893*^9}, {3.8914443195156403`*^9, 
   3.891444322325466*^9}},ExpressionUUID->"51f21b21-8d3e-4307-9f09-\
e5d2b979b860"],

Cell[TextData[{
 "an ",
 StyleBox["operator",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 " with ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"e80ae463-9c08-4d2f-a677-e7bbd7bb82f1"],
 " and ",
 Cell[BoxData[
 "y"], "Input",ExpressionUUID->"d8ffb022-108a-416f-9a1b-0ed88e8e9554"],
 " as operands: ",
 Cell[BoxData[
  RowBox[{"x", "+", "y"}]], "Input",ExpressionUUID->
  "44cf2d70-4f12-46d9-be29-2db3c278fca6"],
 " or ",
 Cell[BoxData[
  RowBox[{"Plus", "[", 
   RowBox[{"x", ",", "y"}], "]"}]], "Input",ExpressionUUID->
  "b69a143a-7e7a-42bb-a646-785956e0a2a8"]
}], "Item",
 CellChangeTimes->{{3.8297652058578053`*^9, 3.829765219702249*^9}, {
   3.829765317367201*^9, 3.829765330954919*^9}, 3.829994732650659*^9, {
   3.834055059701351*^9, 
   3.8340550777417393`*^9}},ExpressionUUID->"adf0dcf1-451c-4b85-8c31-\
08c0c98785f4"],

Cell[TextData[{
 "a ",
 StyleBox["type of object",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" ",
  FontWeight->"Bold"],
 "with ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"b868fdde-0a0d-4257-8154-73fc52e45fd4"],
 " and ",
 Cell[BoxData[
 "y"], "Input",ExpressionUUID->"916de68d-7cd2-4187-acc9-22b267bea08b"],
 " as its contents: ",
 Cell[BoxData[
  RowBox[{"RGBColor", "[", 
   RowBox[{"1", ",", "0", ",", "0"}], "]"}]], "Input",ExpressionUUID->
  "2142020c-ed34-44c2-b57f-8bafd99fae8a"]
}], "Item",
 CellChangeTimes->{{3.8297652058578053`*^9, 3.82976522918114*^9}, {
   3.8297653590808077`*^9, 3.829765382450564*^9}, 3.82999473816226*^9, {
   3.834055084045973*^9, 
   3.8340550978542023`*^9}},ExpressionUUID->"3d275bc9-cd82-469e-a68f-\
c47c1f36960b"],

Cell[TextData[{
 "a ",
 StyleBox["head",
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 " with ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"2265f153-9370-4b38-a7f8-01d772c156e2"],
 " and ",
 Cell[BoxData[
 "y"], "Input",ExpressionUUID->"799b345c-eb5d-4f82-942c-fd53c37f07ef"],
 " as elements: ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"x", ",", "y", ",", "z"}], "}"}]], "Input",ExpressionUUID->
  "46148c5b-bcca-4261-91de-6178bc9fc08a"],
 " or ",
 Cell[BoxData[
  RowBox[{"List", "[", 
   RowBox[{"x", ",", "y", ",", "z"}], "]"}]], "Input",ExpressionUUID->
  "b779dc49-d7e5-4efc-abae-93d28a9b57af"]
}], "Item",
 CellChangeTimes->{{3.8297652058578053`*^9, 3.8297652254667473`*^9}, {
   3.829765333895685*^9, 3.829765355000691*^9}, 3.829994735529207*^9, {
   3.834055102062126*^9, 3.834055130966775*^9}, {3.8916120947571793`*^9, 
   3.891612095152232*^9}},ExpressionUUID->"08962480-12ba-43c3-8ed6-\
47cfcb38e832"],

Cell["\<\
Wolfram Language does not have types as such. The \[OpenCurlyDoubleQuote]head\
\[CloseCurlyDoubleQuote] of an expression can be used as a kind of \
generalized type designator. Its purpose is to serve as a \
\[OpenCurlyDoubleQuote]tag\[CloseCurlyDoubleQuote] to specify the \
\[OpenCurlyDoubleQuote]type\[CloseCurlyDoubleQuote] of the structure.\
\>", "Text",
 CellChangeTimes->{
  3.8916121086970787`*^9, {3.891613195696048*^9, 3.8916132004113092`*^9}, {
   3.892717420348652*^9, 3.892717432836385*^9}, 
   3.892718321693012*^9},ExpressionUUID->"999befd4-5d7f-4d2f-a8da-\
bbc4cb7ad408"],

Cell[CellGroupData[{

Cell["Some expressions look a little different", "Subsection",
 CellID->89546494,ExpressionUUID->"89cd0357-ba71-4c4a-90d8-750a997e6683"],

Cell["\<\
Sometimes you will run into expressions that look nothing like the template \
shown:\
\>", "Text",
 CellChangeTimes->{{3.734970399570342*^9, 3.734970460387629*^9}, {
   3.743426896023436*^9, 3.74342689826668*^9}, {3.743441239748214*^9, 
   3.743441244714336*^9}, {3.772890690821752*^9, 3.772890691597308*^9}, {
   3.778500731990172*^9, 3.778500742612589*^9}, {3.782752840581362*^9, 
   3.782752848629487*^9}, {3.782755659249701*^9, 3.782755661480153*^9}, {
   3.7855686257939587`*^9, 3.7855686672560797`*^9}, {3.790445092544578*^9, 
   3.790445096857074*^9}, {3.790612842538653*^9, 3.790612852698584*^9}, 
   3.830541893101427*^9, {3.871129280926203*^9, 3.871129296529583*^9}, {
   3.891444387649127*^9, 3.891444393625843*^9}},
 CellID->1769371758,ExpressionUUID->"1c20e680-354b-4e8f-a71f-bcc67f365e7b"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1:eJwtlnk0Vd/7xw2RKdx7DZnuvSg00Vwkz5NmaaCoJJVKypj4RGlQIiQSGSrK
kCHRoEQ45iGlKFMkmad7j8zX+DvftX7/nL1ea+199t7v5/1+zlG1djI9K8DH
x7eOevxvfHrdWnjVmQCDc/8/Fv9gGx9mnwfjb0szD1HjXGnebTbbA6TWL1sp
R41P8wNZQmw/kG2qrW5i+YH9ZjeHcVYk1GLERlNq/DFlGzrISobk3sM1x1SS
YX5TmyaHlQVh7asWPpbNguefYy72syrg2JPwa2/HyiEt3a/JXvsXeFZWlIu5
NcI5qI4ccGmHR5dhCf+ONuCLHctuCmiHmsZzsZcs2iBinnLz5/h2MJsbGfvl
2AblFTbM5Lp2kNiSyXc3vA20Dk3HntXrgO5rrzZb9LRBj61magt/J4gejE35
6dsOF0Ku5X0P7gIrkS06X3M7wLFzSXtGWi8MWtK2bxPshlarRpGCil5AkfSD
8+W64WDDXe2vHb1gWEPryNLqho2V3R6din3Qp1F8iLO3GwTfJEjL+fZBUFiB
wL3wbojwVDW4fKIfBtMjWE81e6CAoRCpK80Bh7NDB97r9cLawPK87cs4YFPQ
8Gz/nl54IezeYbKDA8HaL1vqj/XCPV6dzgVPDlTVtI288ewF8z+hpVE9HMgR
UNwWkNsLfSnSI1P5XHAudrcs39QHYqremn82DoLIJ4945tJ+KNd/oHN9+yBY
zkupdtjQDz5HojeomA6C14+zUqnb+kEg+OPOY3aD4HEg9PGoVT9Mzg6cq386
CMsNXtJzQvqhv9ks6ZvAPygcib4mNd4PXyI0l+R/+Qeu4Xb+UW8HwD9j7aoT
jf9gX6HE85zcAdj1fYvubOc/aD1+rPZL+QAUz7fcrT/3D+7k3Lqa2TIAOf8F
n/+4agiWTY7PZYhy4NUhXvLrR0NgsX4Dc48lB+5LVy59fnIYBFs/JWYOcyBr
g8r7fY7DIC+xuWzvDAc6rJxg+uowGOxYMf1VmAubXjEOHQ4fhnLlBP97Clzo
2W15bUHVMGya9LzKb8CFrbc53zw2jUCWhBC3+BYXHFPAQnP3CKyrubGD58+F
qOoHHT/NR8D07F9j+YdcGGSt5+m4jMCqb2l7pOO4EJ1zXa0raQSOCp9wGi3g
wsSolJup3Cjcj93u6jvFBXUV67k59VGIbdeaf0iAhH3bMvxerRoFzeCsQVFR
EhJCjkSL7B0FvWGzjFVyJJjqPC/Luz0K6fvA3VmHhOvmwyb2D0bB5FaLnu86
EpKvbW9WiBmFEzb52r6bSOD70jvomj0Kv0R/RBjuJOGV7WrFZf9GIU3Cf+7F
cRIagrzjG2ZHYciDXSt8moR5mXXaPhJjoOqXlb3flgQLoatb/2qOQa//gxdP
XEgQiS2yD7cag0u8ugg1HxLWVMiOb7MfAydJcZ/P/iRYDZ7zGvIYA5v/Vtsc
CyLhvYHEo71hY9ADjKENESRYNx0iBL+MQfni2pamJBLEHv91uNg4Boemc1o/
ppLw1sJR+U/XGCjwTYTceE2C4C9fj2z+cTAJ+TFTkUlCfEP2mosbxmFf450X
piUkGEfsbGvZNg4GirPtnuUkjBz+GWxsOg6eeXp5wZUkbK/ncDQdxuGb5ll0
qyahq5ad1BI7DiKzrwxXNZNwP+yVufHrcbC5IbYiqYWE9WZ6Qtm541BRGRgv
8pcE358HrcMaxuHZWpu1Pp0krAxtlRbsGoeXoQ92x3VT+h10IJyHx2HR7uDO
5F4StH74KBtLToD6AevUSxwSvocwKrOUJiDZz//nepIEd9NnHppLJuBGt871
9kES2PQVWmHrJ6D/8qIkjyESKqqz6gS2TQCqGZnwhklwebDjjrPJBCQmhrhb
j5KgaPJjTYvVBPyOm1N+P0bChe8DwVkeE5D18UmjHI8EerAHaPpOwM+DrMHF
kyRk7xfmhoZOQL2d3U3mFKW/1MMnArETINxf7cc3TYL4N9Ye5/QJKIp8J/6F
4oz7qbzfORMgyPIS8pohwXKfbtKezxOQxvfpP9Ys5Q/JUvOs+gmYivtnlUhx
6ldTIc3OCSD2luQunCPhUOCfd6FDE/BGrSvkEsXTxvbWAnw8iNGUacmkOF6C
J+28gAfRW1gxnRTv/XKH+K3Ig+Xru2unKR4LoDvu0eLB9pfHbs1QHL0nRjlr
HQ+cND3juyneIb68UmMrDz7Rjuh/opj7+aNH6AGK30gauVP8yH+7loAVD2x1
vn1lUmxgVFPnZMcD4YcNZWnUebtET9z57c6D0WKPjVoUB1X0r9njw4PLgTR2
AHXfjX7ubR8f8sA1VPJGPaVH6y6hBxrPebD4FGm2gOK7IiEQmsaDvKOGCcsp
PVeWM7n8OTwQLUpwWEfp3eD78olTBQ8mibJ0TaoeN3du3PO7jgcrTGzsBSco
f8wv4Rl18ODcof3x5VT9vpeaJH38xwMB75NHLlP1dfdpMdeY44Hpf75+UiOU
P3bYCYVKTML0k4KNDyh/XCzxtnbSnIQDIRmyJpSfmB07hMfWTALtwYV1aZTf
KgVEUzxxErZHPyoa7ydhMQb+8zs6CclEkM6BHhJqrPaHSdtMguKmKKkTXSTc
uEbTDXeZBOWQMGuLDhIas8NuxgdMwjq34zZyrST4NB5etCxiEhK2lSnU/6by
PqFQ/iZ+Ej65Wm73biIhcF20FJE7CbPaZWLxdSRsef0iupGchLlbTh48Kn/c
KlvDk9OTsHLmzUJmBQmPOUu7ukSmIHndD32dUhJGl6avGFGdgvJQrqJ8PtW/
EjJzJA9NQRWj6vTMWxLMiz1Ohp2cgkf941Y+6VQ/aN80T9lhCvwn0rlTL0k4
zs7fs8SHel+x98/UeBJoj8t/bf04BWZhF3mLw0jIy/K//rl4CmSXXWhgPCDB
rsFYzaR6CoaYUVbceySUyFaft+qbglz9ugvnvUnwCG6ccFeehuSz1V8uU/3u
750+ubSb02B4faX2hBHVL+JTs9cGToPPi0uVb7aTsKnI0epT5DT0vlY1OIIk
hPENJ5S/nQartO7XdlQ/3n11am17xzRkin1d+opJwhtniYMLd88ATXw44CmH
C1+iGB6vzGdA7qFMTGQXF7qKFWMMz8zApd7zDjf+cEFRYUm//Y0ZSNbRPSBS
zQXvgu23C97PQPt/Lwuk3nHBnH7j3QW1WYiRMFGbdKG+4/o+jXM6s6Dn2Hgx
9AIX/G0C50I3z0J1wWjtQmsuENmP9xBHZsGC6zDy5wAXtE5/bGcEzcLOaltd
2xVcmHz3j5E7NQuDe1yDbNo4INMyoWsqOgfTI2u1Eho4oC3Cd7Jbbg7UEjIM
qqo4cNpSMpW2eg5Cnh/nb83mwJd5y7bZ2M6B4c30RIEQDkSbnXGVqp2DiNzn
M0b6HHh+1a5v5WE+vIkOiiyvAViZLzrhe5wPuX/uxQW5DUD+vCShP6f5cO3p
ZmPu+QFoDexgBzrzYa3GPpX/TAeA+ez44V4/PtQoLvZ+rTYAUcX7i5/n8GHd
UIlEPdEPIQvWRtPV+FH5VYSuGqcPbsVMm4wM8GPkzxTmfdleOLDy48Vlw/yY
XHy1RE64F5gFlx5Y8/jxw58Ik+CxHshu6/v+XUgA6SH6YF7fA0OLG/e/Ygpg
UX25u3ZED1invt9rc0AAF+i4lS2U74EtWY67G94JoGSc/kcFsW7g+9GKOVcE
cWw4aZl0WQdouNq4H1oqhNkt6QmbXFugYzTcXDxXGNdbPiqNaakBo84L10Iu
imDP5/NObOEPsK8jeBmTKYYc8ySlGSeC6Cuyvln+Shzfl7o3/xD+SWjT6lS2
nliAgtX6W8uWtxJdgV23ws4uwP2LvXseGrYST8XGu7vtFuCQvq2N+ZFWQmLe
wrf33BegTuHb9zm3W4m+saM76h4swNQt9poLfrUSCc2/Hc8XL8CFB5LC3nj/
JZSTOomgJZK4k7xOvqxuI8Rg9FTzsCQqlmRej9jZSbhv0RL5MCmJl7+8DJxv
2Ul0bT2WFsQvhYOZzsM2zp1E4a6CSUMpKfz476PvWEQnccU08GHyUikUzG1e
c7i3k+g/u7jkv1NSmNz3ooTm20V8uWemRfsmhaXa3U/mf+gm9ILuVvXVSmGw
MV45W95NJD345FrcLIUpG4K63/zqJrwfqRZc7pNCjQ/O+nJz3QTz+9hyUkAa
nSwLLcR39hB1jYUlZkxpfHRbb/Dxjx5iJ8diXM1MGp8MC56faeklomVu/7hx
RBoVP5+8WMHtJUY2vUxvPiaNS5Z9Xnx7tpd45j917pG1NBp3WtgQKn3EpOaT
BlFnaRy4eJlucayPSLX+nTXoL43bmj49l/zRR0g3nPDMy5fGjOx96csy+gmb
Od8jSsXSWPXs6uuIgn4iR+P1WvcyaUw+9pkxVNVPnHfj46yqksbZbcym8739
RCH9+fGEJmkU7vp7zl5lgHDd22Zwb0waP+ys83rvNUA0FJ7ht1hOw1hNoxbF
TRxicMsvxWs6NBRwNNLftZ1DzC/Yv/bZahoudMTI0/s5xHpC71zXRhrO/NLb
cOY0hwj9JP3VZTsNv48wjtzz5xD7M3IiAqxo+Ldny7hLLYewWbP6bdopGvZP
TLpca+EQ198mVlafoWHPaocgt24Okfo6ZFbejoZH11wO1eZxCLFXtmfiL9NQ
SMllQ5ESlyhNkFmZG0xDT/O6XS7HuUTLIv/drQ9p+Oz2sOmhs1xiNG7OWjCc
mp/YmKLuwCUWxfaF7X5KQz/d2pX+nlziVnT+VG0yDdve/Kb9F8UlDMLty7iF
NOSyC1eW1HAJc7m2VlopDQuO6A96NHIJh7DDk2sraGj5WvKDUiuXePLQcMXV
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
j2MTfVzoeN0QbG/NRJVGJdfF/7igbpvPH3CWiQHXssbdx7kQWxfUXmbHRO/T
Eje7BUmIeaeduMWdiUFfVy5vUyIhysFee90DJlpbqFcb7SLh16JDMQdDmdhv
7eFyay8JCs2bpF3Cmbg+/4t4oikJEUbiQ2lPmbh3w6hCpiUJYZop77VSmNgt
HbV/yImEny0PNHa+YmJaad2xB64kyDzyCD/7molRn0x2qXiQEDJvt0fsByam
eMx9mPIiIfhvt75yERMlc948qwkh4XvEt1d6pUx09BU+0/CIBKkDmcyjFUws
DSkc+hxFwv08H75H35iof6fN9r9YEu49Xlws1czE60yny12vSfhiumCd9h8m
1lw9amaaQYK42GiCcRsTtx0jBlIySfB3L/b162Gi2rouUMsjwdfs9B7BUSY+
Xxm4ZclnEmL3N1uenWCiIlk2sP4rCTm7zRzLppjY9uR0w4rvJAxt3vkgQICF
5oGmtvW1JEhszI/lCLFwbXeEiH8DCZqrdTP2i7LwzSmNv4ubSLDUWFbPkGah
t/LrNQqtJFxmx/e4MVjo/F01xbmN0kNRZbJejoVp90tM3nSQUCYppfJEhYV/
bmzR5vaQ0CZyV3uWzULTl7STfX0kTAvw48lFLNz8UzD32wAJq8eHrBctY6Fk
+r8hs0ES9v6zc/XRZqEEv23F2D8SbPs77vSsYuHtkNGSm8Mk3Oo8Hm60joU7
gm52D4+Q8PRPXVLqRhYGe84tPzBGwsfG/dmS+izM0PUICxsnoeZHeaUzsLCZ
T4hdPEEC5+uW3zWGLHxx7nNlE48EkfJs7todLCw6wR/RPEmCeuEavvDdLPTd
MHS7dIoEg5xUGs+YheejRu9HTpNw5MNi9WMHWHjtgetHsxkSLr2OXpt7kIVt
t3vmJim+nyK/g3WYhcobms74zZKQFB982MuChU7furr45kgoihY9336chYu/
v79ziuKWiFtXtp9iYaWS4JaXFPNCpgISz7Dw9EjkwhaKZQJdn4rasjBgykxi
kmJtX06anR0LQ1arK89RvNvLJv+rIwuDJmf+978NZ67+qdZxYaGFzHBQMcXX
3Y60P3Cj1j9jjXhTHOlUPTLszkIr1htXbYozzhsJm3uyMNK5k1ZAnffb6SL5
jzdYaPlD7Is+xX3H9Zco3mZhb+eNuOfU/eYdea/n6UOdL+FdBEnpwTLVNm7x
Y6GHw+JUDYr1jBOPYyALGRNnWnZQ+h3awXaKDWZhpyV95QFKXyeMvDkvlIXT
0i3PDSn9/fXoITbhLNzZdXctk6pPwtqAuPIoFgqKd/S0UfXM1573fmk0C3VE
q4ngURJG1cbqufEsTLy5sTFxiARpFafeA0kszK4pU6FRflkq3zP59iUL96bR
/U6TJJwU/6Vy+S0LvW59bCjqJ+GK0EGdxvcsfCfzkqjupfI/V4mbsliYdOpu
TXk3CZ+Hc0/PESy8Idzl5dJOwrrm58m+X1no6Da8JqOR2k/bdiL9O5WXTktC
t56EgRvaOxt+sNAz8cullz9JiFf/1KH1i4XVBkutDn6j6mf3k/W5i5q/54bt
+yISBnOiHId6Wdh4wMbuST6Vd8lTuYocFv4avpDglEuC91uOhd0wC7+wi0p/
fSBh0lNwjzAfG7v2KPGKkkjoSbBxieJnY7myECmRQEJdVUWktiAbtUo2rjB8
TsJbdnCPuTAbrU/NBFyMJOFCsbJPogQbz/gsWdhxl4RG8fUFuxTYmKr7Jkfx
DAmlayN7mhXZKNIV4rDkBOWH49NSF5XZaHXdKGSRBdXf0gutIllsbB+r2Nq6
n4RdB/dP9y5mo2ljxHMHPSpvUbYbAlaz0SaoYFu7OAkviiqtWGvZ2Ln6V3G2
EAmhA9o+79ax8db2W4PX57jgbDD6s2kjG/dpyVl8HeKCVpuXy3Kg1p+Y13Wr
gQsRSx6/+rqHjW50ms+hZ1wYGd6RcHsvG1clGayyoL4n+/OGnujuZ+O7PAuP
3cFcED5odC/BlI3nR0QnOm5wwc2Td+HaUTZGPL17RNqKC6bfDmutOMfG8flP
FhvIcSEtUpDdbsvGN4H3fFsluCB6Jl0+8gIbr4pcGbAX5EL+hPB8IUc2El+F
mrYOckBH7UNnsysbJQbdpfvLOSDhJhN37xYbF08LGCz+jwO2kB9l6M1GtYLU
lXZ2HCgStQ+ZuMPG5q+Xnzw+yYEr0UVeZ/zYmPl98dwnIw70lrmc1A9mo63P
5popFQ6UKlarDDxlo2K0D+d6/gDcyA+M2JPFRnb6c7nvo/3Q9zs/lJfNxqVi
nUszevrBfGo4ODGHqu8i2WDvpn5Yvt7CTzCfuo+/p0tffj80vNS48qmUjUIW
62Iq/fthdThxbNlPNk7+/ik4oNgPXQ7/mOIkG3vcRpj9y/tgr5JZwudFquhx
T2kFKPZARId2/jENVQzPX26aLdoDHa9EmgY0VXEy0PeDBq8bPDFHWmqZKsYm
/zz7o74bUs+qex5cpYoS6q3XroV2g9jrf6bNm1XRnvUsWUW8G8q23efjmqsi
a4m5XQOnE7Y4lh2j+ami2PpHyxMD2iFG2XrRl1FV9Bu7UrTlbhMsKkp8tO+Y
Gqa++WEwpfsNglcULq3JU0Od2A/+BokpYDM8r7piqTqemZp/69rmYsL6zRDb
L0gd1ThpnMiddYT9rYPTRg/UUf6ygtEuzzrC7WBGvcRDdZSzLzDqfF1H3B11
ux/8SB3NXp141KdQT6Tp8qbCn6qjwPaBHpX+eoJXMFf34qU6PlUV1Zvn30gE
10gEFpep4+7ZF/4fPzYTUXEOtj4V6ih0ePgHp6+ZiHOt2rqrUh2ZMXs/S6j8
Jj7IBU9WVqnjD1V39flev4lmC4btj1p11KfdO9C7s4XQbFfY2taujsuPOMsb
Vv8hVmZcYcZ3UvsfjVPk428l9O408c52q2PcnZwqU4VWwljz6evePnXk+2zT
VLO7lXCxYzP//VPH4a6NVzeltBKe+l68t8PqSIskE9cVthJ3FrT9dB2l9CBS
O9R+tRIR6XEBExPq+Hmh9bY60b9E7M1557In1ZG3z9fwiepf4qXJWUPPaXXM
VFww30z3L5GhVqpiMEutPxd3g8/kL5E3rMGbm1On/jfnRUXb/iX+D01y2q0=

       "]]},
     Annotation[#, "Charting`Private`Tag$54147#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{216.671875, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10}, {-0.9999993680039507, 0.9999995755730018}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Input",ExpressionUUID->"a39a8049-e7f9-\
4cae-be23-f14069b1814a"],

Cell[BoxData[
 TemplateBox[{"\"Finland\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"Country\"", ",", "\"Finland\""}], "]"}], 
   "\"Entity[\\\"Country\\\", \\\"Finland\\\"]\"", "\"country\""},
  "Entity"]], "Input",ExpressionUUID->"766aa4e3-d3d6-4360-8d92-f8d40eecfc3a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Input",ExpressionUUID->\
"e2cf963a-774f-4d6c-a5d6-8357dbf6e0cd"],

Cell[BoxData[
 RowBox[{"a", "+", "b"}]], "Input",ExpressionUUID->"d9db57ef-3467-4298-90ef-6a6bd656b82e"],

Cell[TextData[{
 "However, you can reveal their true underlying structure with the ",
 ButtonBox["FullForm",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/FullForm.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/FullForm.html"],
 " function:"
}], "Text",
 CellChangeTimes->{{3.734970399570342*^9, 3.734970460387629*^9}, {
   3.743426896023436*^9, 3.74342689826668*^9}, {3.743441239748214*^9, 
   3.743441244714336*^9}, {3.772890690821752*^9, 3.772890691597308*^9}, {
   3.778500731990172*^9, 3.778500742612589*^9}, {3.782752840581362*^9, 
   3.782752848629487*^9}, {3.782755659249701*^9, 3.782755661480153*^9}, {
   3.7855686257939587`*^9, 3.7855686672560797`*^9}, {3.790445092544578*^9, 
   3.790445096857074*^9}, {3.790612842538653*^9, 3.790612852698584*^9}, 
   3.8927174705119963`*^9},ExpressionUUID->"3316f3c3-11f4-4ffa-a0fa-\
0ef5b8e04ce0"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"a", "+", "b"}], "]"}]], "Input",
 CellLabel->"In[800]:=",
 CellID->967023933,ExpressionUUID->"e7d5ad4a-6d3e-479e-ad0d-47d452bcbbc3"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3"}], "}"}], " ", "]"}]], "Input",
 CellLabel->"In[801]:=",
 CellID->490325034,ExpressionUUID->"c2062be8-6862-41fe-b2ab-9d8f38fe3f85"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  TemplateBox[{"\"Finland\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"Country\"", ",", "\"Finland\""}], "]"}], 
    "\"Entity[\\\"Country\\\", \\\"Finland\\\"]\"", "\"country\""},
   "Entity"], "]"}]], "Input",
 CellLabel->
  "In[802]:=",ExpressionUUID->"b24f5eae-b79d-4858-962e-b9be6bbc9f81"],

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  GraphicsBox[{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
UX25u3ZED1invt9rc0AAF+i4lS2U74EtWY67G94JoGSc/kcFsW7g+9GKOVcE
cWw4aZl0WQdouNq4H1oqhNkt6QmbXFugYzTcXDxXGNdbPiqNaakBo84L10Iu
imDP5/NObOEPsK8jeBmTKYYc8ySlGSeC6Cuyvln+Shzfl7o3/xD+SWjT6lS2
nliAgtX6W8uWtxJdgV23ws4uwP2LvXseGrYST8XGu7vtFuCQvq2N+ZFWQmLe
wrf33BegTuHb9zm3W4m+saM76h4swNQt9poLfrUSCc2/Hc8XL8CFB5LC3nj/
JZSTOomgJZK4k7xOvqxuI8Rg9FTzsCQqlmRej9jZSbhv0RL5MCmJl7+8DJxv
2Ul0bT2WFsQvhYOZzsM2zp1E4a6CSUMpKfz476PvWEQnccU08GHyUikUzG1e
c7i3k+g/u7jkv1NSmNz3ooTm20V8uWemRfsmhaXa3U/mf+gm9ILuVvXVSmGw
MV45W95NJD345FrcLIUpG4K63/zqJrwfqRZc7pNCjQ/O+nJz3QTz+9hyUkAa
nSwLLcR39hB1jYUlZkxpfHRbb/Dxjx5iJ8diXM1MGp8MC56faeklomVu/7hx
RBoVP5+8WMHtJUY2vUxvPiaNS5Z9Xnx7tpd45j917pG1NBp3WtgQKn3EpOaT
BlFnaRy4eJlucayPSLX+nTXoL43bmj49l/zRR0g3nPDMy5fGjOx96csy+gmb
Od8jSsXSWPXs6uuIgn4iR+P1WvcyaUw+9pkxVNVPnHfj46yqksbZbcym8739
RCH9+fGEJmkU7vp7zl5lgHDd22Zwb0waP+ys83rvNUA0FJ7ht1hOw1hNoxbF
TRxicMsvxWs6NBRwNNLftZ1DzC/Yv/bZahoudMTI0/s5xHpC71zXRhrO/NLb
cOY0hwj9JP3VZTsNv48wjtzz5xD7M3IiAqxo+Ldny7hLLYewWbP6bdopGvZP
TLpca+EQ198mVlafoWHPaocgt24Okfo6ZFbejoZH11wO1eZxCLFXtmfiL9NQ
SMllQ5ESlyhNkFmZG0xDT/O6XS7HuUTLIv/drQ9p+Oz2sOmhs1xiNG7OWjCc
mp/YmKLuwCUWxfaF7X5KQz/d2pX+nlziVnT+VG0yDdve/Kb9F8UlDMLty7iF
NOSyC1eW1HAJc7m2VlopDQuO6A96NHIJh7DDk2sraGj5WvKDUiuXePLQcMXV
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
j2MTfVzoeN0QbG/NRJVGJdfF/7igbpvPH3CWiQHXssbdx7kQWxfUXmbHRO/T
Eje7BUmIeaeduMWdiUFfVy5vUyIhysFee90DJlpbqFcb7SLh16JDMQdDmdhv
7eFyay8JCs2bpF3Cmbg+/4t4oikJEUbiQ2lPmbh3w6hCpiUJYZop77VSmNgt
HbV/yImEny0PNHa+YmJaad2xB64kyDzyCD/7molRn0x2qXiQEDJvt0fsByam
eMx9mPIiIfhvt75yERMlc948qwkh4XvEt1d6pUx09BU+0/CIBKkDmcyjFUws
DSkc+hxFwv08H75H35iof6fN9r9YEu49Xlws1czE60yny12vSfhiumCd9h8m
1lw9amaaQYK42GiCcRsTtx0jBlIySfB3L/b162Gi2rouUMsjwdfs9B7BUSY+
Xxm4ZclnEmL3N1uenWCiIlk2sP4rCTm7zRzLppjY9uR0w4rvJAxt3vkgQICF
5oGmtvW1JEhszI/lCLFwbXeEiH8DCZqrdTP2i7LwzSmNv4ubSLDUWFbPkGah
t/LrNQqtJFxmx/e4MVjo/F01xbmN0kNRZbJejoVp90tM3nSQUCYppfJEhYV/
bmzR5vaQ0CZyV3uWzULTl7STfX0kTAvw48lFLNz8UzD32wAJq8eHrBctY6Fk
+r8hs0ES9v6zc/XRZqEEv23F2D8SbPs77vSsYuHtkNGSm8Mk3Oo8Hm60joU7
gm52D4+Q8PRPXVLqRhYGe84tPzBGwsfG/dmS+izM0PUICxsnoeZHeaUzsLCZ
T4hdPEEC5+uW3zWGLHxx7nNlE48EkfJs7todLCw6wR/RPEmCeuEavvDdLPTd
MHS7dIoEg5xUGs+YheejRu9HTpNw5MNi9WMHWHjtgetHsxkSLr2OXpt7kIVt
t3vmJim+nyK/g3WYhcobms74zZKQFB982MuChU7furr45kgoihY9336chYu/
v79ziuKWiFtXtp9iYaWS4JaXFPNCpgISz7Dw9EjkwhaKZQJdn4rasjBgykxi
kmJtX06anR0LQ1arK89RvNvLJv+rIwuDJmf+978NZ67+qdZxYaGFzHBQMcXX
3Y60P3Cj1j9jjXhTHOlUPTLszkIr1htXbYozzhsJm3uyMNK5k1ZAnffb6SL5
jzdYaPlD7Is+xX3H9Zco3mZhb+eNuOfU/eYdea/n6UOdL+FdBEnpwTLVNm7x
Y6GHw+JUDYr1jBOPYyALGRNnWnZQ+h3awXaKDWZhpyV95QFKXyeMvDkvlIXT
0i3PDSn9/fXoITbhLNzZdXctk6pPwtqAuPIoFgqKd/S0UfXM1573fmk0C3VE
q4ngURJG1cbqufEsTLy5sTFxiARpFafeA0kszK4pU6FRflkq3zP59iUL96bR
/U6TJJwU/6Vy+S0LvW59bCjqJ+GK0EGdxvcsfCfzkqjupfI/V4mbsliYdOpu
TXk3CZ+Hc0/PESy8Idzl5dJOwrrm58m+X1no6Da8JqOR2k/bdiL9O5WXTktC
t56EgRvaOxt+sNAz8cullz9JiFf/1KH1i4XVBkutDn6j6mf3k/W5i5q/54bt
+yISBnOiHId6Wdh4wMbuST6Vd8lTuYocFv4avpDglEuC91uOhd0wC7+wi0p/
fSBh0lNwjzAfG7v2KPGKkkjoSbBxieJnY7myECmRQEJdVUWktiAbtUo2rjB8
TsJbdnCPuTAbrU/NBFyMJOFCsbJPogQbz/gsWdhxl4RG8fUFuxTYmKr7Jkfx
DAmlayN7mhXZKNIV4rDkBOWH49NSF5XZaHXdKGSRBdXf0gutIllsbB+r2Nq6
n4RdB/dP9y5mo2ljxHMHPSpvUbYbAlaz0SaoYFu7OAkviiqtWGvZ2Ln6V3G2
EAmhA9o+79ax8db2W4PX57jgbDD6s2kjG/dpyVl8HeKCVpuXy3Kg1p+Y13Wr
gQsRSx6/+rqHjW50ms+hZ1wYGd6RcHsvG1clGayyoL4n+/OGnujuZ+O7PAuP
3cFcED5odC/BlI3nR0QnOm5wwc2Td+HaUTZGPL17RNqKC6bfDmutOMfG8flP
FhvIcSEtUpDdbsvGN4H3fFsluCB6Jl0+8gIbr4pcGbAX5EL+hPB8IUc2El+F
mrYOckBH7UNnsysbJQbdpfvLOSDhJhN37xYbF08LGCz+jwO2kB9l6M1GtYLU
lXZ2HCgStQ+ZuMPG5q+Xnzw+yYEr0UVeZ/zYmPl98dwnIw70lrmc1A9mo63P
5popFQ6UKlarDDxlo2K0D+d6/gDcyA+M2JPFRnb6c7nvo/3Q9zs/lJfNxqVi
nUszevrBfGo4ODGHqu8i2WDvpn5Yvt7CTzCfuo+/p0tffj80vNS48qmUjUIW
62Iq/fthdThxbNlPNk7+/ik4oNgPXQ7/mOIkG3vcRpj9y/tgr5JZwudFquhx
T2kFKPZARId2/jENVQzPX26aLdoDHa9EmgY0VXEy0PeDBq8bPDFHWmqZKsYm
/zz7o74bUs+qex5cpYoS6q3XroV2g9jrf6bNm1XRnvUsWUW8G8q23efjmqsi
a4m5XQOnE7Y4lh2j+ami2PpHyxMD2iFG2XrRl1FV9Bu7UrTlbhMsKkp8tO+Y
Gqa++WEwpfsNglcULq3JU0Od2A/+BokpYDM8r7piqTqemZp/69rmYsL6zRDb
L0gd1ThpnMiddYT9rYPTRg/UUf6ygtEuzzrC7WBGvcRDdZSzLzDqfF1H3B11
ux/8SB3NXp141KdQT6Tp8qbCn6qjwPaBHpX+eoJXMFf34qU6PlUV1Zvn30gE
10gEFpep4+7ZF/4fPzYTUXEOtj4V6ih0ePgHp6+ZiHOt2rqrUh2ZMXs/S6j8
Jj7IBU9WVqnjD1V39flev4lmC4btj1p11KfdO9C7s4XQbFfY2taujsuPOMsb
Vv8hVmZcYcZ3UvsfjVPk428l9O408c52q2PcnZwqU4VWwljz6evePnXk+2zT
VLO7lXCxYzP//VPH4a6NVzeltBKe+l68t8PqSIskE9cVthJ3FrT9dB2l9CBS
O9R+tRIR6XEBExPq+Hmh9bY60b9E7M1557In1ZG3z9fwiepf4qXJWUPPaXXM
VFww30z3L5GhVqpiMEutPxd3g8/kL5E3rMGbm1On/jfnRUXb/iX+D01y2q0=

        "]]},
      Annotation[#, "Charting`Private`Tag$54147#1"]& ]}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{0, 10}, {-0.9999993680039507, 0.9999995755730018}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], "]"}]], "Input",
 CellLabel->"In[803]:=",
 CellID->952586776,ExpressionUUID->"510d01b6-55ac-4d75-8f17-81308d1c4ef9"]
}, Closed]],

Cell[CellGroupData[{

Cell["Special ways to input expressions", "Subsection",ExpressionUUID->"469f74f5-1f64-4b05-ad03-e82644e9a553"],

Cell["\<\
Sometimes expressions are written using postfix and prefix notations.\
\>", "Text",
 CellChangeTimes->{{3.891434443649392*^9, 3.89143446388818*^9}, {
  3.891613338511571*^9, 
  3.891613343799008*^9}},ExpressionUUID->"4954c7d6-3099-4f4e-a1c9-\
82f6db347ced"],

Cell["Standard notation:", "CodeText",
 CellChangeTimes->{{3.89143446651252*^9, 3.8914344680327587`*^9}, {
  3.891434607520131*^9, 
  3.891434614068314*^9}},ExpressionUUID->"ba9ee1f3-dc98-445b-8e37-\
4782d2ce7f0a"],

Cell[BoxData[
 RowBox[{"f", "[", "x", "]"}]], "Input",ExpressionUUID->"74c6a082-388e-4dd9-85db-82f19737c92b"],

Cell["Prefix notation:", "CodeText",
 CellChangeTimes->{{3.8914346280322647`*^9, 3.8914346333386087`*^9}, {
  3.8916120006767817`*^9, 
  3.891612001165073*^9}},ExpressionUUID->"4c142bb4-7efe-4d2e-ac8e-\
05a13f23b5b1"],

Cell[BoxData[
 RowBox[{"f", "@", "x"}]], "Input",ExpressionUUID->"415de72f-3c73-45ae-906e-3fb3ac5deaf5"],

Cell["Postfix notation:", "CodeText",
 CellChangeTimes->{{3.8914346422720833`*^9, 
  3.891434646024789*^9}},ExpressionUUID->"b63be199-951f-4005-a3d9-\
cbee9a7be0e0"],

Cell[BoxData[
 RowBox[{"x", "//", "f"}]], "Input",ExpressionUUID->"ec353b9c-c354-4a31-874c-965f4600c05c"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Atomic Expressions", "Section",ExpressionUUID->"b691a348-44a9-4ef0-a337-e8e9fee471fb"],

Cell["\<\
Wolfram Language symbolic expressions can represent an immense range of types \
of objects. All expressions are ultimately built from a small number of \
distinct types of atomic elements. \
\>", "Text",
 CellChangeTimes->{{3.7776410240023794`*^9, 3.7776410254083734`*^9}, {
   3.7776411099606905`*^9, 3.777641109962736*^9}, {3.783187417798882*^9, 
   3.7831874508290052`*^9}, {3.790444994533938*^9, 3.790444999060832*^9}, 
   3.790445062284096*^9, 3.790612667541707*^9, 3.829763583644245*^9, {
   3.891612169833028*^9, 3.891612192094067*^9}, {3.8916128662958803`*^9, 
   3.891612874199829*^9}, 
   3.891614026101166*^9},ExpressionUUID->"95f7f5fb-0f7a-48b2-a6df-\
cb466d8923da"],

Cell[CellGroupData[{

Cell["Atoms", "Subsection",
 CellChangeTimes->{{3.891612196795644*^9, 3.891612202132905*^9}, 
   3.8916140373060303`*^9},ExpressionUUID->"f81acd13-97ba-47d6-9985-\
a5b6931782fc"],

Cell[CellGroupData[{

Cell[TextData[{
 "Numbers: ",
 ButtonBox["Integer",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Integer.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Integer.html"],
 ", ",
 ButtonBox["Rational",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Rational.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Rational.html"],
 ", ",
 ButtonBox["Real",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Real.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Real.html"],
 ", ",
 ButtonBox["Complex",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Complex.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Complex.html"],
 " and other ",
 ButtonBox["representation of numbers",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/guide/RepresentationOfNumbers.\
html"], None},
  ButtonNote->
   "https://reference.wolfram.com/language/guide/RepresentationOfNumbers.\
html"],
 ":"
}], "Item",
 CellChangeTimes->{{3.614283470795937*^9, 3.61428347212248*^9}, {
   3.829763611417012*^9, 3.829763703535029*^9}, {3.829994632952303*^9, 
   3.829994633744053*^9}, {3.8870322247199917`*^9, 3.887032233869731*^9}, {
   3.89161221440764*^9, 3.891612218030884*^9}, 3.892717624563292*^9, {
   3.892718581800956*^9, 
   3.8927186014177837`*^9}},ExpressionUUID->"2381767c-2885-4eab-8204-\
4fea32a76626"],

Cell[BoxData[
 RowBox[{"\t", "127"}]], "Input",ExpressionUUID->"96040601-ade4-41d2-952b-8d15bd1aabcb"],

Cell[BoxData[
 RowBox[{"\t", 
  FractionBox["3", "4"]}]], "Input",ExpressionUUID->"2ae1083c-9166-4eac-b4d7-3a361d68f789"],

Cell[BoxData[
 RowBox[{"\t ", "0.0004"}]], "Input",ExpressionUUID->"0ccc54a3-2d9f-4d78-8290-b1ce87b8377b"],

Cell[BoxData[
 RowBox[{"\t ", 
  RowBox[{"5", "+", 
   RowBox[{"3", "I"}]}]}]], "Input",ExpressionUUID->"7e56e4f3-6fa1-43b3-ae36-\
c1a64f4dab4f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Strings: ",
 StyleBox["A ",
  FontWeight->"Plain"],
 StyleBox[ButtonBox["String",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/String.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/String.html"],
  FontWeight->"Plain"],
 StyleBox[" ",
  FontWeight->"Plain"],
 "is anything enclosed in double quotes:"
}], "Item",
 CellChangeTimes->{{3.887032238037917*^9, 3.887032240179007*^9}, {
  3.8870324051591797`*^9, 3.887032407507504*^9}, {3.8916122320697393`*^9, 
  3.8916122336244993`*^9}, {3.892717513521764*^9, 3.8927175379988003`*^9}, {
  3.89271757357265*^9, 
  3.8927176024956408`*^9}},ExpressionUUID->"09970d98-5316-4437-87df-\
c3c9bcf9876f"],

Cell[BoxData[
 RowBox[{"\t", "\"\<String\>\""}]], "Input",ExpressionUUID->"759fed5a-301c-4561-af9c-792360e738af"],

Cell[BoxData[
 RowBox[{"\t", "\"\<123\>\""}]], "Input",ExpressionUUID->"06fbd5e1-2347-4112-b5fd-fac5f6ef9ce9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Symbols: Basic named objects in Wolfram Language", "Item",
 CellChangeTimes->{{3.887032245104356*^9, 3.887032246306305*^9}, {
  3.8916123096210833`*^9, 
  3.891612317136424*^9}},ExpressionUUID->"5f6c3da9-d413-421f-9cde-\
7496c40bd199"],

Cell[CellGroupData[{

Cell["Every symbol has a unique name. The name:", "ItemParagraph",
 CellChangeTimes->{{3.7776410240023794`*^9, 3.7776410254083734`*^9}, {
  3.7776411109046707`*^9, 3.7776411220276165`*^9}, {3.7776827292664614`*^9, 
  3.777682729287449*^9}, {3.779814297019073*^9, 3.7798143006637917`*^9}, {
  3.779814358744224*^9, 3.779814362551168*^9}, {3.830343880785103*^9, 
  3.830343882122693*^9}, {3.891612308135643*^9, 
  3.891612321356038*^9}},ExpressionUUID->"e2fd064f-3475-4455-b691-\
b04e897d0090"],

Cell[BoxData[
 RowBox[{"\t", "variable"}]], "Input",ExpressionUUID->"adbd236a-9168-4ed3-b5a9-672d6dcfc762"],

Cell[BoxData[
 RowBox[{"\t", "temp"}]], "Input",ExpressionUUID->"380473c2-6039-4225-a2d1-5b09eca22d1d"]
}, Open  ]],

Cell["\<\
consists of a concatenation of letters, numbers and other characters \
\>", "Subitem",
 CellChangeTimes->{{3.7776410240023794`*^9, 3.7776410254083734`*^9}, {
   3.7776411109046707`*^9, 3.7776411220276165`*^9}, 3.777682740291539*^9, {
   3.779814305703897*^9, 3.779814374083987*^9}, {3.7807453516588173`*^9, 
   3.78074535168922*^9}},ExpressionUUID->"eed7151e-a5db-4ced-a5af-\
f43b3328c556"],

Cell["cannot begin with a number", "Subitem",
 CellChangeTimes->{{3.583573757046896*^9, 3.5835738252617188`*^9}, {
  3.583574896165764*^9, 3.583574902748777*^9}, {3.5835751776242743`*^9, 
  3.5835751874943457`*^9}, {3.591186033618814*^9, 3.591186034577346*^9}, {
  3.595586120554611*^9, 3.595586125984639*^9}, {3.734095255151857*^9, 
  3.734095268645473*^9}, {3.743241786624977*^9, 3.743241786627399*^9}, {
  3.780745353738142*^9, 
  3.780745353842162*^9}},ExpressionUUID->"d852bf24-ea34-4a81-9418-\
fb3c55aa587b"],

Cell[TextData[{
 "cannot begin with or contain certain reserved special characters (e.g. ",
 StyleBox["!", "Input"],
 ", ",
 StyleBox["@", "Input"],
 ", ",
 StyleBox["#", "Input"],
 ", ",
 StyleBox["%", "Input"],
 ", ",
 StyleBox["^", "Input"],
 ", ",
 StyleBox["+", "Input"],
 ", ",
 StyleBox["-", "Input"],
 ", ",
 StyleBox["_", "Input"],
 ", ",
 StyleBox["=", "Input"],
 ", ",
 StyleBox["&", "Input"],
 ", ",
 StyleBox["(", "Input"],
 ", ",
 StyleBox[")", "Input"],
 ", ",
 StyleBox["{", "Input"],
 ", ",
 StyleBox["}", "Input"],
 ", ",
 StyleBox["[", "Input"],
 ", ",
 StyleBox["]", "Input"],
 ", etc.)"
}], "Subitem",
 CellChangeTimes->{{3.583573757046896*^9, 3.5835738252617188`*^9}, {
  3.583574896165764*^9, 3.583574902748777*^9}, {3.5835751776242743`*^9, 
  3.5835751874943457`*^9}, {3.591186033618814*^9, 3.591186034577346*^9}, {
  3.595586120554611*^9, 3.595586125984639*^9}, {3.734095255151857*^9, 
  3.734095268645473*^9}, {3.743241787697652*^9, 3.74324182760882*^9}, {
  3.743241892920335*^9, 3.743241893406685*^9}, {3.743847718522636*^9, 
  3.7438477218015003`*^9}, {3.780678374696807*^9, 3.780678374767627*^9}, {
  3.780745356146562*^9, 3.78074535625163*^9}, {3.830542141971356*^9, 
  3.830542144392527*^9}},ExpressionUUID->"b39ead97-3c02-4f6c-99eb-\
94ffa02caa03"],

Cell[CellGroupData[{

Cell["\<\
Wolfram Language is fully symbolic, so \[OpenCurlyDoubleQuote]undefined \
variables\[CloseCurlyDoubleQuote] can always just stand for themselves:\
\>", "ItemParagraph",
 CellChangeTimes->{3.88703227886195*^9, 
  3.8916123541166687`*^9},ExpressionUUID->"143fa65b-9755-4927-87d9-\
a20cb8bb9585"],

Cell[BoxData[
 RowBox[{"\t", "x"}]], "Input",ExpressionUUID->"2afa1a68-5410-49a1-a25e-d7c0f07be72f"],

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"x", "+", "x", "+", "x"}]}]], "Input",ExpressionUUID->"7f32dda6-49e1-4591-ab00-ded390ba857b"],

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"Mean", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"2", "x"}], ",", 
     RowBox[{"7", "x"}], ",", 
     RowBox[{"3", "x"}]}], "}"}], "]"}]}]], "Input",ExpressionUUID->"3939f466-\
b438-4c15-acc0-a5c8834b4e82"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Atomic expressions can be combined to build up composite expressions. You can \
also nest composite expressions to build progressively more complicated \
expressions:\
\>", "Text",
 CellChangeTimes->{{3.829764084780875*^9, 3.8297641021193943`*^9}, 
   3.8297788712659388`*^9, {3.8303442189546413`*^9, 3.830344272975559*^9}, 
   3.830344403286049*^9, 3.834054828906098*^9, {3.8927186314607773`*^9, 
   3.8927186319229097`*^9}},ExpressionUUID->"5b85392a-0640-45cb-b23d-\
c04d236b3f79"],

Cell[BoxData[
 RowBox[{
  RowBox[{"x", "^", "2"}], "+", 
  RowBox[{"2", " ", 
   RowBox[{"Sin", "[", 
    RowBox[{
     RowBox[{"4", "t"}], "+", "5"}], "]"}]}]}]], "Input",
 CellLabel->
  "In[805]:=",ExpressionUUID->"f91e5189-fb0a-4cdc-b430-a5f695c851c8"],

Cell[BoxData[
 RowBox[{"Graphics", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Hue", "[", 
       RowBox[{"t", "/", "20"}], "]"}], ",", 
      RowBox[{"Circle", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"2", "Pi", " ", 
           RowBox[{"t", "/", "20"}]}], "]"}], ",", 
         RowBox[{"Sin", "[", 
          RowBox[{"2", "Pi", " ", 
           RowBox[{"t", "/", "20"}]}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "20"}], "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[804]:=",ExpressionUUID->"b508702b-35ca-4e8a-86fb-acb078090a9b"],

Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`xx$$ = False, 
  WolframUTools`Private`size$$ = 400, WolframUTools`Private`neutral$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[1., 0.592156862745098, 0.10196078431372549`], FrameMargins -> 12, 
   FrameStyle -> None, RoundingRadius -> 5, ImageSize -> {240, 65}], 
  WolframUTools`Private`over$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
   FrameMargins -> 12, FrameStyle -> None, RoundingRadius -> 5, 
   ImageSize -> {240, 65}], WolframUTools`Private`chosenAnswers$$ = {0}}, 
  TagBox[GridBox[{
     {
      PaneSelectorBox[{False->
       FrameBox[
        TemplateBox[{
          StyleBox[
          "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
           GrayLevel[1], StripOnInput -> False], 
          TemplateBox[{12}, "Spacer1"], 
          StyleBox[
          "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
           GrayLevel[1], StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1., 0.592156862745098, 0.10196078431372549`],
        FrameMargins->12,
        FrameStyle->None,
        ImageSize->{240, 65},
        RoundingRadius->5,
        StripOnInput->False], True->
       TagBox[
        FrameBox[
         TemplateBox[{
           StyleBox[
           "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
            GrayLevel[1], StripOnInput -> False], 
           TemplateBox[{12}, "Spacer1"], 
           StyleBox[
           "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
            GrayLevel[1], StripOnInput -> False]},
          "RowDefault"],
         Background->RGBColor[
          0.09019607843137255, 0.1607843137254902, 0.25882352941176473`],
         FrameMargins->12,
         FrameStyle->None,
         ImageSize->{240, 65},
         RoundingRadius->5,
         StripOnInput->False],
        EventHandlerTag[{
         "MouseClicked" :> (
           Switch[WolframUTools`Private`xx$$, True, 
             WolframUTools`Private`xx$$ = False, False, 
             WolframUTools`Private`xx$$ = True]; 
           WolframUTools`Private`chosenAnswers$$ = Table[0, 
              
              Length[{{
                "What is returned by the following: Head[\"hello\"]?", {{
                  "Nothing. A string does not have a head.", 
                   "Every expression has a head."}, {
                  "hello", "This is not the head of the expression."}, {
                  "String", "Correct"}, {
                  "An error", "Head[\"hello\"] will not return an error."}}, {
                 3}}}]]), Method -> "Preemptive", PassEventsDown -> Automatic,
           PassEventsUp -> True}]]}, Dynamic[
        CurrentValue["MouseOver"]],
       FrameMargins->0,
       ImageSize->Automatic]},
     {
      PaneSelectorBox[{True->
       FrameBox[
        TagBox[GridBox[{
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{
              0 -> "Nothing. A string does not have a head.", 1 -> Column[{
                  Style[
                   TextCell[
                   "Nothing. A string does not have a head.", TextAlignment -> 
                    Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Every expression has a head.", TextAlignment -> Left], 
                   "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> 
               "Nothing. A string does not have a head.", 3 -> 
               "Nothing. A string does not have a head.", 4 -> 
               "Nothing. A string does not have a head."}, {
              0 -> "hello", 1 -> "hello", 2 -> Column[{
                  Style[
                   TextCell["hello", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "This is not the head of the expression.", TextAlignment -> 
                    Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 3 -> "hello", 4 -> "hello"}, {
              0 -> "String", 1 -> "String", 2 -> "String", 3 -> Column[{
                  Style[
                   TextCell["String", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}], 4 -> "String"}, {
              0 -> "An error", 1 -> "An error", 2 -> "An error", 3 -> 
               "An error", 4 -> Column[{
                  Style[
                   TextCell["An error", TextAlignment -> Left], "Text", Bold, 
                   
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Head[\"hello\"] will not return an error.", TextAlignment -> 
                    Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = True}, 
             TagBox[GridBox[{
                {"\<\"What is returned by the following: Head[\\\"hello\\\"]?\
\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"Nothing. A string does not have a head.\"", 1 -> 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Nothing. A string does not have a head.", TextAlignment -> 
                    Left], 
                    TextCell[
                    "Nothing. A string does not have a head.", TextAlignment -> 
                    Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Every expression has a head.", TextAlignment -> Left], 
                    TextCell[
                    "Every expression has a head.", TextAlignment -> Left]], 
                    "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> 
                    "\"Nothing. A string does not have a head.\"", 3 -> 
                    "\"Nothing. A string does not have a head.\"", 4 -> 
                    "\"Nothing. A string does not have a head.\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"hello\"", 1 -> "\"hello\"", 2 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["hello", TextAlignment -> Left], 
                    TextCell["hello", TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "This is not the head of the expression.", TextAlignment -> 
                    Left], 
                    TextCell[
                    "This is not the head of the expression.", TextAlignment -> 
                    Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 3 -> "\"hello\"", 4 -> "\"hello\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {3}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"String\"", 1 -> "\"String\"", 2 -> "\"String\"", 
                    3 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["String", TextAlignment -> Left], 
                    TextCell["String", TextAlignment -> Left]], "Text", Bold, 
                    
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 4 -> "\"String\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 3, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {4}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"An error\"", 1 -> "\"An error\"", 2 -> 
                    "\"An error\"", 3 -> "\"An error\"", 4 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["An error", TextAlignment -> Left], 
                    TextCell["An error", TextAlignment -> Left]], "Text", 
                    Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Head[\"hello\"] will not return an error.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "Head[\"hello\"] will not return an error.", 
                    TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 4, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.92], 
            Thickness[Large]],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{
               GrayLevel[0.97]}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {False, False}},
          
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{1}}}],
         "Grid"],
        Background->GrayLevel[0.97],
        FrameMargins->15,
        FrameStyle->Directive[
          GrayLevel[0.92], 
          Thickness[Large]],
        RoundingRadius->0,
        StripOnInput->False], False->
       TemplateBox[{0},
        "Spacer1"]}, Dynamic[WolframUTools`Private`xx$$],
       ImageSize->Automatic]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{
         Scaled[0.8]}}},
    GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0}}}],
   "Grid"],
  DynamicModuleValues:>{}]], "Text",
 CellTags->"answer",ExpressionUUID->"b74bd8c0-0bbf-4fca-ab4c-00b80a257516"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Anatomy of an Expression", "Section",
 CellID->1060376315,ExpressionUUID->"e8f8b1c2-db67-4b76-9e54-074aa5f5df3f"],

Cell["\<\
All expressions\[LongDash]whatever they may represent\[LongDash]ultimately \
have a uniform tree-like structure. Some built-in functions can be used as \
tools to inspect and understand composite expressions. \
\>", "Text",
 CellChangeTimes->{{3.8871233639411287`*^9, 3.88712338416504*^9}, {
  3.891612935358054*^9, 
  3.8916129403015747`*^9}},ExpressionUUID->"e2243d5a-0b62-4e86-9c8a-\
3543e4ea0fd4"],

Cell[CellGroupData[{

Cell["FullForm of an Expression", "Subsection",
 CellChangeTimes->{{3.8871234298288193`*^9, 
  3.887123435277113*^9}},ExpressionUUID->"eaa229a4-0361-400a-a44b-\
89f699f58901"],

Cell["You have already seen the FullForm function in use: ", "CodeText",
 CellChangeTimes->{{3.887123390829023*^9, 
  3.8871234004290648`*^9}},ExpressionUUID->"b28a3c7d-ab33-4098-93ef-\
da7c662638e7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{
   RowBox[{"x", "^", "3"}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", "x"}], ")"}], "^", "2"}]}], "]"}]], "Input",
 CellLabel->
  "In[218]:=",ExpressionUUID->"8e056cb1-c524-420e-b3bf-7b8c610994ee"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Plus", "[", 
    RowBox[{
     RowBox[{"Power", "[", 
      RowBox[{"x", ",", "3"}], "]"}], ",", 
     RowBox[{"Power", "[", 
      RowBox[{
       RowBox[{"Plus", "[", 
        RowBox[{"1", ",", "x"}], "]"}], ",", "2"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[218]//FullForm=",ExpressionUUID->"4fb533e3-cc54-4861-8963-\
49a8e900d42b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Expressions as Trees", "Subsection",
 CellChangeTimes->{{3.829764974469067*^9, 3.82976497797847*^9}, {
  3.82976504783351*^9, 
  3.829765051058264*^9}},ExpressionUUID->"59c39ca0-19f0-4edb-bbad-\
ae627508697e"],

Cell["You can think of any Wolfram Language expression as a tree.", "Text",
 CellChangeTimes->{
  3.829764382018474*^9},ExpressionUUID->"001dcbbd-926a-4d74-9d81-\
c2f8a717937b"],

Cell[TextData[{
 ButtonBox["TreeForm",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/TreeForm.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/TreeForm.html"],
 " prints out expressions to show their \[OpenCurlyDoubleQuote]tree\
\[CloseCurlyDoubleQuote] structure:"
}], "CodeText",
 CellChangeTimes->{{3.82976440436163*^9, 3.8297644202654333`*^9}, 
   3.892717692843851*^9},ExpressionUUID->"376e7198-8570-4e1b-9eb5-\
f5555149b13c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeForm", "[", 
  RowBox[{
   RowBox[{"x", "^", "3"}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", "x"}], ")"}], "^", "2"}]}], "]"}]], "Input",
 CellLabel->
  "In[219]:=",ExpressionUUID->"7006d7f8-5fbc-4e7c-93e9-f7e651253094"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[
   TagBox[
    GraphicsComplexBox[{{1.2510864843424487`, 2.5021729686848975`}, {
     0.41702882811414954`, 1.6681153124565984`}, {0., 0.8340576562282993}, {
     0.8340576562282991, 0.8340576562282993}, {2.0851441405707476`, 
     1.6681153124565984`}, {1.6681153124565982`, 0.8340576562282993}, {
     1.2510864843424487`, 0.}, {2.0851441405707476`, 0.}, {
     2.5021729686848975`, 0.8340576562282993}}, {
      {RGBColor[0.55, 0.45, 0.45], 
       LineBox[{{1, 2}, {1, 5}, {2, 3}, {2, 4}, {5, 6}, {5, 9}, {6, 7}, {6, 
        8}}]}, {
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Plus", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 1],
         TagBox[
          RowBox[{
            SuperscriptBox["x", "3"], "+", 
            SuperscriptBox[
             RowBox[{"(", 
               RowBox[{"1", "+", "x"}], ")"}], "2"]}], HoldForm]],
        Annotation[#, 
         HoldForm[$CellContext`x^3 + (1 + $CellContext`x)^2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Power", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 2],
         TagBox[
          SuperscriptBox["x", "3"], HoldForm]],
        Annotation[#, 
         HoldForm[$CellContext`x^3], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["x",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 3],
         TagBox["x", HoldForm]],
        Annotation[#, 
         HoldForm[$CellContext`x], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["3",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 4],
         TagBox["3", HoldForm]],
        Annotation[#, 
         HoldForm[3], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Power", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 5],
         TagBox[
          SuperscriptBox[
           RowBox[{"(", 
             RowBox[{"1", "+", "x"}], ")"}], "2"], HoldForm]],
        Annotation[#, 
         HoldForm[(1 + $CellContext`x)^2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Plus", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 6],
         TagBox[
          RowBox[{"1", "+", "x"}], HoldForm]],
        Annotation[#, 
         HoldForm[1 + $CellContext`x], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 7],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["x",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 8],
         TagBox["x", HoldForm]],
        Annotation[#, 
         HoldForm[$CellContext`x], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["2",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 9],
         TagBox["2", HoldForm]],
        Annotation[#, 
         HoldForm[2], "Tooltip"]& ]}}],
    Annotation[#, 
     VertexCoordinateRules -> {{1.2510864843424487`, 2.5021729686848975`}, {
      0.41702882811414954`, 1.6681153124565984`}, {0., 0.8340576562282993}, {
      0.8340576562282991, 0.8340576562282993}, {2.0851441405707476`, 
      1.6681153124565984`}, {1.6681153124565982`, 0.8340576562282993}, {
      1.2510864843424487`, 0.}, {2.0851441405707476`, 0.}, {
      2.5021729686848975`, 0.8340576562282993}}]& ],
   AspectRatio->NCache[2 5^Rational[-1, 2], 0.8944271909999159],
   FormatType:>StandardForm,
   FrameTicks->Automatic,
   PlotRange->All,
   PlotRangePadding->Scaled[0.1]],
  TreeForm[$CellContext`x^3 + (1 + $CellContext`x)^2],
  Editable->False]], "Output",
 CellLabel->
  "Out[219]//TreeForm=",ExpressionUUID->"5b6b3576-224d-4e79-977b-\
91396d4c228b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Head of an Expression", "Subsection",
 CellChangeTimes->{{3.7340969640352373`*^9, 3.7340969857149763`*^9}, {
   3.7349704880026493`*^9, 3.734970493094432*^9}, {3.778500781387211*^9, 
   3.778500782624322*^9}, 3.778501638064142*^9, {3.782755667495922*^9, 
   3.7827556676157093`*^9}, {3.829994564893688*^9, 3.829994574323628*^9}, 
   3.870945001674024*^9},
 CellID->1858304529,ExpressionUUID->"aa70ee94-439d-430e-adf9-bba57fea1e49"],

Cell[TextData[{
 "The part of the expression preceding the opening square bracket is known as \
the ",
 StyleBox["head",
  FontSlant->"Italic"],
 " of an expression."
}], "Text",
 CellChangeTimes->{{3.7319759059597597`*^9, 3.731975941130814*^9}, 
   3.734185663746643*^9, {3.74344127790132*^9, 3.7434412785052643`*^9}, {
   3.7728922442800426`*^9, 3.772892245447806*^9}, 3.790612857988113*^9, {
   3.829842611671694*^9, 3.829842670098406*^9}, 3.82999460981533*^9},
 CellID->1669540582,ExpressionUUID->"fe111747-0a35-4533-8de4-66a52c32538b"],

Cell[TextData[{
 "Use ",
 ButtonBox["Head",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Head.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Head.html"],
 " to extract the head of an expression:"
}], "CodeText",
 CellChangeTimes->{{3.8298426719680777`*^9, 3.829842681814499*^9}, 
   3.892717705605085*^9},ExpressionUUID->"ced82b88-dd71-4394-9303-\
a1a2aa9915d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "+", 
  RowBox[{
   RowBox[{"b", "/", "2"}], " ", "c"}]}]], "Input",
 CellLabel->"In[220]:=",
 CellID->947229972,ExpressionUUID->"45adbdea-d467-4abb-822f-8b7a21aa0b55"],

Cell[BoxData[
 RowBox[{"a", "+", 
  FractionBox[
   RowBox[{"b", " ", "c"}], "2"]}]], "Output",
 CellLabel->
  "Out[220]=",ExpressionUUID->"d321b876-d2a5-42d2-ac70-f7380aeb80d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", 
  RowBox[{"a", "+", 
   RowBox[{
    RowBox[{"b", "/", "2"}], " ", "c"}]}], "]"}]], "Input",
 CellLabel->"In[221]:=",
 CellID->797864193,ExpressionUUID->"e5e0a7a6-1547-446c-8bde-65929899cd4d"],

Cell[BoxData["Plus"], "Output",
 CellLabel->
  "Out[221]=",ExpressionUUID->"8ed2108f-40d7-4aed-a029-453229d6231e"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Length of an Expression", "Subsection",
 CellChangeTimes->{{3.870944947089364*^9, 
  3.870944951114027*^9}},ExpressionUUID->"d3027b63-21fb-4e10-a423-\
e82212bf23b0"],

Cell[TextData[{
 "Use ",
 ButtonBox["Length",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Length.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Length.html"],
 " to find the number of elements in an expression:"
}], "Text",
 CellChangeTimes->{{3.870945015761486*^9, 3.8709450266175222`*^9}, 
   3.892717720292363*^9},ExpressionUUID->"5c432ccf-b8bc-47ab-b4ff-\
82a45359be35"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"a", "+", 
   RowBox[{
    RowBox[{"b", "/", "2"}], " ", "c"}]}], "]"}]], "Input",
 CellLabel->"In[222]:=",
 CellID->753244599,ExpressionUUID->"bbd28a4d-2dd6-4a25-bf6e-4d209d18b377"],

Cell[BoxData["2"], "Output",
 CellLabel->
  "Out[222]=",ExpressionUUID->"45968b90-2be3-4df3-a786-50a92a2d07fc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{
   RowBox[{"x", "^", "3"}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", "x"}], ")"}], "^", "2"}], " ", "+", "x", "+", "6"}], 
  "]"}]], "Input",
 CellLabel->
  "In[223]:=",ExpressionUUID->"f51f8718-696b-4dad-9765-51a7fe2a9432"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[223]=",ExpressionUUID->"5d40d0d2-52af-43f1-93bf-8322cdad1e26"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Part of an Expression", "Subsection",
 CellChangeTimes->{{3.829778962215323*^9, 
  3.829778969682271*^9}},ExpressionUUID->"97528b7e-ec49-418e-97bd-\
584534acfe93"],

Cell["\<\
Now that you have visualized expressions built out of many parts, you can \
think of working with these parts individually or in combination.\
\>", "Text",
 CellChangeTimes->{{3.829842762578249*^9, 
  3.8298428133710546`*^9}},ExpressionUUID->"be373a6e-4320-4750-9da4-\
36a35532d714"],

Cell[TextData[{
 "You can use ",
 ButtonBox["Part",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Part.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Part.html"],
 " to extract any part of an expression:"
}], "CodeText",
 CellChangeTimes->{{3.8297650753886003`*^9, 3.8297650956959*^9}, {
   3.829765672425764*^9, 3.829765687111637*^9}, {3.829842701416204*^9, 
   3.829842716352357*^9}, 
   3.892717734701764*^9},ExpressionUUID->"83c2623d-7326-4c6c-999a-\
41c057dcaa8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"x", "+", "y", "+", "z"}], ")"}], ",", "2"}], "]"}]], "Input",
 CellLabel->
  "In[224]:=",ExpressionUUID->"01dbc8b3-88de-4868-9815-0b358e3f4e9b"],

Cell[BoxData["y"], "Output",
 CellLabel->
  "Out[224]=",ExpressionUUID->"af8f0ea9-1207-4822-bc9f-ee9ca1cd8bc7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{"x", "+", "y", "+", "z"}], ")"}], "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellLabel->
  "In[225]:=",ExpressionUUID->"058cfa83-480e-4e4f-96b2-fd0dadd326aa"],

Cell[BoxData["y"], "Output",
 CellLabel->
  "Out[225]=",ExpressionUUID->"a8f1dbd7-0a0b-4456-b21f-1202c1ff65ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"x", "^", "3"}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", "x"}], ")"}], "^", "2"}]}], ")"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[226]:=",ExpressionUUID->"eda42106-d0d0-43b6-ab7f-353a3ff6f6e4"],

Cell[BoxData[
 RowBox[{"1", "+", "x"}]], "Output",
 CellLabel->
  "Out[226]=",ExpressionUUID->"f1b0773a-0820-4c95-8359-ed42a6c6ff21"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c"}], "}"}], "[", 
  RowBox[{"[", "3", "]"}], "]"}]], "Input",
 CellLabel->
  "In[227]:=",ExpressionUUID->"da98a2ba-1411-42d5-9d4c-5d2bbb0ae5e4"],

Cell[BoxData["c"], "Output",
 CellLabel->
  "Out[227]=",ExpressionUUID->"d0167a3e-01a1-400d-a0b5-aba35fbed6d6"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`xx$$ = False, 
  WolframUTools`Private`size$$ = 400, WolframUTools`Private`neutral$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[1., 0.592156862745098, 0.10196078431372549`], FrameMargins -> 12, 
   FrameStyle -> None, RoundingRadius -> 5, ImageSize -> {240, 65}], 
  WolframUTools`Private`over$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
   FrameMargins -> 12, FrameStyle -> None, RoundingRadius -> 5, 
   ImageSize -> {240, 65}], WolframUTools`Private`chosenAnswers$$ = {0}}, 
  TagBox[GridBox[{
     {
      PaneSelectorBox[{False->
       FrameBox[
        TemplateBox[{
          StyleBox[
          "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
           GrayLevel[1], StripOnInput -> False], 
          TemplateBox[{12}, "Spacer1"], 
          StyleBox[
          "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
           GrayLevel[1], StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1., 0.592156862745098, 0.10196078431372549`],
        FrameMargins->12,
        FrameStyle->None,
        ImageSize->{240, 65},
        RoundingRadius->5,
        StripOnInput->False], True->
       TagBox[
        FrameBox[
         TemplateBox[{
           StyleBox[
           "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
            GrayLevel[1], StripOnInput -> False], 
           TemplateBox[{12}, "Spacer1"], 
           StyleBox[
           "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
            GrayLevel[1], StripOnInput -> False]},
          "RowDefault"],
         Background->RGBColor[
          0.09019607843137255, 0.1607843137254902, 0.25882352941176473`],
         FrameMargins->12,
         FrameStyle->None,
         ImageSize->{240, 65},
         RoundingRadius->5,
         StripOnInput->False],
        EventHandlerTag[{
         "MouseClicked" :> (
           Switch[WolframUTools`Private`xx$$, True, 
             WolframUTools`Private`xx$$ = False, False, 
             WolframUTools`Private`xx$$ = True]; 
           WolframUTools`Private`chosenAnswers$$ = Table[0, 
              
              Length[{{
                "What is the output returned by the following? e = Expand[(1 \
+ 3 x + 4 y^2)^2]; e[[4]]", {{
                  "(1 + 3 x + 4 y^2)^2", 
                   "This is not the 4th part of the expression."}, {
                  "2", "This is not the 4th part of the expression."}, {
                  "8 y^2", "Correct"}, {
                  "Error. The expression does not have four parts.", 
                   "e[[4]] does not return an error."}}, {3}}}]]), Method -> 
          "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]]},
        Dynamic[
        CurrentValue["MouseOver"]],
       FrameMargins->0,
       ImageSize->Automatic]},
     {
      PaneSelectorBox[{True->
       FrameBox[
        TagBox[GridBox[{
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{
              0 -> "(1 + 3 x + 4 y^2)^2", 1 -> Column[{
                  Style[
                   TextCell["(1 + 3 x + 4 y^2)^2", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "This is not the 4th part of the expression.", 
                    TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> "(1 + 3 x + 4 y^2)^2", 3 -> 
               "(1 + 3 x + 4 y^2)^2", 4 -> "(1 + 3 x + 4 y^2)^2"}, {
              0 -> "2", 1 -> "2", 2 -> Column[{
                  Style[
                   TextCell["2", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "This is not the 4th part of the expression.", 
                    TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 3 -> "2", 4 -> "2"}, {
              0 -> "8 y^2", 1 -> "8 y^2", 2 -> "8 y^2", 3 -> Column[{
                  Style[
                   TextCell["8 y^2", TextAlignment -> Left], "Text", Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}], 4 -> "8 y^2"}, {
              0 -> "Error. The expression does not have four parts.", 1 -> 
               "Error. The expression does not have four parts.", 2 -> 
               "Error. The expression does not have four parts.", 3 -> 
               "Error. The expression does not have four parts.", 4 -> Column[{
                  Style[
                   TextCell[
                   "Error. The expression does not have four parts.", 
                    TextAlignment -> Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "e[[4]] does not return an error.", TextAlignment -> Left],
                    "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = True}, 
             TagBox[GridBox[{
                {"\<\"What is the output returned by the following? e = \
Expand[(1 + 3 x + 4 y^2)^2]; e[[4]]\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"(1 + 3 x + 4 y^2)^2\"", 1 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["(1 + 3 x + 4 y^2)^2", TextAlignment -> Left], 
                    TextCell["(1 + 3 x + 4 y^2)^2", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "This is not the 4th part of the expression.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "This is not the 4th part of the expression.", 
                    TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> "\"(1 + 3 x + 4 y^2)^2\"", 3 -> 
                    "\"(1 + 3 x + 4 y^2)^2\"", 4 -> 
                    "\"(1 + 3 x + 4 y^2)^2\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   PaneSelectorBox[{0 -> "\"2\"", 1 -> "\"2\"", 2 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["2", TextAlignment -> Left], 
                    TextCell["2", TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "This is not the 4th part of the expression.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "This is not the 4th part of the expression.", 
                    TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 3 -> "\"2\"", 4 -> "\"2\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {3}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"8 y^2\"", 1 -> "\"8 y^2\"", 2 -> "\"8 y^2\"", 3 -> 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["8 y^2", TextAlignment -> Left], 
                    TextCell["8 y^2", TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 4 -> "\"8 y^2\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 3, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {4}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"Error. The expression does not have four \
parts.\"", 1 -> "\"Error. The expression does not have four parts.\"", 2 -> 
                    "\"Error. The expression does not have four parts.\"", 3 -> 
                    "\"Error. The expression does not have four parts.\"", 4 -> 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Error. The expression does not have four parts.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "Error. The expression does not have four parts.", 
                    TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "e[[4]] does not return an error.", TextAlignment -> 
                    Left], 
                    TextCell[
                    "e[[4]] does not return an error.", TextAlignment -> 
                    Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 4, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.92], 
            Thickness[Large]],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{
               GrayLevel[0.97]}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {False, False}},
          
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{1}}}],
         "Grid"],
        Background->GrayLevel[0.97],
        FrameMargins->15,
        FrameStyle->Directive[
          GrayLevel[0.92], 
          Thickness[Large]],
        RoundingRadius->0,
        StripOnInput->False], False->
       TemplateBox[{0},
        "Spacer1"]}, Dynamic[WolframUTools`Private`xx$$],
       ImageSize->Automatic]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{
         Scaled[0.8]}}},
    GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0}}}],
   "Grid"],
  DynamicModuleValues:>{}]], "Text",
 CellTags->"answer",ExpressionUUID->"24280149-2c7b-4d19-bccc-7065dc652446"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Assignments", "Section",ExpressionUUID->"ad734211-c52f-41d1-b32c-91f3e8d29e93"],

Cell[TextData[{
 "Values can be assigned to symbols using ",
 ButtonBox["Set",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Set.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Set.html"],
 " and ",
 ButtonBox["SetDelayed",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/SetDelayed.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/SetDelayed.html"],
 ". Assignments establish rules to replace the left-hand side (LHS) of an \
assignment with the right-hand side (RHS)."
}], "Text",
 CellChangeTimes->{{3.790446420610692*^9, 3.7904464361057663`*^9}, {
   3.7906130175902147`*^9, 3.79061302032469*^9}, {3.829779201623019*^9, 
   3.829779244299077*^9}, {3.829995016334688*^9, 3.829995020187119*^9}, {
   3.829996127094903*^9, 3.829996130277008*^9}, 3.83405538877732*^9, 
   3.87094359867864*^9, {3.8914452712779016`*^9, 3.891445276792837*^9}, {
   3.892717757230174*^9, 
   3.892717792395499*^9}},ExpressionUUID->"a7bf047b-97a1-47e6-a875-\
10133aadbd49"],

Cell[CellGroupData[{

Cell["Immediate Assignment", "Subsection",
 CellChangeTimes->{{3.735041255879458*^9, 
  3.735041261558373*^9}},ExpressionUUID->"72da1777-4c2a-44b4-8ea4-\
7fb0a91c5364"],

Cell["These are rules of the form:", "Text",
 CellChangeTimes->{{3.735041297235909*^9, 3.735041313269236*^9}, {
  3.735042150370347*^9, 
  3.735042150773843*^9}},ExpressionUUID->"8cf50176-86e5-4a28-8cd8-\
686213c4ebd7"],

Cell[BoxData[
 RowBox[{"LHS", " ", "=", " ", "RHS"}]], "Program",
 CellMargins->{{120, 60}, {8, 8}},
 CellChangeTimes->{{3.583566284954879*^9, 3.58356633742546*^9}, {
   3.734176414459256*^9, 3.734176445911234*^9}, 3.734178192123317*^9, {
   3.829779162097926*^9, 3.829779165233156*^9}},
 TextAlignment->Center,
 FontSize->24,
 FontColor->GrayLevel[0],
 CellID->1741750011,ExpressionUUID->"6ce9be20-c12d-4871-b4e9-0af0da87f5fb"],

Cell["\<\
The RHS is evaluated and the result is assigned to be the value of the LHS \
right away:\
\>", "Text",
 CellChangeTimes->{{3.7904466263727293`*^9, 3.790446653318746*^9}, {
  3.790613692544867*^9, 
  3.790613700812722*^9}},ExpressionUUID->"2144dd1b-f1bb-4fb3-b0c8-\
29d343be2011"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "=", "3"}]], "Input",
 CellLabel->
  "In[228]:=",ExpressionUUID->"0955c695-7819-4863-87e9-b3f6cf30386b"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[228]=",ExpressionUUID->"b445755c-38a5-47c6-9189-91b3bf5d5ae8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"b", "=", 
  RowBox[{"a", "^", "2"}]}]], "Input",
 CellLabel->
  "In[229]:=",ExpressionUUID->"4724269c-8f4d-4db4-a0c4-7dd9c03028d3"],

Cell[BoxData["9"], "Output",
 CellLabel->
  "Out[229]=",ExpressionUUID->"b6e47c04-53c6-4565-b513-db74c86784f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", "=", 
  RowBox[{"a", "+", "b"}]}]], "Input",
 CellLabel->
  "In[230]:=",ExpressionUUID->"6f7f0ec0-280c-4007-bd32-25cbcd3765ea"],

Cell[BoxData["12"], "Output",
 CellLabel->
  "Out[230]=",ExpressionUUID->"22319aa7-eb46-4f8b-9e84-d6a6cf86af14"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exp", " ", "=", 
  RowBox[{
   RowBox[{"c", "^", "3"}], "+", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"1", "+", "c"}], ")"}], "^", "2"}]}]}]], "Input",
 CellLabel->
  "In[231]:=",ExpressionUUID->"a96b9283-b73c-4538-9235-37e4bae6ed6c"],

Cell[BoxData["1897"], "Output",
 CellLabel->
  "Out[231]=",ExpressionUUID->"2dceead0-3e7e-4896-8a4f-4d4a24d9b06f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myList", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "exp"}], "}"}]}]], "Input",
 CellLabel->
  "In[232]:=",ExpressionUUID->"1fa70398-1a04-4a44-b4c7-77ba4f3a8983"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "9", ",", "1897"}], "}"}]], "Output",
 CellLabel->
  "Out[232]=",ExpressionUUID->"1749b3fd-172c-471b-bfc3-5d8f4a95d0d6"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Delayed Assignment", "Subsection",
 CellChangeTimes->{{3.7350412785113792`*^9, 
  3.735041287429839*^9}},ExpressionUUID->"d83b4850-b673-4765-8bd0-\
1855889b4dcc"],

Cell["\<\
An alternative is delayed assignment, where the value is recomputed every \
time it is needed.\
\>", "Text",
 CellChangeTimes->{{3.870945663291106*^9, 
  3.8709456746533213`*^9}},ExpressionUUID->"8616641d-9b3b-418c-a384-\
47fc73b2fca6"],

Cell["Delayed assignment is specified with rules of the form:", "Text",
 CellChangeTimes->{{3.735041297235909*^9, 3.735041318595613*^9}, {
  3.735042153541666*^9, 3.73504215391634*^9}, {3.870945681221084*^9, 
  3.870945689253325*^9}},ExpressionUUID->"a0793282-c043-4eb0-9fca-\
ad2b82244a3c"],

Cell[BoxData[
 RowBox[{"LHS", " ", ":=", " ", "RHS"}]], "Program",
 CellMargins->{{120, 60}, {8, 8}},
 CellChangeTimes->{{3.583566284954879*^9, 3.58356633742546*^9}, {
   3.734176414459256*^9, 3.734176445911234*^9}, 3.734178192123317*^9, {
   3.829779178395473*^9, 3.829779180848905*^9}},
 TextAlignment->Center,
 FontSize->24,
 FontColor->GrayLevel[0],
 CellID->213003452,ExpressionUUID->"76f70578-3776-4951-96f0-46c13161d51c"],

Cell["\<\
The RHS is maintained in an unevaluated form. Whenever LHS appears in an \
expression, it is replaced by RHS, evaluated anew each time:\
\>", "Text",
 CellChangeTimes->{{3.79044667968614*^9, 3.7904466918927298`*^9}, {
  3.790613039649675*^9, 3.79061304606982*^9}, {3.7906137052650347`*^9, 
  3.790613712591229*^9}},ExpressionUUID->"e354d794-7d5c-4004-b86b-\
d17261f2b904"],

Cell[BoxData[
 RowBox[{"c", ":=", " ", 
  RowBox[{"a", "^", "2"}]}]], "Input",
 CellLabel->
  "In[233]:=",ExpressionUUID->"c31e2893-44d8-427c-a75c-c072dece8531"],

Cell[CellGroupData[{

Cell[BoxData["c"], "Input",
 CellLabel->
  "In[234]:=",ExpressionUUID->"a02e7697-21b2-489c-9d53-1fac74512eac"],

Cell[BoxData["9"], "Output",
 CellLabel->
  "Out[234]=",ExpressionUUID->"ebe48bfd-cf3c-4956-8ae7-a704e5da973b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "=", "2"}], ";"}]], "Input",
 CellLabel->
  "In[235]:=",ExpressionUUID->"b55ba1bd-3938-47dd-840f-a4a358e8b54b"],

Cell[CellGroupData[{

Cell[BoxData["b"], "Input",
 CellLabel->
  "In[236]:=",ExpressionUUID->"31e5aea3-acce-47df-a628-fa1537208f34"],

Cell[BoxData["9"], "Output",
 CellLabel->
  "Out[236]=",ExpressionUUID->"5c2049ab-691d-45b2-96b5-c1c325358f34"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["c"], "Input",
 CellLabel->
  "In[237]:=",ExpressionUUID->"0bb11795-49b2-48b1-8a5d-1aaaa18842a3"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[237]=",ExpressionUUID->"3af8ed4e-cf36-48c4-b699-51b146b85fc1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "b"}]], "Input",
 CellLabel->
  "In[238]:=",ExpressionUUID->"672419cb-32d1-41e9-a495-dd8e5b85cdba"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`b\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Assignment\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"OwnValues\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "OwnValues", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{"b", "=", "9"}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`b\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`b\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Global`b", "Documentation" -> None, 
    "OwnValues" -> 
    Information`InformationValueForm[
     OwnValues, $CellContext`b, {$CellContext`b -> 9}], "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "Global`b"|>, False]]], "Output",
 CellLabel->
  "Out[238]=",ExpressionUUID->"d89c7896-e3b9-42d3-97b7-f5f00ce1e90d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "c"}]], "Input",
 CellLabel->
  "In[239]:=",ExpressionUUID->"958db057-d8ae-4191-8734-25327572f304"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`c\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Assignment\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"OwnValues\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "OwnValues", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{"c", ":=", 
                    SuperscriptBox["a", "2"]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`c\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\"Global`c\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> "Global`c", "Documentation" -> None, 
    "OwnValues" -> 
    Information`InformationValueForm[
     OwnValues, $CellContext`c, {$CellContext`c :> $CellContext`a^2}], 
    "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> "Global`c"|>, 
   False]]], "Output",
 CellLabel->
  "Out[239]=",ExpressionUUID->"287b608d-c3fa-4d96-858d-b202945e6a63"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Clear Assignments", "Subsection",
 CellChangeTimes->{{3.891445337145502*^9, 
  3.891445343360797*^9}},ExpressionUUID->"bbc252c9-367f-4a06-8bd6-\
df7ad7606130"],

Cell["Clear the assignments:", "CodeText",
 CellChangeTimes->{{3.891432449552004*^9, 3.891432488514749*^9}, {
  3.89143258122614*^9, 
  3.891432583962213*^9}},ExpressionUUID->"87e8f78b-7141-466e-b33c-\
6192c3308eaa"],

Cell[BoxData[
 RowBox[{"x", "=."}]], "Input",
 CellLabel->
  "In[240]:=",ExpressionUUID->"83ccbc96-932f-4628-86b6-c1febc820a8f"],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"x", ",", "t"}], "]"}]], "Input",
 CellLabel->
  "In[241]:=",ExpressionUUID->"17b5fdbd-009d-4d9a-b1a7-8a8f69819c70"],

Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`xx$$ = False, 
  WolframUTools`Private`size$$ = 400, WolframUTools`Private`neutral$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[1., 0.592156862745098, 0.10196078431372549`], FrameMargins -> 12, 
   FrameStyle -> None, RoundingRadius -> 5, ImageSize -> {240, 65}], 
  WolframUTools`Private`over$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
   FrameMargins -> 12, FrameStyle -> None, RoundingRadius -> 5, 
   ImageSize -> {240, 65}], WolframUTools`Private`chosenAnswers$$ = {0}}, 
  TagBox[GridBox[{
     {
      PaneSelectorBox[{False->
       FrameBox[
        TemplateBox[{
          StyleBox[
          "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
           GrayLevel[1], StripOnInput -> False], 
          TemplateBox[{12}, "Spacer1"], 
          StyleBox[
          "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
           GrayLevel[1], StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1., 0.592156862745098, 0.10196078431372549`],
        FrameMargins->12,
        FrameStyle->None,
        ImageSize->{240, 65},
        RoundingRadius->5,
        StripOnInput->False], True->
       TagBox[
        FrameBox[
         TemplateBox[{
           StyleBox[
           "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
            GrayLevel[1], StripOnInput -> False], 
           TemplateBox[{12}, "Spacer1"], 
           StyleBox[
           "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
            GrayLevel[1], StripOnInput -> False]},
          "RowDefault"],
         Background->RGBColor[
          0.09019607843137255, 0.1607843137254902, 0.25882352941176473`],
         FrameMargins->12,
         FrameStyle->None,
         ImageSize->{240, 65},
         RoundingRadius->5,
         StripOnInput->False],
        EventHandlerTag[{
         "MouseClicked" :> (
           Switch[WolframUTools`Private`xx$$, True, 
             WolframUTools`Private`xx$$ = False, False, 
             WolframUTools`Private`xx$$ = True]; 
           WolframUTools`Private`chosenAnswers$$ = Table[0, 
              
              Length[{{
                "If x is defined as x := RandomReal[], what happens if {x, x, \
x} is evaluated?", {{
                  "You get a list with three identical elements.", 
                   "Incorrect. SetDelayed leaves RandomReal[] unevaluated in \
the definition of x and is only evaluated when x is invoked."}, {
                  "You get a list with three different elements.", 
                   "Correct"}}, {2}}}]]), Method -> "Preemptive", 
          PassEventsDown -> Automatic, PassEventsUp -> True}]]}, Dynamic[
        CurrentValue["MouseOver"]],
       FrameMargins->0,
       ImageSize->Automatic]},
     {
      PaneSelectorBox[{True->
       FrameBox[
        TagBox[GridBox[{
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{
              0 -> "You get a list with three identical elements.", 1 -> 
               Column[{
                  Style[
                   TextCell[
                   "You get a list with three identical elements.", 
                    TextAlignment -> Left], "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. SetDelayed leaves RandomReal[] unevaluated in \
the definition of x and is only evaluated when x is invoked.", TextAlignment -> 
                    Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> 
               "You get a list with three identical elements."}, {
              0 -> "You get a list with three different elements.", 1 -> 
               "You get a list with three different elements.", 2 -> Column[{
                  Style[
                   TextCell[
                   "You get a list with three different elements.", 
                    TextAlignment -> Left], "Text", Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = False}, 
             TagBox[GridBox[{
                {"\<\"If x is defined as x := RandomReal[], what happens if \
{x, x, x} is evaluated?\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"You get a list with three identical elements.\"", 
                    1 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "You get a list with three identical elements.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "You get a list with three identical elements.", 
                    TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. SetDelayed leaves RandomReal[] unevaluated in \
the definition of x and is only evaluated when x is invoked.", TextAlignment -> 
                    Left], 
                    TextCell[
                    "Incorrect. SetDelayed leaves RandomReal[] unevaluated in \
the definition of x and is only evaluated when x is invoked.", TextAlignment -> 
                    Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> 
                    "\"You get a list with three identical elements.\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"You get a list with three different elements.\"", 
                    1 -> "\"You get a list with three different elements.\"", 
                    2 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "You get a list with three different elements.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "You get a list with three different elements.", 
                    TextAlignment -> Left]], "Text", Bold, 
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.92], 
            Thickness[Large]],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{
               GrayLevel[0.97]}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {False, False}},
          
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{1}}}],
         "Grid"],
        Background->GrayLevel[0.97],
        FrameMargins->15,
        FrameStyle->Directive[
          GrayLevel[0.92], 
          Thickness[Large]],
        RoundingRadius->0,
        StripOnInput->False], False->
       TemplateBox[{0},
        "Spacer1"]}, Dynamic[WolframUTools`Private`xx$$],
       ImageSize->Automatic]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{
         Scaled[0.8]}}},
    GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0}}}],
   "Grid"],
  DynamicModuleValues:>{}]], "Text",
 CellTags->"answer",ExpressionUUID->"3af3e6b6-6a9b-4fbb-8ac6-f8b75182e882"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Defining Functions", "Section",ExpressionUUID->"331bd44b-c370-4953-8c92-7dc834b63279"],

Cell["\<\
In Wolfram Language, function definitions are just assignments that give \
transformation rules for patterns.\
\>", "Text",
 CellChangeTimes->{{3.8914326668906097`*^9, 3.8914326701437063`*^9}, 
   3.89143273695232*^9, 
   3.89271832690898*^9},ExpressionUUID->"dc0dd63e-fd78-439f-ba78-\
203eb13f75c2"],

Cell[TextData[{
 "Define a function of two arguments named ",
 Cell[BoxData[
 "x"], "Input",ExpressionUUID->"19c11766-aac3-4dc3-9354-5b116525be61"],
 " and ",
 Cell[BoxData[
 "y"], "Input",ExpressionUUID->"4d13a8b9-ca83-4d2c-91e9-60968ef3df48"],
 ":"
}], "CodeText",
 CellChangeTimes->{
  3.8914326668906097`*^9, {3.892717904902214*^9, 
   3.89271790827619*^9}},ExpressionUUID->"d447ce4f-6c21-491d-aa51-\
24c56649cbbf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"x_", ",", "y_"}], "]"}], ":=", 
  RowBox[{"x", "+", "y"}]}]], "Input",
 CellLabel->
  "In[242]:=",ExpressionUUID->"38a3290c-4af8-45b8-a5c7-e7c106d93f1f"],

Cell["\<\
Use the definition (function arguments go within square brackets):\
\>", "CodeText",
 CellChangeTimes->{
  3.891432748037537*^9, {3.8914344994734163`*^9, 
   3.891434506920679*^9}},ExpressionUUID->"36b03f25-dd46-4ae0-8a8b-\
dfee7be1d6d6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"4", ",", "\"\<temp\>\""}], "]"}]], "Input",
 CellLabel->
  "In[243]:=",ExpressionUUID->"ea14e834-f797-42c9-82c4-55c13d9cf41f"],

Cell[BoxData[
 RowBox[{"4", "+", "\<\"temp\"\>"}]], "Output",
 CellLabel->
  "Out[243]=",ExpressionUUID->"6545dd0f-700a-480e-bca3-3afd0484aad7"]
}, Open  ]],

Cell["Clear the definition:", "CodeText",
 CellChangeTimes->{
  3.8914327770138607`*^9},ExpressionUUID->"8aa51fa7-37bf-4bf1-a8ef-\
820dd954ca63"],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",
 CellLabel->
  "In[244]:=",ExpressionUUID->"8b597e3c-58c8-48f4-b86c-9c9890e3a5cc"],

Cell[TextData[{
 "The names like ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"68c73d9a-7a3f-4262-a20c-ed3a8d83ee3f"],
 " that you use for functions in Wolfram Language are just symbols. It is \
recommended that you avoid using names that begin with capital letters, to \
prevent confusion with built\[Hyphen]in Wolfram Language functions."
}], "Text",ExpressionUUID->"53da2f0a-0450-489f-9f4e-60807a2874a0"],

Cell["\<\
Functions can be defined by specifying their values in a sequence of cases:\
\>", "CodeText",
 CellChangeTimes->{
  3.89143287403609*^9},ExpressionUUID->"a408359b-b8ff-4ae2-96dc-9dd22d28c189"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "0", "]"}], "=", "1"}]], "Input",
 CellLabel->
  "In[245]:=",ExpressionUUID->"26b6cd38-8325-4056-9124-da6e2e55bb19"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[245]=",ExpressionUUID->"478ef1f4-f87b-4923-8602-e695d3d7f28f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "1", "]"}], "=", "1"}]], "Input",
 CellLabel->
  "In[246]:=",ExpressionUUID->"bdfa5768-000d-43f8-a652-0bbdf03b7bfb"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[246]=",ExpressionUUID->"4ab99494-8289-407c-b31e-8f509b003564"]
}, Open  ]],

Cell["Any undefined case is left untransformed:", "CodeText",
 CellChangeTimes->{
  3.891432889090723*^9},ExpressionUUID->"21e4d617-2927-4732-ac16-\
22eb009706bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "3", "]"}], ",", 
   RowBox[{"f", "[", "4", "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[247]:=",ExpressionUUID->"8cc8d936-6799-47f2-aac5-fd139658cc37"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", 
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "3", "]"}], ",", 
   RowBox[{"f", "[", "4", "]"}]}], "}"}]], "Output",
 CellLabel->
  "Out[247]=",ExpressionUUID->"1c091adc-6109-4518-b56d-e41966000a33"]
}, Open  ]],

Cell["You can add a generic definition for other inputs:", "CodeText",
 CellChangeTimes->{{3.891445805409173*^9, 3.891445813057624*^9}, {
  3.891445872992538*^9, 
  3.891445877352541*^9}},ExpressionUUID->"61e6bb66-8d09-46b6-99c3-\
bab498fa97f4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", " ", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x", "-", "1"}], "]"}], "+", 
   RowBox[{"f", "[", 
    RowBox[{"x", "-", "2"}], "]"}]}]}]], "Input",
 CellLabel->
  "In[248]:=",ExpressionUUID->"2a93dc83-e2d0-4a66-924b-c0a6dafb788d"],

Cell[TextData[{
 "The _ (referred to as \[OpenCurlyDoubleQuote]blank\[CloseCurlyDoubleQuote]) \
on the left\[Hyphen]hand side is very important; it presents a pattern and is \
discussed in detail ",
 ButtonBox["here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/tutorial/PatternsOverview.\
html"], None},
  ButtonNote->
   "https://reference.wolfram.com/language/tutorial/PatternsOverview.html"],
 ". For now, just remember to put a _ on the left\[Hyphen]hand side, but not \
on the right\[Hyphen]hand side, of your definition. You can impose \
restrictions on the patterns to create different definitions for the same \
function so that it behaves differently for different types of inputs."
}], "Text",
 CellChangeTimes->{{3.891432926826654*^9, 3.8914329288415327`*^9}, {
  3.891445545601561*^9, 3.891445562346394*^9}, {3.891445602792551*^9, 
  3.891445622528749*^9}, {3.891445674423381*^9, 3.891445737736844*^9}, {
  3.8927178651017523`*^9, 
  3.892717874483732*^9}},ExpressionUUID->"2d7caccc-6540-46c5-b78a-\
5fcab22500c3"],

Cell[TextData[{
 "Give different definitions for what ",
 Cell[BoxData[
 "f"], "Input",ExpressionUUID->"810c61c2-b619-4d55-bc43-20da70e2ee32"],
 " should do when applied to a \[OpenCurlyDoubleQuote]u object\
\[CloseCurlyDoubleQuote] or a \[OpenCurlyDoubleQuote]v object\
\[CloseCurlyDoubleQuote]:"
}], "CodeText",
 CellChangeTimes->{3.891432939202942*^9, 
  3.8927179301211967`*^9},ExpressionUUID->"40d489d8-7490-4584-8e8f-\
c01d76c23c8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_Integer", "]"}], ":=", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"x", "-", "1"}], "]"}], "+", 
   RowBox[{"f", "[", 
    RowBox[{"x", "-", "2"}], "]"}]}]}]], "Input",
 CellLabel->
  "In[249]:=",ExpressionUUID->"c911b2d1-568f-4edb-8396-6627b16f745a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_String", "]"}], ":=", 
  "\"\<This function cannot work with a string input\>\""}]], "Input",
 CellLabel->
  "In[250]:=",ExpressionUUID->"72425850-50b4-4929-97df-4a80c7c050c1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", "x_", "]"}], ":=", 
  "\"\<This function only accepts integer inputs\>\""}]], "Input",
 CellLabel->
  "In[251]:=",ExpressionUUID->"5785a21d-f952-4498-a19a-dcfe19b32533"],

Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`xx$$ = False, 
  WolframUTools`Private`size$$ = 400, WolframUTools`Private`neutral$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[1., 0.592156862745098, 0.10196078431372549`], FrameMargins -> 12, 
   FrameStyle -> None, RoundingRadius -> 5, ImageSize -> {240, 65}], 
  WolframUTools`Private`over$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
   FrameMargins -> 12, FrameStyle -> None, RoundingRadius -> 5, 
   ImageSize -> {240, 65}], WolframUTools`Private`chosenAnswers$$ = {0, 0}}, 
  TagBox[GridBox[{
     {
      PaneSelectorBox[{False->
       FrameBox[
        TemplateBox[{
          StyleBox[
          "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
           GrayLevel[1], StripOnInput -> False], 
          TemplateBox[{12}, "Spacer1"], 
          StyleBox[
          "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
           GrayLevel[1], StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1., 0.592156862745098, 0.10196078431372549`],
        FrameMargins->12,
        FrameStyle->None,
        ImageSize->{240, 65},
        RoundingRadius->5,
        StripOnInput->False], True->
       TagBox[
        FrameBox[
         TemplateBox[{
           StyleBox[
           "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
            GrayLevel[1], StripOnInput -> False], 
           TemplateBox[{12}, "Spacer1"], 
           StyleBox[
           "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
            GrayLevel[1], StripOnInput -> False]},
          "RowDefault"],
         Background->RGBColor[
          0.09019607843137255, 0.1607843137254902, 0.25882352941176473`],
         FrameMargins->12,
         FrameStyle->None,
         ImageSize->{240, 65},
         RoundingRadius->5,
         StripOnInput->False],
        EventHandlerTag[{
         "MouseClicked" :> (
           Switch[WolframUTools`Private`xx$$, True, 
             WolframUTools`Private`xx$$ = False, False, 
             WolframUTools`Private`xx$$ = True]; 
           WolframUTools`Private`chosenAnswers$$ = Table[0, 
              
              Length[{{
                "Which of the following shows the correct syntax for defining \
a function in Wolfram Language?", {{"function fun[x] {x + 2}", "Incorrect"}, {
                  "fun (x) = x + 2", "Incorrect"}, {
                  "fun {x, x + 2}", "Incorrect"}, {
                  "fun[x_] := x + 2", "Correct"}}, {4}}, {
                "Which of the following shows the correct syntax for defining \
a function to compute the square of a number provided as its input \
argument?", {{"fun (x) := x^2", 
                   "Incorrect. Input arguments cannot be provided within \
parentheses."}, {"fun[x_] := x^2", "Correct"}, {
                  "fun[x] := x^2", 
                   "Incorrect. The input argument must be presented as a \
pattern."}, {"fun[x_, x^2]", 
                   "Incorrect. This syntax is not used in Wolfram \
Language."}}, {2}}}]]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, Dynamic[
        CurrentValue["MouseOver"]],
       FrameMargins->0,
       ImageSize->Automatic]},
     {
      PaneSelectorBox[{True->
       FrameBox[
        TagBox[GridBox[{
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{
              0 -> "function fun[x] {x + 2}", 1 -> Column[{
                  Style[
                   TextCell["function fun[x] {x + 2}", TextAlignment -> Left],
                    "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell["Incorrect", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> "function fun[x] {x + 2}", 
               3 -> "function fun[x] {x + 2}", 4 -> 
               "function fun[x] {x + 2}"}, {
              0 -> "fun (x) = x + 2", 1 -> "fun (x) = x + 2", 2 -> Column[{
                  Style[
                   TextCell["fun (x) = x + 2", TextAlignment -> Left], "Text",
                    Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell["Incorrect", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 3 -> "fun (x) = x + 2", 4 -> 
               "fun (x) = x + 2"}, {
              0 -> "fun {x, x + 2}", 1 -> "fun {x, x + 2}", 2 -> 
               "fun {x, x + 2}", 3 -> Column[{
                  Style[
                   TextCell["fun {x, x + 2}", TextAlignment -> Left], "Text", 
                   Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell["Incorrect", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 4 -> "fun {x, x + 2}"}, {
              0 -> "fun[x_] := x + 2", 1 -> "fun[x_] := x + 2", 2 -> 
               "fun[x_] := x + 2", 3 -> "fun[x_] := x + 2", 4 -> Column[{
                  Style[
                   TextCell["fun[x_] := x + 2", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = False}, 
             TagBox[GridBox[{
                {"\<\"Which of the following shows the correct syntax for \
defining a function in Wolfram Language?\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"function fun[x] {x + 2}\"", 1 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["function fun[x] {x + 2}", TextAlignment -> Left], 
                    TextCell[
                    "function fun[x] {x + 2}", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Incorrect", TextAlignment -> Left], 
                    TextCell["Incorrect", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> "\"function fun[x] {x + 2}\"", 3 -> 
                    "\"function fun[x] {x + 2}\"", 4 -> 
                    "\"function fun[x] {x + 2}\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"fun (x) = x + 2\"", 1 -> "\"fun (x) = x + 2\"", 2 -> 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["fun (x) = x + 2", TextAlignment -> Left], 
                    TextCell["fun (x) = x + 2", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Incorrect", TextAlignment -> Left], 
                    TextCell["Incorrect", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 3 -> "\"fun (x) = x + 2\"", 4 -> 
                    "\"fun (x) = x + 2\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {3}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"fun {x, x + 2}\"", 1 -> "\"fun {x, x + 2}\"", 2 -> 
                    "\"fun {x, x + 2}\"", 3 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["fun {x, x + 2}", TextAlignment -> Left], 
                    TextCell["fun {x, x + 2}", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Incorrect", TextAlignment -> Left], 
                    TextCell["Incorrect", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 4 -> "\"fun {x, x + 2}\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 3, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {4}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"fun[x_] := x + 2\"", 1 -> "\"fun[x_] := x + 2\"", 
                    2 -> "\"fun[x_] := x + 2\"", 3 -> "\"fun[x_] := x + 2\"", 
                    4 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["fun[x_] := x + 2", TextAlignment -> Left], 
                    TextCell["fun[x_] := x + 2", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 4, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]},
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{
              0 -> "fun (x) := x^2", 1 -> Column[{
                  Style[
                   TextCell["fun (x) := x^2", TextAlignment -> Left], "Text", 
                   Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. Input arguments cannot be provided within \
parentheses.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> "fun (x) := x^2", 3 -> 
               "fun (x) := x^2", 4 -> "fun (x) := x^2"}, {
              0 -> "fun[x_] := x^2", 1 -> "fun[x_] := x^2", 2 -> Column[{
                  Style[
                   TextCell["fun[x_] := x^2", TextAlignment -> Left], "Text", 
                   Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}], 3 -> "fun[x_] := x^2", 4 -> 
               "fun[x_] := x^2"}, {
              0 -> "fun[x] := x^2", 1 -> "fun[x] := x^2", 2 -> 
               "fun[x] := x^2", 3 -> Column[{
                  Style[
                   TextCell["fun[x] := x^2", TextAlignment -> Left], "Text", 
                   Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. The input argument must be presented as a \
pattern.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 4 -> "fun[x] := x^2"}, {
              0 -> "fun[x_, x^2]", 1 -> "fun[x_, x^2]", 2 -> "fun[x_, x^2]", 
               3 -> "fun[x_, x^2]", 4 -> Column[{
                  Style[
                   TextCell["fun[x_, x^2]", TextAlignment -> Left], "Text", 
                   Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. This syntax is not used in Wolfram Language.", 
                    TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = True}, 
             TagBox[GridBox[{
                {"\<\"Which of the following shows the correct syntax for \
defining a function to compute the square of a number provided as its input \
argument?\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   PaneSelectorBox[{0 -> "\"fun (x) := x^2\"", 1 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["fun (x) := x^2", TextAlignment -> Left], 
                    TextCell["fun (x) := x^2", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. Input arguments cannot be provided within \
parentheses.", TextAlignment -> Left], 
                    TextCell[
                    "Incorrect. Input arguments cannot be provided within \
parentheses.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> "\"fun (x) := x^2\"", 3 -> 
                    "\"fun (x) := x^2\"", 4 -> "\"fun (x) := x^2\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 2] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"fun[x_] := x^2\"", 1 -> "\"fun[x_] := x^2\"", 2 -> 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["fun[x_] := x^2", TextAlignment -> Left], 
                    TextCell["fun[x_] := x^2", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 3 -> "\"fun[x_] := x^2\"", 4 -> 
                    "\"fun[x_] := x^2\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 2] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], {3}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"fun[x] := x^2\"", 1 -> "\"fun[x] := x^2\"", 2 -> 
                    "\"fun[x] := x^2\"", 3 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["fun[x] := x^2", TextAlignment -> Left], 
                    TextCell["fun[x] := x^2", TextAlignment -> Left]], "Text",
                     Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. The input argument must be presented as a \
pattern.", TextAlignment -> Left], 
                    TextCell[
                    "Incorrect. The input argument must be presented as a \
pattern.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 4 -> "\"fun[x] := x^2\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 2] == 3, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], {4}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"fun[x_, x^2]\"", 1 -> "\"fun[x_, x^2]\"", 2 -> 
                    "\"fun[x_, x^2]\"", 3 -> "\"fun[x_, x^2]\"", 4 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["fun[x_, x^2]", TextAlignment -> Left], 
                    TextCell["fun[x_, x^2]", TextAlignment -> Left]], "Text", 
                    Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. This syntax is not used in Wolfram Language.",
                     TextAlignment -> Left], 
                    TextCell[
                    "Incorrect. This syntax is not used in Wolfram Language.",
                     TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 2]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 2] == 4, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.92], 
            Thickness[Large]],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{
               GrayLevel[0.97]}}},
          
          GridBoxDividers->{
           "Columns" -> {{False}}, "Rows" -> {False, True, False}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{1}}}],
         "Grid"],
        Background->GrayLevel[0.97],
        FrameMargins->15,
        FrameStyle->Directive[
          GrayLevel[0.92], 
          Thickness[Large]],
        RoundingRadius->0,
        StripOnInput->False], False->
       TemplateBox[{0},
        "Spacer1"]}, Dynamic[WolframUTools`Private`xx$$],
       ImageSize->Automatic]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{
         Scaled[0.8]}}},
    GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0}}}],
   "Grid"],
  DynamicModuleValues:>{}]], "Text",
 CellTags->"answer",ExpressionUUID->"2cf35974-9d09-49d5-9a9c-80781583d431"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pure Functions", "Section",ExpressionUUID->"6d5a3061-d7b7-411a-b0f6-09a1bff9e580"],

Cell[TextData[{
 "Wolfram Language allows the use of ",
 ButtonBox["pure functions",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/tutorial/FunctionalOperations.\
html#17469"], None},
  ButtonNote->
   "https://reference.wolfram.com/language/tutorial/FunctionalOperations.html#\
17469"],
 ", which make it possible to have functions that can be applied to arguments \
without having to define explicit names for the functions."
}], "Text",
 CellChangeTimes->{{3.790448220466221*^9, 3.7904482478758307`*^9}, {
   3.790613998050548*^9, 3.790614003451612*^9}, {3.829820107764647*^9, 
   3.829820139075302*^9}, {3.8316554590477333`*^9, 3.831655478144711*^9}, {
   3.8334522556918983`*^9, 3.833452255695035*^9}, {3.834056023148201*^9, 
   3.83405606326548*^9}, {3.870950835273575*^9, 3.8709509063610983`*^9}, 
   3.8914466065801373`*^9, {3.892718783572323*^9, 
   3.892718830160983*^9}},ExpressionUUID->"b2fa77cf-46a1-412e-b3d7-\
d750011c2111"],

Cell["\<\
You will usually find a pure function defined with & at the end. The argument \
to the function is indicated by #:\
\>", "Text",
 CellChangeTimes->{{3.870950910126292*^9, 3.870950925792701*^9}, {
  3.887132902632431*^9, 3.887132920790333*^9}, {3.892718841664435*^9, 
  3.892718845904923*^9}},ExpressionUUID->"8e607aee-ca9e-4135-bbaf-\
843f00e6db17"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   SuperscriptBox["#", "2"], "+", " ", 
   RowBox[{"3", "#"}], " ", "-", "2"}], "&"}]], "Input",
 CellLabel->
  "In[252]:=",ExpressionUUID->"3ccf3ba8-f2ad-44e3-9f8d-09323ddb54bc"],

Cell["It can be applied to an input directly:", "CodeText",
 CellChangeTimes->{{3.8871329551333637`*^9, 
  3.8871329712991943`*^9}},ExpressionUUID->"ee319231-a104-4216-b9e9-\
dd57a4836fa8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    SuperscriptBox["#", "2"], "+", " ", 
    RowBox[{"3", "#"}], " ", "-", "2"}], "&"}], "[", "42", "]"}]], "Input",
 CellLabel->
  "In[253]:=",ExpressionUUID->"ffb567a7-5d8b-4c4b-af8f-9cc60a00d20a"],

Cell[BoxData["1888"], "Output",
 CellLabel->
  "Out[253]=",ExpressionUUID->"e1b0f9c6-85fc-4242-bca7-75d5cd1ce95c"]
}, Open  ]],

Cell["\<\
Pure functions can take more than one argument (multiple arguments can be \
indicated using #1, #2 and so on):\
\>", "CodeText",
 CellChangeTimes->{{3.790603179065263*^9, 3.790603189831018*^9}, {
  3.870950941889484*^9, 3.870950945649271*^9}, {3.887132988550798*^9, 
  3.887132991041087*^9}, {3.8927188522250977`*^9, 
  3.8927188526545477`*^9}},ExpressionUUID->"4bf90e85-74bd-4f56-93e0-\
630d5f223da4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#1", "+", 
    RowBox[{"2", " ", "#2"}], "+", 
    RowBox[{"#3", "^", "3"}]}], " ", "&"}], "[", 
  RowBox[{"a", ",", "b", ",", "c"}], "]"}]], "Input",
 CellLabel->
  "In[254]:=",ExpressionUUID->"6910530f-0285-4c02-939f-3ddc960e620c"],

Cell[BoxData["84"], "Output",
 CellLabel->
  "Out[254]=",ExpressionUUID->"e00c2767-ed6d-4298-8504-f3a3a4293fb5"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`xx$$ = False, 
  WolframUTools`Private`size$$ = 400, WolframUTools`Private`neutral$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[1., 0.592156862745098, 0.10196078431372549`], FrameMargins -> 12, 
   FrameStyle -> None, RoundingRadius -> 5, ImageSize -> {240, 65}], 
  WolframUTools`Private`over$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
   FrameMargins -> 12, FrameStyle -> None, RoundingRadius -> 5, 
   ImageSize -> {240, 65}], WolframUTools`Private`chosenAnswers$$ = {0}}, 
  TagBox[GridBox[{
     {
      PaneSelectorBox[{False->
       FrameBox[
        TemplateBox[{
          StyleBox[
          "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
           GrayLevel[1], StripOnInput -> False], 
          TemplateBox[{12}, "Spacer1"], 
          StyleBox[
          "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
           GrayLevel[1], StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1., 0.592156862745098, 0.10196078431372549`],
        FrameMargins->12,
        FrameStyle->None,
        ImageSize->{240, 65},
        RoundingRadius->5,
        StripOnInput->False], True->
       TagBox[
        FrameBox[
         TemplateBox[{
           StyleBox[
           "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
            GrayLevel[1], StripOnInput -> False], 
           TemplateBox[{12}, "Spacer1"], 
           StyleBox[
           "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
            GrayLevel[1], StripOnInput -> False]},
          "RowDefault"],
         Background->RGBColor[
          0.09019607843137255, 0.1607843137254902, 0.25882352941176473`],
         FrameMargins->12,
         FrameStyle->None,
         ImageSize->{240, 65},
         RoundingRadius->5,
         StripOnInput->False],
        EventHandlerTag[{
         "MouseClicked" :> (
           Switch[WolframUTools`Private`xx$$, True, 
             WolframUTools`Private`xx$$ = False, False, 
             WolframUTools`Private`xx$$ = True]; 
           WolframUTools`Private`chosenAnswers$$ = Table[0, 
              
              Length[{{
                "Which of the following pure functions subtracts 6 from 3 \
when applied to [3, 6]?", {{
                  "# - # &[3, 6]", 
                   "Incorrect. The slots should be able to identify the first \
and second argument separately."}, {"#1 - #2 &[3, 6]", "Correct"}, {
                  "1# - 2# &[3, 6]", 
                   "Incorrect. To represent the nth argument you must use \
#n."}, {"#[1] - #[2] &[3, 6]", 
                   "Incorrect. To represent the nth argument you must use \
#n."}}, {2}}}]]), Method -> "Preemptive", PassEventsDown -> Automatic, 
          PassEventsUp -> True}]]}, Dynamic[
        CurrentValue["MouseOver"]],
       FrameMargins->0,
       ImageSize->Automatic]},
     {
      PaneSelectorBox[{True->
       FrameBox[
        TagBox[GridBox[{
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{
              0 -> "# - # &[3, 6]", 1 -> Column[{
                  Style[
                   TextCell["# - # &[3, 6]", TextAlignment -> Left], "Text", 
                   Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. The slots should be able to identify the first \
and second argument separately.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> "# - # &[3, 6]", 3 -> 
               "# - # &[3, 6]", 4 -> "# - # &[3, 6]"}, {
              0 -> "#1 - #2 &[3, 6]", 1 -> "#1 - #2 &[3, 6]", 2 -> Column[{
                  Style[
                   TextCell["#1 - #2 &[3, 6]", TextAlignment -> Left], "Text",
                    Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}], 3 -> "#1 - #2 &[3, 6]", 4 -> 
               "#1 - #2 &[3, 6]"}, {
              0 -> "1# - 2# &[3, 6]", 1 -> "1# - 2# &[3, 6]", 2 -> 
               "1# - 2# &[3, 6]", 3 -> Column[{
                  Style[
                   TextCell["1# - 2# &[3, 6]", TextAlignment -> Left], "Text",
                    Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. To represent the nth argument you must use \
#n.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 4 -> "1# - 2# &[3, 6]"}, {
              0 -> "#[1] - #[2] &[3, 6]", 1 -> "#[1] - #[2] &[3, 6]", 2 -> 
               "#[1] - #[2] &[3, 6]", 3 -> "#[1] - #[2] &[3, 6]", 4 -> Column[{
                  Style[
                   TextCell["#[1] - #[2] &[3, 6]", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Incorrect. To represent the nth argument you must use \
#n.", TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = True}, 
             TagBox[GridBox[{
                {"\<\"Which of the following pure functions subtracts 6 from \
3 when applied to [3, 6]?\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   PaneSelectorBox[{0 -> "\"# - # &[3, 6]\"", 1 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["# - # &[3, 6]", TextAlignment -> Left], 
                    TextCell["# - # &[3, 6]", TextAlignment -> Left]], "Text",
                     Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. The slots should be able to identify the \
first and second argument separately.", TextAlignment -> Left], 
                    TextCell[
                    "Incorrect. The slots should be able to identify the \
first and second argument separately.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> "\"# - # &[3, 6]\"", 3 -> 
                    "\"# - # &[3, 6]\"", 4 -> "\"# - # &[3, 6]\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"#1 - #2 &[3, 6]\"", 1 -> "\"#1 - #2 &[3, 6]\"", 2 -> 
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["#1 - #2 &[3, 6]", TextAlignment -> Left], 
                    TextCell["#1 - #2 &[3, 6]", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 3 -> "\"#1 - #2 &[3, 6]\"", 4 -> 
                    "\"#1 - #2 &[3, 6]\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {3}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"1# - 2# &[3, 6]\"", 1 -> "\"1# - 2# &[3, 6]\"", 2 -> 
                    "\"1# - 2# &[3, 6]\"", 3 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["1# - 2# &[3, 6]", TextAlignment -> Left], 
                    TextCell["1# - 2# &[3, 6]", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. To represent the nth argument you must use \
#n.", TextAlignment -> Left], 
                    TextCell[
                    "Incorrect. To represent the nth argument you must use \
#n.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 4 -> "\"1# - 2# &[3, 6]\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 3, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {4}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"#[1] - #[2] &[3, 6]\"", 1 -> 
                    "\"#[1] - #[2] &[3, 6]\"", 2 -> "\"#[1] - #[2] &[3, 6]\"",
                     3 -> "\"#[1] - #[2] &[3, 6]\"", 4 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["#[1] - #[2] &[3, 6]", TextAlignment -> Left], 
                    TextCell["#[1] - #[2] &[3, 6]", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Incorrect. To represent the nth argument you must use \
#n.", TextAlignment -> Left], 
                    TextCell[
                    "Incorrect. To represent the nth argument you must use \
#n.", TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 4, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.92], 
            Thickness[Large]],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{
               GrayLevel[0.97]}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {False, False}},
          
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{1}}}],
         "Grid"],
        Background->GrayLevel[0.97],
        FrameMargins->15,
        FrameStyle->Directive[
          GrayLevel[0.92], 
          Thickness[Large]],
        RoundingRadius->0,
        StripOnInput->False], False->
       TemplateBox[{0},
        "Spacer1"]}, Dynamic[WolframUTools`Private`xx$$],
       ImageSize->Automatic]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{
         Scaled[0.8]}}},
    GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0}}}],
   "Grid"],
  DynamicModuleValues:>{}]], "Text",
 CellTags->"answer",ExpressionUUID->"3c9c0eca-f553-41c2-89d9-4adbb6d44dfa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lists", "Section",ExpressionUUID->"96c5a9c8-d6e3-4b13-9f8b-f3fdf0211b57"],

Cell["\<\
Lists are a basic way to collect things together in Wolfram Language.\
\>", "Text",
 CellChangeTimes->{
  3.783172869487101*^9, {3.790612952063575*^9, 3.790612953176544*^9}, {
   3.829842822607939*^9, 3.829842823213471*^9}, 
   3.892718359789319*^9},ExpressionUUID->"ef7a344b-70fd-4d7e-afd6-\
e97f1ce954f9"],

Cell["Examples of lists:", "CodeText",
 CellChangeTimes->{{3.8298428278610373`*^9, 
  3.829842832000783*^9}},ExpressionUUID->"b2766f54-fd57-4c64-a636-\
1a5e2b32e7b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Input",Expre\
ssionUUID->"3de1ce87-d878-4945-95d9-8ac549c7c8cb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "42", ",", "3.14", ",", 
   InterpretationBox[
    ButtonBox[
     TooltipBox[
      GraphicsBox[{
        {GrayLevel[0], RectangleBox[{0, 0}]}, 
        {GrayLevel[0], RectangleBox[{1, -1}]}, 
        {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
       AspectRatio->1,
       Frame->True,
       FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
       FrameTicks->None,
       ImageSize->
        Dynamic[{
         Automatic, 
          1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
           Magnification])}],
       PlotRangePadding->None],
      "RGBColor[1, 0, 0]"],
     Appearance->None,
     BaseStyle->{},
     BaselinePosition->Baseline,
     ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
       If[
        Not[
         AbsoluteCurrentValue["Deployed"]], 
        SelectionMove[Typeset`box$, All, Expression]; 
        FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
        FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
        FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
        MathLink`CallFrontEnd[
          FrontEnd`AttachCell[Typeset`box$, 
           FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
           Left, Top}, 
           "ClosingActions" -> {
            "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
     DefaultBaseStyle->{},
     Evaluator->Automatic,
     Method->"Preemptive"],
    RGBColor[1, 0, 0],
    Editable->False,
    Selectable->False], ",", "\"\<hello\>\"", ",", " ", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["y", "3"]}]}], ",", 
   Graphics3DBox[
    {RGBColor[0, 1, 0], SphereBox[{0, 0, 0}]},
    ImageSize->{37.09619946984732, Automatic},
    ViewPoint->{1.3, -2.4, 2.},
    ViewVertical->{0., 0., 1.}]}], "}"}]], "Input",ExpressionUUID->"97a7bb68-\
0a5a-4d63-b22c-b6c3b901ce59"],

Cell[TextData[{
 "A ",
 ButtonBox["List",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/List.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/List.html"],
 " can be used as:"
}], "Text",
 CellChangeTimes->{{3.495209008234375*^9, 3.49520915653125*^9}, 
   3.495209919765625*^9, 3.4952106014375*^9, {3.4952106824375*^9, 
   3.495210832234375*^9}, 3.514307848543872*^9, {3.514308058576482*^9, 
   3.514308065607885*^9}, {3.51430841745117*^9, 3.514308419642997*^9}, {
   3.5149152616687326`*^9, 3.514915280523456*^9}, {3.514915328702818*^9, 
   3.5149153375415287`*^9}, 3.514915444638068*^9, {3.688305745551957*^9, 
   3.688305766657547*^9}, {3.688305961022048*^9, 3.688306085007805*^9}, {
   3.6883064506810017`*^9, 3.688306596974015*^9}, 3.688306825757646*^9, {
   3.690294135668993*^9, 3.69029418352706*^9}, 3.693317262121996*^9, {
   3.743511915895496*^9, 3.743511921550941*^9}, 3.790612957691387*^9, {
   3.829996418048388*^9, 3.829996419181045*^9}, 3.834055191560842*^9, 
   3.892717952784671*^9},ExpressionUUID->"cd279f58-4f96-48d0-b844-\
25aef5d94e4d"],

Cell["a container of items", "Item",
 CellChangeTimes->{{3.495209008234375*^9, 3.49520915653125*^9}, 
   3.495209919765625*^9, 3.4952106014375*^9, {3.4952106824375*^9, 
   3.495210832234375*^9}, 3.514307848543872*^9, {3.514308058576482*^9, 
   3.514308065607885*^9}, {3.51430841745117*^9, 3.514308419642997*^9}, {
   3.5149152616687326`*^9, 3.514915280523456*^9}, {3.514915328702818*^9, 
   3.5149153375415287`*^9}, 3.514915444638068*^9, {3.688305745551957*^9, 
   3.688305766657547*^9}, {3.688305961022048*^9, 3.688306085007805*^9}, {
   3.6883064506810017`*^9, 3.688306596974015*^9}, 3.688306825757646*^9, {
   3.690294135668993*^9, 3.6902941989081297`*^9}, 3.690564008081737*^9, {
   3.743515478192889*^9, 3.743515478561688*^9}, {3.78074620946025*^9, 
   3.780746209628209*^9}},ExpressionUUID->"77856c12-8810-485c-813f-\
02564be81d01"],

Cell["a set ", "Item",
 CellChangeTimes->{{3.495209008234375*^9, 3.49520915653125*^9}, 
   3.495209919765625*^9, 3.4952106014375*^9, {3.4952106824375*^9, 
   3.495210832234375*^9}, 3.514307848543872*^9, {3.514308058576482*^9, 
   3.514308065607885*^9}, {3.51430841745117*^9, 3.514308419642997*^9}, {
   3.5149152616687326`*^9, 3.514915280523456*^9}, {3.514915328702818*^9, 
   3.5149153375415287`*^9}, 3.514915444638068*^9, {3.688305745551957*^9, 
   3.688305766657547*^9}, {3.688305961022048*^9, 3.688306085007805*^9}, {
   3.6883064506810017`*^9, 3.688306596974015*^9}, 3.688306825757646*^9, {
   3.690294135668993*^9, 3.6902942079070263`*^9}, {3.743515481256927*^9, 
   3.743515481969584*^9}, {3.780746212484243*^9, 
   3.780746212676231*^9}},ExpressionUUID->"b209ba35-621a-49c7-bd7e-\
af477d52bff5"],

Cell["a vector or matrix ", "Item",
 CellChangeTimes->{{3.495209008234375*^9, 3.49520915653125*^9}, 
   3.495209919765625*^9, 3.4952106014375*^9, {3.4952106824375*^9, 
   3.495210832234375*^9}, 3.514307848543872*^9, {3.514308058576482*^9, 
   3.514308065607885*^9}, {3.51430841745117*^9, 3.514308419642997*^9}, {
   3.5149152616687326`*^9, 3.514915280523456*^9}, {3.514915328702818*^9, 
   3.5149153375415287`*^9}, 3.514915444638068*^9, {3.688305745551957*^9, 
   3.688305766657547*^9}, {3.688305961022048*^9, 3.688306085007805*^9}, {
   3.6883064506810017`*^9, 3.688306596974015*^9}, 3.688306825757646*^9, {
   3.690294135668993*^9, 3.690294222662818*^9}, {3.743515483824732*^9, 
   3.7435154842490807`*^9}, {3.780746215116329*^9, 
   3.780746215348263*^9}},ExpressionUUID->"f8eeb08f-6f9b-4037-8af2-\
56f3289fbb47"],

Cell["A list of variables/expressions:", "Text",
 CellChangeTimes->{
  3.732013265165023*^9, {3.7341019031428337`*^9, 3.734101903829324*^9}, {
   3.7435119307591877`*^9, 
   3.7435119336068983`*^9}},ExpressionUUID->"a7bad7ee-390e-4195-b362-\
8790517bbc85"],

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]}]], "Input",Ex\
pressionUUID->"0bcdd614-5499-42a5-80ce-0b05d12d7ad5"],

Cell["A nested list representing a matrix of integers:", "Text",
 CellChangeTimes->{
  3.7320133264677877`*^9, {3.743511956214058*^9, 
   3.74351195892616*^9}},ExpressionUUID->"4f50bd6e-0c69-4ce9-a131-\
b389ecdcd7d0"],

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}]], "Input",ExpressionUUID->\
"ba3c9764-b854-447e-a811-aa8a29df63fc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellLabel->
  "In[255]:=",ExpressionUUID->"e8a36ed6-5f40-49a6-b83b-fac0e7667f2c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2"},
     {"3", "4"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[255]//MatrixForm=",ExpressionUUID->"ad23725e-2858-43f1-be46-\
8bafee482943"]
}, Open  ]],

Cell["You can use some built-in functions to easily create lists.", "Text",
 CellChangeTimes->{{3.870944572256618*^9, 3.8709445901869097`*^9}, {
  3.891447026273197*^9, 
  3.891447027248644*^9}},ExpressionUUID->"cd33b1b1-c49c-46e1-a834-\
439455693a63"],

Cell[TextData[{
 "Generate a list of numbers up to a maximum value with ",
 ButtonBox["Range",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Range.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Range.html"],
 ":"
}], "Text",
 CellChangeTimes->{{3.870944695994483*^9, 3.8709447188269863`*^9}, {
  3.8927180054434223`*^9, 
  3.892718005445372*^9}},ExpressionUUID->"efd8944b-e893-4226-bca5-\
60cd5c65a745"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "10", "]"}]], "Input",
 CellLabel->
  "In[256]:=",ExpressionUUID->"c1b747dd-a1e5-424e-b438-2bedd003b2fd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellLabel->
  "Out[256]=",ExpressionUUID->"135d286f-c231-4947-a227-70c15b61cacd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", 
  RowBox[{"1.5", ",", "12.5", ",", "0.5"}], "]"}]], "Input",
 CellLabel->
  "In[257]:=",ExpressionUUID->"bcf04880-3771-4e7d-9a9d-5f04f8b8bc75"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1.5`", ",", "2.`", ",", "2.5`", ",", "3.`", ",", "3.5`", ",", "4.`", ",", 
   "4.5`", ",", "5.`", ",", "5.5`", ",", "6.`", ",", "6.5`", ",", "7.`", ",", 
   "7.5`", ",", "8.`", ",", "8.5`", ",", "9.`", ",", "9.5`", ",", "10.`", ",",
    "10.5`", ",", "11.`", ",", "11.5`", ",", "12.`", ",", "12.5`"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[257]=",ExpressionUUID->"83f94a1f-065d-4ab7-a470-98a35dfcac5a"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 ButtonBox["Table",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Table.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Table.html"],
 " to generate a table of values:"
}], "Text",
 CellChangeTimes->{{3.870944733738525*^9, 3.87094474428233*^9}, {
  3.8927180142262*^9, 
  3.892718014228117*^9}},ExpressionUUID->"2ae3d7bd-51b2-404a-8967-\
bb0a030277f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"i", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[258]:=",ExpressionUUID->"5851b29b-e179-412c-be8e-369e9341dda7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellLabel->
  "Out[258]=",ExpressionUUID->"c64ee220-08b5-4ea9-8aba-bbc57f482db8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[259]:=",ExpressionUUID->"6ba84afb-0b8c-406e-b3f0-a005296ae99b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "9", ",", "16", ",", "25"}], "}"}]], "Output",
 CellLabel->
  "Out[259]=",ExpressionUUID->"629f0b8e-27d2-4544-bb69-7fcf8b728bfe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "5", ",", "50", ",", "2.5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[260]:=",ExpressionUUID->"12f46f42-5daf-49af-acbb-a1a91307b064"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "25.`", ",", "56.25`", ",", "100.`", ",", "156.25`", ",", "225.`", ",", 
   "306.25`", ",", "400.`", ",", "506.25`", ",", "625.`", ",", "756.25`", ",",
    "900.`", ",", "1056.25`", ",", "1225.`", ",", "1406.25`", ",", "1600.`", 
   ",", "1806.25`", ",", "2025.`", ",", "2256.25`", ",", "2500.`"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[260]=",ExpressionUUID->"d5c00d95-f47e-4b23-b06f-1aa257a86a31"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"i", "^", "2"}], " ", "+", " ", 
    RowBox[{"j", "^", "3"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[261]:=",ExpressionUUID->"2a17b70b-c91a-4eca-8f48-c80034f453f1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"4", "+", 
      SuperscriptBox["x", "3"]}], ",", 
     RowBox[{"4", "+", 
      SuperscriptBox["y", "3"]}], ",", 
     RowBox[{"4", "+", 
      SuperscriptBox["z", "3"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"81", "+", 
      SuperscriptBox["x", "3"]}], ",", 
     RowBox[{"81", "+", 
      SuperscriptBox["y", "3"]}], ",", 
     RowBox[{"81", "+", 
      SuperscriptBox["z", "3"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"16", "+", 
      SuperscriptBox["x", "3"]}], ",", 
     RowBox[{"16", "+", 
      SuperscriptBox["y", "3"]}], ",", 
     RowBox[{"16", "+", 
      SuperscriptBox["z", "3"]}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[261]=",ExpressionUUID->"2c9350d2-1f99-42af-93ea-11e75e012f7a"]
}, Open  ]],

Cell["\<\
Use the Length function to find the number of elements in a list:\
\>", "Text",
 CellChangeTimes->{{3.870944854585442*^9, 
  3.870944866186249*^9}},ExpressionUUID->"7d6d9327-eec5-4912-8bac-\
9016f0d31aef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "%", "]"}]], "Input",
 CellLabel->
  "In[262]:=",ExpressionUUID->"b5116f84-7ffa-4cc6-8d10-1157bb557915"],

Cell[BoxData["3"], "Output",
 CellLabel->
  "Out[262]=",ExpressionUUID->"3840f2fc-6d2f-40f7-b6e2-6d83749ad682"]
}, Open  ]],

Cell["% is an easy way to refer to the last output:", "Text",
 CellChangeTimes->{{3.887133747789599*^9, 3.88713375555366*^9}, {
  3.892718918570037*^9, 
  3.892718921442684*^9}},ExpressionUUID->"76e0ddc4-f0ab-437d-bc05-\
a90c56325475"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"words", " ", "=", " ", 
  RowBox[{"RandomWord", "[", "10", "]"}]}]], "Input",
 CellLabel->
  "In[263]:=",ExpressionUUID->"cd87aaab-b820-488f-b99a-1b858def854a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"enviable\"\>", ",", "\<\"thrifty\"\>", ",", "\<\"apply\"\>", 
   ",", "\<\"matriculation\"\>", ",", "\<\"snugly\"\>", 
   ",", "\<\"wellness\"\>", ",", "\<\"stress\"\>", ",", "\<\"witless\"\>", 
   ",", "\<\"juncture\"\>", ",", "\<\"ammunition\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[263]=",ExpressionUUID->"effdf2e3-f2e5-4e0f-890f-0dad77c5a349"]
}, Open  ]],

Cell["\<\
The Part function can be used to refer to an element of a list by giving its \
\[OpenCurlyDoubleQuote]index\[CloseCurlyDoubleQuote]:\
\>", "CodeText",
 CellChangeTimes->{
  3.7797994250617943`*^9, {3.780674966728862*^9, 3.780674967288561*^9}, {
   3.8056593502095823`*^9, 3.8056593519006863`*^9}, {3.8299948852267017`*^9, 
   3.829994888737905*^9}, {3.838392401067724*^9, 3.838392401362714*^9}, {
   3.870945352465061*^9, 3.870945361732794*^9}, {3.87094539500012*^9, 
   3.87094540643793*^9}},ExpressionUUID->"3f2cfabc-303d-4664-8b0c-\
a4b7762724a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"words", ",", "2"}], "]"}]], "Input",
 CellLabel->
  "In[264]:=",ExpressionUUID->"cb7b0cd9-f46b-4df2-9153-907cef2b6968"],

Cell[BoxData["\<\"thrifty\"\>"], "Output",
 CellLabel->
  "Out[264]=",ExpressionUUID->"4cea4120-3848-45b3-8894-d59b614ddd4b"]
}, Open  ]],

Cell[TextData[{
 "The shortcut notation ",
 Cell[BoxData[
  RowBox[{"[", 
   RowBox[{"[", " ", "]"}], "]"}]], "Input",ExpressionUUID->
  "5310f9fd-30b1-4f1c-b8f1-38ead11886da"],
 " is used more often:"
}], "CodeText",
 CellChangeTimes->{{3.8056593565103817`*^9, 3.8056593896642017`*^9}, {
  3.829842850710606*^9, 3.829842852024514*^9}, {3.834055216769497*^9, 
  3.834055228880105*^9}},ExpressionUUID->"0b98d772-d415-4985-b0cd-\
97bc15c15bfb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"words", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellLabel->
  "In[265]:=",ExpressionUUID->"3e67e1ca-185d-4b81-a223-f6da887a1392"],

Cell[BoxData["\<\"thrifty\"\>"], "Output",
 CellLabel->
  "Out[265]=",ExpressionUUID->"6fa844ad-b399-4949-bcaf-43b0707d1b4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"words", "[", 
  RowBox[{"[", 
   RowBox[{"-", "1"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[266]:=",ExpressionUUID->"66f26c4c-ed61-4cd2-8ae4-e7becb09cb33"],

Cell[BoxData["\<\"ammunition\"\>"], "Output",
 CellLabel->
  "Out[266]=",ExpressionUUID->"91d47f00-54f4-4c66-aa44-ee63bcb6cf35"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"words", "[", 
  RowBox[{"[", 
   RowBox[{"3", ";;", "5"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[267]:=",ExpressionUUID->"b004d439-4a8c-45d1-a812-e1eb565a4bc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"apply\"\>", ",", "\<\"matriculation\"\>", 
   ",", "\<\"snugly\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[267]=",ExpressionUUID->"36af55f6-46e1-47ab-a57c-b0466ee9e465"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"words", "[", 
  RowBox[{"[", 
   RowBox[{";;", "4"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[268]:=",ExpressionUUID->"52a906b0-fe90-496c-aa6c-6607bebf732f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"enviable\"\>", ",", "\<\"thrifty\"\>", ",", "\<\"apply\"\>", 
   ",", "\<\"matriculation\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[268]=",ExpressionUUID->"1bb5759b-2614-4762-a06a-01372139a783"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"words", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "8"}], "}"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[269]:=",ExpressionUUID->"d2fd3454-c965-43ba-82ff-8903bee3d066"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"enviable\"\>", ",", "\<\"matriculation\"\>", 
   ",", "\<\"witless\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[269]=",ExpressionUUID->"aa48c908-e236-49da-a62d-5b55d47e11b2"]
}, Open  ]],

Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`xx$$ = False, 
  WolframUTools`Private`size$$ = 400, WolframUTools`Private`neutral$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[1., 0.592156862745098, 0.10196078431372549`], FrameMargins -> 12, 
   FrameStyle -> None, RoundingRadius -> 5, ImageSize -> {240, 65}], 
  WolframUTools`Private`over$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
   FrameMargins -> 12, FrameStyle -> None, RoundingRadius -> 5, 
   ImageSize -> {240, 65}], WolframUTools`Private`chosenAnswers$$ = {0}}, 
  TagBox[GridBox[{
     {
      PaneSelectorBox[{False->
       FrameBox[
        TemplateBox[{
          StyleBox[
          "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
           GrayLevel[1], StripOnInput -> False], 
          TemplateBox[{12}, "Spacer1"], 
          StyleBox[
          "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
           GrayLevel[1], StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1., 0.592156862745098, 0.10196078431372549`],
        FrameMargins->12,
        FrameStyle->None,
        ImageSize->{240, 65},
        RoundingRadius->5,
        StripOnInput->False], True->
       TagBox[
        FrameBox[
         TemplateBox[{
           StyleBox[
           "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
            GrayLevel[1], StripOnInput -> False], 
           TemplateBox[{12}, "Spacer1"], 
           StyleBox[
           "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
            GrayLevel[1], StripOnInput -> False]},
          "RowDefault"],
         Background->RGBColor[
          0.09019607843137255, 0.1607843137254902, 0.25882352941176473`],
         FrameMargins->12,
         FrameStyle->None,
         ImageSize->{240, 65},
         RoundingRadius->5,
         StripOnInput->False],
        EventHandlerTag[{
         "MouseClicked" :> (
           Switch[WolframUTools`Private`xx$$, True, 
             WolframUTools`Private`xx$$ = False, False, 
             WolframUTools`Private`xx$$ = True]; 
           WolframUTools`Private`chosenAnswers$$ = Table[0, 
              
              Length[{{
                "Which of the following shows the correct syntax for \
representing a list in Wolfram Language?", {{
                  "myList = [2, a, \"Chicago\"]", 
                   "Lists are not represented using square brackets."}, {
                  "myList = {2, a, \"Chicago\"}", "Correct"}, {
                  "@myList = (2, a, \"Chicago\")", 
                   "Lists are not represented using parentheses."}, {
                  "myList[3] = <2, a, \"Chicago\">", 
                   "Lists are not represented using angular brackets."}}, {
                 2}}}]]), Method -> "Preemptive", PassEventsDown -> Automatic,
           PassEventsUp -> True}]]}, Dynamic[
        CurrentValue["MouseOver"]],
       FrameMargins->0,
       ImageSize->Automatic]},
     {
      PaneSelectorBox[{True->
       FrameBox[
        TagBox[GridBox[{
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{
              0 -> "myList = [2, a, \"Chicago\"]", 1 -> Column[{
                  Style[
                   TextCell[
                   "myList = [2, a, \"Chicago\"]", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Lists are not represented using square brackets.", 
                    TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> 
               "myList = [2, a, \"Chicago\"]", 3 -> 
               "myList = [2, a, \"Chicago\"]", 4 -> 
               "myList = [2, a, \"Chicago\"]"}, {
              0 -> "myList = {2, a, \"Chicago\"}", 1 -> 
               "myList = {2, a, \"Chicago\"}", 2 -> Column[{
                  Style[
                   TextCell[
                   "myList = {2, a, \"Chicago\"}", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}], 3 -> 
               "myList = {2, a, \"Chicago\"}", 4 -> 
               "myList = {2, a, \"Chicago\"}"}, {
              0 -> "@myList = (2, a, \"Chicago\")", 1 -> 
               "@myList = (2, a, \"Chicago\")", 2 -> 
               "@myList = (2, a, \"Chicago\")", 3 -> Column[{
                  Style[
                   TextCell[
                   "@myList = (2, a, \"Chicago\")", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Lists are not represented using parentheses.", 
                    TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 4 -> 
               "@myList = (2, a, \"Chicago\")"}, {
              0 -> "myList[3] = <2, a, \"Chicago\">", 1 -> 
               "myList[3] = <2, a, \"Chicago\">", 2 -> 
               "myList[3] = <2, a, \"Chicago\">", 3 -> 
               "myList[3] = <2, a, \"Chicago\">", 4 -> Column[{
                  Style[
                   TextCell[
                   "myList[3] = <2, a, \"Chicago\">", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "Lists are not represented using angular brackets.", 
                    TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = True}, 
             TagBox[GridBox[{
                {"\<\"Which of the following shows the correct syntax for \
representing a list in Wolfram Language?\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"myList = [2, a, \\\"Chicago\\\"]\"", 1 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "myList = [2, a, \"Chicago\"]", TextAlignment -> Left], 
                    TextCell[
                    "myList = [2, a, \"Chicago\"]", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Lists are not represented using square brackets.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "Lists are not represented using square brackets.", 
                    TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> "\"myList = [2, a, \\\"Chicago\\\"]\"", 3 -> 
                    "\"myList = [2, a, \\\"Chicago\\\"]\"", 4 -> 
                    "\"myList = [2, a, \\\"Chicago\\\"]\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"myList = {2, a, \\\"Chicago\\\"}\"", 1 -> 
                    "\"myList = {2, a, \\\"Chicago\\\"}\"", 2 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "myList = {2, a, \"Chicago\"}", TextAlignment -> Left], 
                    TextCell[
                    "myList = {2, a, \"Chicago\"}", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 3 -> "\"myList = {2, a, \\\"Chicago\\\"}\"", 4 -> 
                    "\"myList = {2, a, \\\"Chicago\\\"}\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {3}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"@myList = (2, a, \\\"Chicago\\\")\"", 1 -> 
                    "\"@myList = (2, a, \\\"Chicago\\\")\"", 2 -> 
                    "\"@myList = (2, a, \\\"Chicago\\\")\"", 3 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "@myList = (2, a, \"Chicago\")", TextAlignment -> Left], 
                    TextCell[
                    "@myList = (2, a, \"Chicago\")", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Lists are not represented using parentheses.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "Lists are not represented using parentheses.", 
                    TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 4 -> "\"@myList = (2, a, \\\"Chicago\\\")\""}, 
                    
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 3, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {4}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"myList[3] = <2, a, \\\"Chicago\\\">\"", 1 -> 
                    "\"myList[3] = <2, a, \\\"Chicago\\\">\"", 2 -> 
                    "\"myList[3] = <2, a, \\\"Chicago\\\">\"", 3 -> 
                    "\"myList[3] = <2, a, \\\"Chicago\\\">\"", 4 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "myList[3] = <2, a, \"Chicago\">", TextAlignment -> Left], 
                    TextCell[
                    "myList[3] = <2, a, \"Chicago\">", TextAlignment -> 
                    Left]], "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "Lists are not represented using angular brackets.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "Lists are not represented using angular brackets.", 
                    TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 4, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.92], 
            Thickness[Large]],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{
               GrayLevel[0.97]}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {False, False}},
          
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{1}}}],
         "Grid"],
        Background->GrayLevel[0.97],
        FrameMargins->15,
        FrameStyle->Directive[
          GrayLevel[0.92], 
          Thickness[Large]],
        RoundingRadius->0,
        StripOnInput->False], False->
       TemplateBox[{0},
        "Spacer1"]}, Dynamic[WolframUTools`Private`xx$$],
       ImageSize->Automatic]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{
         Scaled[0.8]}}},
    GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0}}}],
   "Grid"],
  DynamicModuleValues:>{}]], "Text",
 CellTags->"answer",ExpressionUUID->"545a6094-bf4d-403e-889f-cc6a3896e4c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Doing Things Repeatedly", "Section",ExpressionUUID->"e58b24b7-e764-4943-a6e1-c72df59460a8"],

Cell["\<\
Wolfram Language offers a number of different options when it comes to \
performing any computation repeatedly.\
\>", "Text",
 CellChangeTimes->{{3.82984404967601*^9, 3.829844083672688*^9}, 
   3.892718381259235*^9},ExpressionUUID->"158e1a7b-310b-4463-a045-\
c4d9785ef02f"],

Cell["\<\
Table can be used to repeatedly apply functions to iterators:\
\>", "CodeText",
 CellChangeTimes->{{3.829767727317439*^9, 3.8297677717619753`*^9}, 
   3.829995544895069*^9, {3.8709503518780937`*^9, 3.8709503581332693`*^9}, {
   3.892718051913237*^9, 
   3.892718056697027*^9}},ExpressionUUID->"1d7c97f3-c270-49d6-be4b-\
1b9e308e36f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Total", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{"i", "^", "2"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[270]:=",ExpressionUUID->"8e25f76e-8632-4c7e-abfd-ef96b68550a9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "4", ",", "9", ",", "7", ",", "7", ",", "9", ",", "13", ",", "10",
    ",", "9", ",", "1"}], "}"}]], "Output",
 CellLabel->
  "Out[270]=",ExpressionUUID->"2984a335-3535-4a95-9866-0eeb1722985b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Framed", "[", 
    RowBox[{"c", ",", 
     RowBox[{"Background", "\[Rule]", " ", 
      RowBox[{"RandomColor", "[", "]"}]}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", 
     RowBox[{"Alphabet", "[", "]"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[271]:=",ExpressionUUID->"30fec869-860b-449c-b934-3c24d79d3aed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FrameBox["\<\"a\"\>",
    Background->RGBColor[
     0.16640073164350588`, 0.25004299687828513`, 0.29881218984880054`],
    StripOnInput->False], ",", 
   FrameBox["\<\"b\"\>",
    Background->RGBColor[
     0.5740172163163784, 0.3409316498119994, 0.7649306284287154],
    StripOnInput->False], ",", 
   FrameBox["\<\"c\"\>",
    Background->RGBColor[
     0.19484117704242276`, 0.7478835534068045, 0.8741937856523008],
    StripOnInput->False], ",", 
   FrameBox["\<\"d\"\>",
    Background->RGBColor[
     0.25670739097212825`, 0.3553473751273428, 0.7255661062349064],
    StripOnInput->False], ",", 
   FrameBox["\<\"e\"\>",
    Background->RGBColor[
     0.6587567350172687, 0.8999182799668843, 0.012273551872013844`],
    StripOnInput->False], ",", 
   FrameBox["\<\"f\"\>",
    Background->RGBColor[
     0.5745198287365412, 0.9541466748976206, 0.9130221313734352],
    StripOnInput->False], ",", 
   FrameBox["\<\"g\"\>",
    Background->RGBColor[
     0.7503634753800117, 0.9497302358775919, 0.5982954311884123],
    StripOnInput->False], ",", 
   FrameBox["\<\"h\"\>",
    Background->RGBColor[
     0.276815663398676, 0.23362458709499245`, 0.36543544705848974`],
    StripOnInput->False], ",", 
   FrameBox["\<\"i\"\>",
    Background->RGBColor[
     0.5058495208444234, 0.15557254267091736`, 0.19644369246548976`],
    StripOnInput->False], ",", 
   FrameBox["\<\"j\"\>",
    Background->RGBColor[
     0.09865695930991492, 0.8691682216311623, 0.06257225988864645],
    StripOnInput->False], ",", 
   FrameBox["\<\"k\"\>",
    Background->RGBColor[
     0.5231616513613018, 0.2445110964454973, 0.29853331844882325`],
    StripOnInput->False], ",", 
   FrameBox["\<\"l\"\>",
    Background->RGBColor[
     0.8605675152318255, 0.1314677378329776, 0.8058252206889454],
    StripOnInput->False], ",", 
   FrameBox["\<\"m\"\>",
    Background->RGBColor[
     0.9871220858224403, 0.0753325567549965, 0.5746833447537605],
    StripOnInput->False], ",", 
   FrameBox["\<\"n\"\>",
    Background->RGBColor[
     0.2358149289621272, 0.28233025469438044`, 0.3693567485529128],
    StripOnInput->False], ",", 
   FrameBox["\<\"o\"\>",
    Background->RGBColor[
     0.061332284711481666`, 0.31744296201831923`, 0.17881951782147065`],
    StripOnInput->False], ",", 
   FrameBox["\<\"p\"\>",
    Background->RGBColor[
     0.1261624645169892, 0.4700051619222143, 0.3163404455442649],
    StripOnInput->False], ",", 
   FrameBox["\<\"q\"\>",
    Background->RGBColor[
     0.1480072772914991, 0.43608543396537014`, 0.47991248687055466`],
    StripOnInput->False], ",", 
   FrameBox["\<\"r\"\>",
    Background->RGBColor[
     0.875811007566337, 0.7752694350556986, 0.1765498255920399],
    StripOnInput->False], ",", 
   FrameBox["\<\"s\"\>",
    Background->RGBColor[
     0.2915188248749665, 0.1724603693789668, 0.5060379748402797],
    StripOnInput->False], ",", 
   FrameBox["\<\"t\"\>",
    Background->RGBColor[
     0.006475199372762752, 0.9676149829992493, 0.9285374150204357],
    StripOnInput->False], ",", 
   FrameBox["\<\"u\"\>",
    Background->RGBColor[
     0.09026074022182518, 0.4904862769284688, 0.8891864876567013],
    StripOnInput->False], ",", 
   FrameBox["\<\"v\"\>",
    Background->RGBColor[
     0.8095341112196217, 0.41513179218355845`, 0.9450501522926869],
    StripOnInput->False], ",", 
   FrameBox["\<\"w\"\>",
    Background->RGBColor[
     0.6883322639277782, 0.2061626214534209, 0.31285510154083696`],
    StripOnInput->False], ",", 
   FrameBox["\<\"x\"\>",
    Background->RGBColor[
     0.9280419276708509, 0.7286522736113152, 0.5114976055612401],
    StripOnInput->False], ",", 
   FrameBox["\<\"y\"\>",
    Background->RGBColor[
     0.10940405028524225`, 0.4619395649821849, 0.7726477941227465],
    StripOnInput->False], ",", 
   FrameBox["\<\"z\"\>",
    Background->RGBColor[
     0.5361424868102618, 0.7206092867269258, 0.2846131343724605],
    StripOnInput->False]}], "}"}]], "Output",
 CellLabel->
  "Out[271]=",ExpressionUUID->"ad05b09c-ad5d-4fbf-a55d-69315dd5301b"]
}, Open  ]],

Cell[TextData[{
 ButtonBox["Map",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Map.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Map.html"],
 " can also be used to perform the same operation on every element in a \
list:"
}], "CodeText",
 CellChangeTimes->{{3.831655600875617*^9, 3.831655626239737*^9}, {
   3.8709503668686867`*^9, 3.8709503675166807`*^9}, 
   3.892718066620606*^9},ExpressionUUID->"277c732c-1cfc-4a71-ad74-\
94dec5f912b2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Framed", ",", 
   RowBox[{"Alphabet", "[", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[272]:=",ExpressionUUID->"3b752eac-969c-4067-a96f-0147a8ed6eea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FrameBox["\<\"a\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"b\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"c\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"d\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"e\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"f\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"g\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"h\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"i\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"j\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"k\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"l\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"m\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"n\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"o\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"p\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"q\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"r\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"s\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"t\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"u\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"v\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"w\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"x\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"y\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"z\"\>",
    StripOnInput->False]}], "}"}]], "Output",
 CellLabel->
  "Out[272]=",ExpressionUUID->"01191906-a5f2-4bdb-9fcb-f1aa1a99e7ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Framed", "/@", 
  RowBox[{"Alphabet", "[", "]"}]}]], "Input",
 CellLabel->
  "In[273]:=",ExpressionUUID->"f676fc43-0345-492f-8597-43b70fefd006"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FrameBox["\<\"a\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"b\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"c\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"d\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"e\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"f\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"g\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"h\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"i\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"j\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"k\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"l\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"m\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"n\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"o\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"p\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"q\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"r\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"s\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"t\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"u\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"v\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"w\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"x\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"y\"\>",
    StripOnInput->False], ",", 
   FrameBox["\<\"z\"\>",
    StripOnInput->False]}], "}"}]], "Output",
 CellLabel->
  "Out[273]=",ExpressionUUID->"bebdcf05-1fb1-495a-94fc-312798fbae9c"]
}, Open  ]],

Cell["\<\
Pure functions in conjunction with Map are a powerful tool for repeated \
operations on elements of a list:\
\>", "Text",
 CellChangeTimes->{{3.8709506914071608`*^9, 3.870950713526198*^9}, {
  3.870950973660883*^9, 3.870951002377716*^9}, {3.892718966168367*^9, 
  3.892718966489566*^9}},ExpressionUUID->"8eb3f54a-0352-4bbe-81ed-\
67c1e03c28b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Framed", "[", 
    RowBox[{"#", ",", 
     RowBox[{"Background", "->", 
      RowBox[{"RandomColor", "[", "]"}]}]}], "]"}], "&"}], "/@", 
  RowBox[{"Alphabet", "[", "]"}]}]], "Input",
 CellLabel->
  "In[274]:=",ExpressionUUID->"c4a19d6b-b103-4140-802d-01b329f44dd9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FrameBox["\<\"a\"\>",
    Background->RGBColor[
     0.06977672994487971, 0.8148068088188027, 0.017754907741651893`],
    StripOnInput->False], ",", 
   FrameBox["\<\"b\"\>",
    Background->RGBColor[
     0.6050928901371935, 0.36110094825246564`, 0.37688079080698067`],
    StripOnInput->False], ",", 
   FrameBox["\<\"c\"\>",
    Background->RGBColor[
     0.13179977461293824`, 0.9827518846983341, 0.49207650543590353`],
    StripOnInput->False], ",", 
   FrameBox["\<\"d\"\>",
    Background->RGBColor[
     0.01715241246346455, 0.45283579266936025`, 0.3912389027808174],
    StripOnInput->False], ",", 
   FrameBox["\<\"e\"\>",
    Background->RGBColor[
     0.4161418229074225, 0.008800072543137416, 0.6048211202572897],
    StripOnInput->False], ",", 
   FrameBox["\<\"f\"\>",
    Background->RGBColor[
     0.49274622916716937`, 0.5760700238576466, 0.860182387579804],
    StripOnInput->False], ",", 
   FrameBox["\<\"g\"\>",
    Background->RGBColor[
     0.852031100438555, 0.19407550406435958`, 0.7117163452043964],
    StripOnInput->False], ",", 
   FrameBox["\<\"h\"\>",
    Background->RGBColor[
     0.6655036159000614, 0.6423989569227837, 0.41736585501688706`],
    StripOnInput->False], ",", 
   FrameBox["\<\"i\"\>",
    Background->RGBColor[
     0.10997006527163866`, 0.7873403133598815, 0.7013809644562821],
    StripOnInput->False], ",", 
   FrameBox["\<\"j\"\>",
    Background->RGBColor[
     0.011990368578333133`, 0.31804836621954125`, 0.5670399164353239],
    StripOnInput->False], ",", 
   FrameBox["\<\"k\"\>",
    Background->RGBColor[
     0.23454427597453353`, 0.029855963148733844`, 0.5499242757163507],
    StripOnInput->False], ",", 
   FrameBox["\<\"l\"\>",
    Background->RGBColor[
     0.35325682229994326`, 0.7450502421396707, 0.33671712409502685`],
    StripOnInput->False], ",", 
   FrameBox["\<\"m\"\>",
    Background->RGBColor[
     0.7601433167649536, 0.6473478626807592, 0.5207850937571195],
    StripOnInput->False], ",", 
   FrameBox["\<\"n\"\>",
    Background->RGBColor[
     0.5497935545100525, 0.03824730608912308, 0.28571917893298626`],
    StripOnInput->False], ",", 
   FrameBox["\<\"o\"\>",
    Background->RGBColor[
     0.1646440070265034, 0.4302030961780867, 0.9530027996702846],
    StripOnInput->False], ",", 
   FrameBox["\<\"p\"\>",
    Background->RGBColor[
     0.7258914777820102, 0.12305905088445313`, 0.2107907428920126],
    StripOnInput->False], ",", 
   FrameBox["\<\"q\"\>",
    Background->RGBColor[
     0.8390006282089213, 0.7814904051298226, 0.04025337117491756],
    StripOnInput->False], ",", 
   FrameBox["\<\"r\"\>",
    Background->RGBColor[
     0.4664195046360091, 0.6700914116476622, 0.15172661539866872`],
    StripOnInput->False], ",", 
   FrameBox["\<\"s\"\>",
    Background->RGBColor[
     0.9981469968890684, 0.27875142702328914`, 0.3644932883274292],
    StripOnInput->False], ",", 
   FrameBox["\<\"t\"\>",
    Background->RGBColor[
     0.2718668706019507, 0.28816243604606995`, 0.5768476516238805],
    StripOnInput->False], ",", 
   FrameBox["\<\"u\"\>",
    Background->RGBColor[
     0.33381018339450796`, 0.7921172312358815, 0.4351681261420899],
    StripOnInput->False], ",", 
   FrameBox["\<\"v\"\>",
    Background->RGBColor[
     0.36998307342688164`, 0.16142633117283745`, 0.3840302023620108],
    StripOnInput->False], ",", 
   FrameBox["\<\"w\"\>",
    Background->RGBColor[
     0.042424598045291306`, 0.5921034372769751, 0.9292271564929904],
    StripOnInput->False], ",", 
   FrameBox["\<\"x\"\>",
    Background->RGBColor[
     0.7749172934763475, 0.8317948467846354, 0.503683224467806],
    StripOnInput->False], ",", 
   FrameBox["\<\"y\"\>",
    Background->RGBColor[
     0.883386853985406, 0.8228996432347748, 0.10070141173475067`],
    StripOnInput->False], ",", 
   FrameBox["\<\"z\"\>",
    Background->RGBColor[
     0.6748126751317776, 0.5231491375806092, 0.8996655026604559],
    StripOnInput->False]}], "}"}]], "Output",
 CellLabel->
  "Out[274]=",ExpressionUUID->"8b3b1eeb-bd1f-48ac-9da7-ef05d1e81961"]
}, Open  ]],

Cell["\<\
In Wolfram Language, many functions are also automatically \
\[OpenCurlyDoubleQuote]listable\[CloseCurlyDoubleQuote], so that they are \
always applied to every element in a list:\
\>", "CodeText",
 CellChangeTimes->{
  3.783174332841734*^9, 3.82984378658018*^9, {3.829995469803046*^9, 
   3.829995471475079*^9}, {3.831654935221808*^9, 3.8316549362415657`*^9}, {
   3.831655261774324*^9, 3.8316552901888723`*^9}, 3.870883998608624*^9, {
   3.870950480269782*^9, 3.870950480741942*^9}, 
   3.892718385294546*^9},ExpressionUUID->"0eba2c66-e2ee-48a6-9201-\
2f7c647f6ce1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", "E", "]"}]], "Input",
 CellLabel->
  "In[275]:=",ExpressionUUID->"f6f3a482-f9a6-4c5d-81a5-265147b26a9d"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[275]=",ExpressionUUID->"d8029f88-c312-42f9-b8d8-b65fd5d706fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Log", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c"}], "}"}], "]"}]], "Input",
 CellLabel->
  "In[276]:=",ExpressionUUID->"2a14306d-f590-4955-88fc-92dfef15d602"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Log", "[", "2", "]"}], ",", 
   RowBox[{"Log", "[", "9", "]"}], ",", 
   RowBox[{"Log", "[", "4", "]"}]}], "}"}]], "Output",
 CellLabel->
  "Out[276]=",ExpressionUUID->"ac79b5ec-02c3-49f0-b02b-b62ff2854b43"]
}, Open  ]],

Cell[TextData[{
 "The more traditional ",
 ButtonBox["Looping Constructs",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/guide/LoopingConstructs.html"]\
, None},
  ButtonNote->
   "https://reference.wolfram.com/language/guide/LoopingConstructs.html"],
 " of ",
 ButtonBox["For",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/For.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/For.html"],
 ", ",
 ButtonBox["While",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/While.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/While.html"],
 " and ",
 ButtonBox["Do",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Do.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Do.html"],
 " are also available in Wolfram Language."
}], "Text",
 CellChangeTimes->{{3.83277264829939*^9, 3.832772696173972*^9}, 
   3.8927180961496973`*^9, 
   3.892718388972931*^9},ExpressionUUID->"1aaf6919-3dd0-4f66-9143-\
178dab47ff75"],

Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`xx$$ = False, 
  WolframUTools`Private`size$$ = 400, WolframUTools`Private`neutral$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[1., 0.592156862745098, 0.10196078431372549`], FrameMargins -> 12, 
   FrameStyle -> None, RoundingRadius -> 5, ImageSize -> {240, 65}], 
  WolframUTools`Private`over$$ = Framed[
   Row[{
     Style["\[LightBulb]", "Text", FontSize -> 24, FontColor -> GrayLevel[1]], 
     Spacer[12], 
     Style[
     "Check Your Understanding", "Text", FontSize -> 16, FontColor -> 
      GrayLevel[1]]}], Background -> 
   RGBColor[0.09019607843137255, 0.1607843137254902, 0.25882352941176473`], 
   FrameMargins -> 12, FrameStyle -> None, RoundingRadius -> 5, 
   ImageSize -> {240, 65}], WolframUTools`Private`chosenAnswers$$ = {0}}, 
  TagBox[GridBox[{
     {
      PaneSelectorBox[{False->
       FrameBox[
        TemplateBox[{
          StyleBox[
          "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
           GrayLevel[1], StripOnInput -> False], 
          TemplateBox[{12}, "Spacer1"], 
          StyleBox[
          "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
           GrayLevel[1], StripOnInput -> False]},
         "RowDefault"],
        Background->RGBColor[1., 0.592156862745098, 0.10196078431372549`],
        FrameMargins->12,
        FrameStyle->None,
        ImageSize->{240, 65},
        RoundingRadius->5,
        StripOnInput->False], True->
       TagBox[
        FrameBox[
         TemplateBox[{
           StyleBox[
           "\"\[LightBulb]\"", "Text", FontSize -> 24, FontColor -> 
            GrayLevel[1], StripOnInput -> False], 
           TemplateBox[{12}, "Spacer1"], 
           StyleBox[
           "\"Check Your Understanding\"", "Text", FontSize -> 16, FontColor -> 
            GrayLevel[1], StripOnInput -> False]},
          "RowDefault"],
         Background->RGBColor[
          0.09019607843137255, 0.1607843137254902, 0.25882352941176473`],
         FrameMargins->12,
         FrameStyle->None,
         ImageSize->{240, 65},
         RoundingRadius->5,
         StripOnInput->False],
        EventHandlerTag[{
         "MouseClicked" :> (
           Switch[WolframUTools`Private`xx$$, True, 
             WolframUTools`Private`xx$$ = False, False, 
             WolframUTools`Private`xx$$ = True]; 
           WolframUTools`Private`chosenAnswers$$ = Table[0, 
              
              Length[{{
                "Select the expression that results in the list {x, x^2, x^4, \
x^8}.", {{"Table[x^2^n, {n, 0, 3}]", 
                   "This is correct, but look for a more suitable answer."}, {
                  "NestList[#^2 &, x, 3]", 
                   "This is correct, but look for a more suitable answer."}, {
                  "FoldList[Power, x, {2, 2, 2}]", 
                   "This is correct, but look for a more suitable answer."}, {
                  "All of the above", "Correct"}}, {4}}}]]), Method -> 
          "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> True}]]},
        Dynamic[
        CurrentValue["MouseOver"]],
       FrameMargins->0,
       ImageSize->Automatic]},
     {
      PaneSelectorBox[{True->
       FrameBox[
        TagBox[GridBox[{
           {
            
            DynamicModuleBox[{
             WolframUTools`Private`base$$ = {{
              0 -> "Table[x^2^n, {n, 0, 3}]", 1 -> Column[{
                  Style[
                   TextCell["Table[x^2^n, {n, 0, 3}]", TextAlignment -> Left],
                    "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "This is correct, but look for a more suitable answer.", 
                    TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 2 -> "Table[x^2^n, {n, 0, 3}]", 
               3 -> "Table[x^2^n, {n, 0, 3}]", 4 -> 
               "Table[x^2^n, {n, 0, 3}]"}, {
              0 -> "NestList[#^2 &, x, 3]", 1 -> "NestList[#^2 &, x, 3]", 2 -> 
               Column[{
                  Style[
                   TextCell["NestList[#^2 &, x, 3]", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "This is correct, but look for a more suitable answer.", 
                    TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 3 -> "NestList[#^2 &, x, 3]", 4 -> 
               "NestList[#^2 &, x, 3]"}, {
              0 -> "FoldList[Power, x, {2, 2, 2}]", 1 -> 
               "FoldList[Power, x, {2, 2, 2}]", 2 -> 
               "FoldList[Power, x, {2, 2, 2}]", 3 -> Column[{
                  Style[
                   TextCell[
                   "FoldList[Power, x, {2, 2, 2}]", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[
                    Rational[4, 9], 0, 0]], 
                  Style[
                   TextCell[
                   "This is correct, but look for a more suitable answer.", 
                    TextAlignment -> Left], "Text", 
                   RGBColor[
                    Rational[2, 3], 0, 0]]}], 4 -> 
               "FoldList[Power, x, {2, 2, 2}]"}, {
              0 -> "All of the above", 1 -> "All of the above", 2 -> 
               "All of the above", 3 -> "All of the above", 4 -> Column[{
                  Style[
                   TextCell["All of the above", TextAlignment -> Left], 
                   "Text", Bold, 
                   RGBColor[0, 
                    Rational[4, 9], 0]], 
                  Style[
                   TextCell["Correct", TextAlignment -> Left], "Text", 
                   RGBColor[0, 
                    Rational[2, 3], 0]]}]}}, 
             WolframUTools`Private`incorrect$$ = False}, 
             TagBox[GridBox[{
                {"\<\"Select the expression that results in the list {x, x^2, \
x^4, x^8}.\"\>"},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {1}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"Table[x^2^n, {n, 0, 3}]\"", 1 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["Table[x^2^n, {n, 0, 3}]", TextAlignment -> Left], 
                    TextCell[
                    "Table[x^2^n, {n, 0, 3}]", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "This is correct, but look for a more suitable answer.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "This is correct, but look for a more suitable answer.", 
                    TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 2 -> "\"Table[x^2^n, {n, 0, 3}]\"", 3 -> 
                    "\"Table[x^2^n, {n, 0, 3}]\"", 4 -> 
                    "\"Table[x^2^n, {n, 0, 3}]\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 1, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {2}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"NestList[#^2 &, x, 3]\"", 1 -> 
                    "\"NestList[#^2 &, x, 3]\"", 2 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["NestList[#^2 &, x, 3]", TextAlignment -> Left], 
                    TextCell["NestList[#^2 &, x, 3]", TextAlignment -> Left]],
                     "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "This is correct, but look for a more suitable answer.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "This is correct, but look for a more suitable answer.", 
                    TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 3 -> "\"NestList[#^2 &, x, 3]\"", 4 -> 
                    "\"NestList[#^2 &, x, 3]\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 2, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {3}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"FoldList[Power, x, {2, 2, 2}]\"", 1 -> 
                    "\"FoldList[Power, x, {2, 2, 2}]\"", 2 -> 
                    "\"FoldList[Power, x, {2, 2, 2}]\"", 3 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "FoldList[Power, x, {2, 2, 2}]", TextAlignment -> Left], 
                    TextCell[
                    "FoldList[Power, x, {2, 2, 2}]", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[
                    Rational[4, 9], 0, 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell[
                    "This is correct, but look for a more suitable answer.", 
                    TextAlignment -> Left], 
                    TextCell[
                    "This is correct, but look for a more suitable answer.", 
                    TextAlignment -> Left]], "Text", 
                    RGBColor[
                    Rational[2, 3], 0, 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 4 -> "\"FoldList[Power, x, {2, 2, 2}]\""}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 3, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]},
                {
                 TemplateBox[{
                   RadioButtonBox[
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], {4}], 
                   TemplateBox[{10}, "Spacer1"], 
                   
                   PaneSelectorBox[{
                    0 -> "\"All of the above\"", 1 -> "\"All of the above\"", 
                    2 -> "\"All of the above\"", 3 -> "\"All of the above\"", 
                    4 -> TagBox[
                    GridBox[{{
                    StyleBox[
                    InterpretationBox[
                    Cell["All of the above", TextAlignment -> Left], 
                    TextCell["All of the above", TextAlignment -> Left]], 
                    "Text", Bold, 
                    RGBColor[0, 
                    Rational[4, 9], 0], StripOnInput -> False]}, {
                    StyleBox[
                    InterpretationBox[
                    Cell["Correct", TextAlignment -> Left], 
                    TextCell["Correct", TextAlignment -> Left]], "Text", 
                    RGBColor[0, 
                    Rational[2, 3], 0], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, 
                    Dynamic[
                    Part[WolframUTools`Private`chosenAnswers$$, 1]], 
                    ImageSize -> Automatic, BaselinePosition -> Dynamic[
                    If[Part[WolframUTools`Private`chosenAnswers$$, 1] == 4, 
                    Scaled[0.7], Automatic]]]},
                  "Row",
                  DisplayFunction->(PaneBox[
                    RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}], Alignment -> 
                    Top]& ),
                  InterpretationFunction->(RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Top"}]}], "]"}]& )]}
               },
               BaseStyle->"Text",
               DefaultBaseStyle->"Column",
               GridBoxAlignment->{"Columns" -> {{Left}}},
               
               GridBoxItemSize->{
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
              "Column"],
             DynamicModuleValues:>{}]}
          },
          AutoDelete->False,
          FrameStyle->Directive[
            GrayLevel[0.92], 
            Thickness[Large]],
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxBackground->{"Columns" -> {{
               GrayLevel[0.97]}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {False, False}},
          
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{1}}}],
         "Grid"],
        Background->GrayLevel[0.97],
        FrameMargins->15,
        FrameStyle->Directive[
          GrayLevel[0.92], 
          Thickness[Large]],
        RoundingRadius->0,
        StripOnInput->False], False->
       TemplateBox[{0},
        "Spacer1"]}, Dynamic[WolframUTools`Private`xx$$],
       ImageSize->Automatic]}
    },
    AutoDelete->False,
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{
         Scaled[0.8]}}},
    GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0}}}],
   "Grid"],
  DynamicModuleValues:>{}]], "Text",
 CellTags->"answer",ExpressionUUID->"f31de257-a524-4de1-8bc8-7b69b5eefe24"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",ExpressionUUID->"2080476f-828a-4d5c-b06d-f020c63c80eb"],

Cell[TextData[ButtonBox["Expressions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/tutorial/ExpressionsOverview.\
html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/tutorial/ExpressionsOverview.html"]]\
, "Item",
 CellChangeTimes->{{3.871555093525663*^9, 3.871555105088397*^9}, {
  3.871555154982203*^9, 
  3.871555154993108*^9}},ExpressionUUID->"51825842-d28a-45c4-adc5-\
86f02d1698c2"],

Cell[TextData[ButtonBox["Lists",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/tutorial/ListsOverview.html"], 
   None},
 ButtonNote->
  "https://reference.wolfram.com/language/tutorial/ListsOverview.html"]], \
"Item",
 CellChangeTimes->{{3.871555093525663*^9, 3.871555106949242*^9}, {
  3.871555171746525*^9, 
  3.87155517175706*^9}},ExpressionUUID->"2f3c3649-cd3c-46f9-91b6-\
d1b6b6a337ea"],

Cell[TextData[ButtonBox["Associations",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/guide/Associations.html"], 
   None},
 ButtonNote->
  "https://reference.wolfram.com/language/guide/Associations.html"]], "Item",
 CellChangeTimes->{{3.871555093525663*^9, 3.871555109430976*^9}, {
  3.871555186845499*^9, 
  3.8715551868558397`*^9}},ExpressionUUID->"68907250-3787-4d1c-b4a5-\
09481ac4533f"],

Cell[TextData[ButtonBox["Computation with Structured Datasets",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/guide/\
ComputationWithStructuredDatasets.html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/guide/\
ComputationWithStructuredDatasets.html"]], "Item",
 CellChangeTimes->{{3.871555093525663*^9, 3.871555117125867*^9}, {
  3.8715552075934877`*^9, 
  3.8715552076039553`*^9}},ExpressionUUID->"959f7780-1020-4a51-bbdb-\
ab2a584718c3"],

Cell[TextData[ButtonBox["Defining Variables and Functions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/guide/VariablesAndFunctions.\
html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/guide/VariablesAndFunctions.html"]],\
 "Item",
 CellChangeTimes->{{3.871555093525663*^9, 3.871555123662867*^9}, {
  3.871555226211705*^9, 
  3.871555226222189*^9}},ExpressionUUID->"30cb760e-7d2c-44ff-8490-\
c0253eb60b61"],

Cell[TextData[ButtonBox["Functions and Programs",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/tutorial/\
FunctionsAndProgramsOverview.html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/tutorial/\
FunctionsAndProgramsOverview.html"]], "Item",
 CellChangeTimes->{{3.871555093525663*^9, 3.871555128157143*^9}, {
  3.87155525035402*^9, 
  3.871555250363964*^9}},ExpressionUUID->"a476f672-c840-4c3c-a030-\
7d22391fe792"],

Cell[TextData[ButtonBox["Functional Operations",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/tutorial/\
FunctionalOperationsOverview.html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/tutorial/\
FunctionalOperationsOverview.html"]], "Item",
 CellChangeTimes->{{3.871555093525663*^9, 3.871555133959507*^9}, {
  3.871555272100408*^9, 
  3.871555272110971*^9}},ExpressionUUID->"57735141-211f-44ee-8895-\
ebb00a4d17a7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initialization", "Section",ExpressionUUID->"2e79852a-321b-4b25-bb7c-46a590f2a34f"],

Cell[BoxData[
 RowBox[{"Clear", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 InitializationCell->True,
 CellLabel->
  "In[216]:=",ExpressionUUID->"44e3e1da-b0a2-492b-b285-6097fba51ec3"]
}, Open  ]]
}, Open  ]]
},
Editable->True,
Saveable->True,
ScreenStyleEnvironment->"Working",
WindowToolbars->{},
PageWidth->Automatic,
WindowSize->{1024, 768},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"Syntax and Programming",
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{
       Cell[
        BoxData[
         RowBox[{
           Cell[
            BoxData[
             ButtonBox[
              TagBox[
               TooltipBox[
                GraphicsBox[{
                  Thickness[0.022727272727272728`], {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{0., 40.099998474121094`}, {44., 
                    40.099998474121094`}, {44., 31.999998092651367`}, {0., 
                    31.999998092651367`}, {0., 40.099998474121094`}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{0., 24.099998474121094`}, {44., 
                    24.099998474121094`}, {44., 15.999998092651367`}, {0., 
                    15.999998092651367`}, {0., 24.099998474121094`}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{0., 8.099998474121094}, {44., 
                    8.099998474121094}, {44., 0.}, {0., 0.}, {0., 
                    8.099998474121094}}}]}}, {
                 ImagePadding -> {{0, 0}, {15, 15}}, AspectRatio -> Automatic,
                   ImageSize -> {44., 41.}, 
                  PlotRange -> {{0., 44.}, {0., 40.099998474121094`}}}], 
                "Table of Contents", TooltipStyle -> "TextStyling"], #& ], 
              BaseStyle -> "Hyperlink", Evaluator -> Automatic, Method -> 
              "Preemptive", ButtonFunction :> If[FileNameTake[
                  Directory[], {2, 2}] == "wolframcloud", 
                SystemOpen[
                "https://www.wolframcloud.com/obj/online-courses/Published/\
WL101/WL101-QuickStartToWolframTech-TableOfContents.nb"], 
                SystemOpen[
                 FileNameJoin[{
                   NotebookDirectory[], 
                   "WL101-QuickStartToWolframTech-TableOfContents.nb"}]]]]]], 
           "Quick Start to Wolfram Tech"}]], "DockedTitle", 
        CellMargins -> {{0, 0}, {0, 0}}, 
        StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
        CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
        CellFrameMargins -> {{20, 20}, {15, 15}}, LineSpacing -> {1, 4}, 
        LanguageCategory -> "NaturalLanguage", CounterIncrements -> "Title", 
        CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
          "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {
          "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
          "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}}, MenuSortingValue -> 
        1100, MenuCommandKey :> First[{"1"}], FontFamily -> "Source Sans Pro",
         FontSize -> 34, FontTracking -> -0.5, FontColor -> GrayLevel[1], 
        Background -> RGBColor[
          Rational[22, 255], 
          Rational[8, 51], 
          Rational[21, 85]], Alignment -> {Left, Center}], 
       PaneBox[
        GraphicsBox[{
          Thickness[0.0022222222222222222`], {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}}}, CompressedData["
1:eJxtlTFo20AUhtUGAoVsgUC3dvEcEBQ8xciOQsAgpZ4sbCHrUpEh0EHQ2ZOh
kM1LtBkKmrIFAtkEgUBBQ8AQ8ObJEMiWKZAhL/p/YZ2wwZy+e/+9+9+7s/w9
/P3z15ZhGJ/keyrfz0bxCaKboCXjWTQ5+Rhb5nT0MWb5zhH4X8FB1LDB1wXL
0yHGjPGog3U511+0Mf9Izi3olyPkMQueJU8Fj5OFhfkXbX2Wv5G7Hei/hPR3
iPx7IeYX5EZIX/R7R33XQfw+pF+NZT8Hef4znjr0XebTOIhWDuYfyNsu9pvT
z1eNxVct3qzFbZf9Knjf7GksTzWeubqfexd5b0t/1KfUGyeI/y34Id/heSuN
xddGlifyk9rEpV581Pimxqliv7g+UVV/cg4K868u5sdc/8x6/jC+YP3nqlq/
1EP9FfvRZ3zCfK6q9nOWHCv022S8pZDnxcG4W/bvAByPdO4FZN6niV+Ni2JY
ZTkfD/669H/lYf+Y+8/IU9Yz9dg31j/xoMsYj6mfc33A+JL5u161f/K786r9
lXtKPfovH+63TV72dc40Fn8b+TJJqA+Gm7jUy+9YYznHQS3foOpXzntQq4/6
8v43qU80Xp83uOz/Wt8sz5/5Guy3PUB/d7X91vejx/wZ3x8J61nZ4Nsh6+T7
aM77gPdnlj8PMR93WLePMW1D963gcbSyoDN5v1oW/fn0Y2G/PuNZm3l9+uL7
+YL6mO/L1GddNvvIuHkE/qH9P2j/F++mXnJA
            "]]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{1, 
            4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 
            3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxtVD1IHFEQfkQIBFLYCjYhIARswlWCmKfn3+np7dnZSXj73hUHEWwtrkqV
QhCE7bYSAnap0r3K6hVWgp1wIAgphICQzrmdb3LzQhaW4dv5n/lm333+clDO
GGNe0fsRkp4j7weWZcdm+GFrIuvqsMHGjDYn0rbawHaD9R+AzTr7vR6w3e81
1t+FiYzpLfD3Bo/8wir7HQe2P7GIFxDP8vexB/7E8S+ARyscdznDxtyXuf5b
mftvCraQYm9Zf+10fXVVOV1/TEOX99dxun/bajk9n5jmnZ6fMbOO8/B8BVP/
HY3p2dX+tIeujk917en8NOd9XR/F7+n6aa+F7o/sC4430/R/kxb7iAc87HMd
Z8BXfbYfN3jgr6G3XmPK9w9+BL7sc32LIY9/HHT+mK6Crk/4I/XX1RvhZw/x
Brp/4ed0PszfmLpdxBF+7mgs/KdK3P8w7X+bv98CJ9zDGPuKGyyf4H8p9wB+
xTbbvxf+tTE/YLuGvCXb/VhleV6iftxLbPDIP+Be/og98JLXOKbTDJP02p/u
xev41GfI87eCrs+YQu6zzfbDoPujyEH3T/cnevwvKtkv7qGW/8O2xtP51+K/
o/3p6er45L+n89fVnNyD6Ht5/bGn+6O5Ffx9Fvm/Fno+dfWz0PO7Sb8KPV/a
M/i+lOEj/1xqLPsTf9mvxJf9T/P/5QfshT9c/5RfBv09Od2/8FPmI/yV+Qm/
Zb4Z/18AiE9a0w==
            "]]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}}}, CompressedData["
1:eJxtkz1LA0EQhlcFQbAQUqVTAqkPFlIJuUvQemMXsDgEF+8DFAKCYJFKEOxS
bZcqlV0qweJ+wBWBgGAXEALW16ZwvXkXd4IHy96z887szNzcydXtxfWeEGLH
rq5du6J+Qrm8Cem1G3o81rPwd5+ab8ZFuWEsxFHicyhbCe1zsExIV4D7pDef
8Fewi4jiXyJeu+ZYa+iHEenuwAb2excP/o+4X/Z8tvkxXpSHyudYnyuq96Hm
QI6Uf18gJ7An4Lny812UpeL1rJRfbyArxfshBn6/Yr0Pbrj8BtAxdt/Dsfte
22yVA4r7kf7Hf/ELxkX5ynhqzBY/p36+tv+pX4/tT+rXa/sD/dr1B/alQt9T
8nuD/tTlC3sHPIZ/AP2QsRDHjMd6jXl9yXyO9Szj9veM+lZhHhdkN82Izr8y
Og/BFfQjzNsGPI8or4McOugbYJrHqWnmqKeHvHOKU/ZI18qh61O+7Zx2De4g
3uiM9gnjWD8hPv+fa/4BI1HiVA==
            "]]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
            0}}}, CompressedData["
1:eJxtlL9Lw0AUx68KguAgCEIRhKIIboVMTl7qoiD2qovdgmC2mExCt4Dg5CAI
4m2BgiA4FJwKHQJOQoaAU8HBP6BDoZObZ9/38F3pwXF88n7ce9/jpXYRn14u
CiEqZh+YvSCmS3o3V9KcZTFSknGmh0d/ZxCuJ/NYiPSQ+89yGj43OEvPa1D8
Ldn10Ke4e7D2yf4IbvsU10W+Hfj3cJ+Ycl4MbD5JXMCeg79w/5uk72NbH1jE
nE1/sWtXc9msfdJlN5rH//7SYemdORyE4QxfR7xeo1fE+zH6ROgT+brwn+C+
HuXTVZ/q6SNeQs93cAr7h80PfUvkX2lwNv4OZ7qqOJfFsUJdsHcUvy/TGvYB
uK94vXXvU/F+hPhWvN+6N1Fcj0z/KK6XWS2uZxAutbjelu17WLbvNctPWtv4
hLMQ55iH9gn8Hc6L7YTOuybFb9n5adJZS6ifNdS/Cfse+t+w+WC389eBXquI
f1D0fTkh/V/BFcxnDv9xzPU18xBzfc37xBQ/QvyLw87/4Rfi3/f7
            "]]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 
             1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
             3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3,
              3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 
             1, 0}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
             1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
             0}, {0, 1, 0}}}, {CompressedData["
1:eJxtlD9IHEEUxgeLVEcqm2sEmzSBIEyaEPBmr7p/6l4MQSHIonHhmrh7abTT
xkaxCsHpNgRsLLUJhLCVEFhFCAREi0BADFxx4Sq7jPe+h2/kBpbhNzPvzfe+
2ZnJ5bVXq2NKqUX33fWuZbbTNa7ftBdVMxxZB5eHHMXbQ86L3YD6j0M2WgfU
f+F4Q3xEHB8Yij/xOLM/RrJrFcr/zePMfvbY6B3WV5F6ldaIf0d82sL8AtZb
xDex/3WF9E2DnxiKfw6OUc9T1HsEvZOsJyAuY/5DQPkegwfgTyn8qlH+1kh2
O1Yl3/s/i/kcfs/zeuR/AzY4n7cp9SWsX8F+A+jvYL4Ap5wfvJH69W6RHpyX
899j9z947CJGssL5OU5G8X3+Q4/z4tjjKP7+gE8SqTeKzxJZTxT/SmS9eXGV
SD+M/pPA74DibhLfz14i/Vaqz/nh7wD5S1XJfJ7M7j8JJZ8XrZDG/2F+I5T7
ZdZi/i/4ayj1TumfoaxHqd+hrHdKD0LpR2ZvQ+mXa23pZxQ/aku/mfk8mPm8
HvK+tci3l0o2+tLjvBjH/YnapOtFl/zoQd9SV/rh/s8ujR/MSc7sxYzP5Rla
957vY4s4Rvx108+/2CQ9rzlfg3TVOL5B/Uu8f6UGxT/j96BOPMHrwXz/dR0+
83tQI+7z/avRvuL9/Q8PwFRN
             "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQDQQJaX6FDmBWgyeIPnCmB4WfkLYMTX4PmL9g5kyo
/Dmo/AFPCP0AzHcw/gxV/wbKN/aCyP8ohNrjBTGHsQhizjMon7MIQkd6Q8T5
YPLeEHOEiyB0sQ/EHJEiCM3ji8o/g8bv8YOYKwg1T80fqg9q3mZ/iPs4oPZL
BkD4DGC+gXFwAET9F6j/KwMg9MtCaDgFQMy5DQsPqPzJQoj+y1DzdkDVP4Oq
XwzmXzjzBqq+E4V/4IwPVj4ifpDiDwD9RnX7
             "]}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 
             3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0,
              1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
             3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{1, 4, 3}, {1, 
             3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxtk7FKBDEQhqPdwTU24oIIhyIKIsiCIBYmUbY80EKwWwVTKribQhQ5sbEQ
wTJd4OB68RDLa4V7AV/AWvAFzO78wWTZwDJ8yT9/JpNN7+zy6HyWMbbnviq6
wdNhwV20Jsko3tfM03S/irm6q9mNmifTW/BEku6moPknSfnXNQ/MScxqNWI3
Inb5ItzP7S9I9wj+5aR/8ftzihb+I04+44it+WzlqgsUf67a+F8/08jvNHgO
9b2hnoWovlwt4XxTTrpl5H9Dv4Z+JYJ0G8jngvy3wAP0Z9v7C/LbhX9XIg/+
StL8Afy/0O9Oib4dkl+/wfOa8v19JRr5qG8RbFBfT1MdBdZXdFz/ug7Pl6tN
rDPUn+qwH9bs6LBfTqHjfmY67Lerv8HHEVtz2soM952ri7KN/f3y9CHiXI0i
ZuyjDM/n2f2vorEuQ3YKSX7v8PP3NS4p0ntydUNP782aV++P/GfouxnND4s2
rt/3H69t4mk=
             "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQDQQHzriUOIBpHx8Q7WBsDeYvmCnpC+Ebg/kJac+g
fG2o/Ew/CF8Zpt8fQsuA+UAQAKElwHwD4+AAiDliUPPUAiD6hVHUL5gpWAIR
3+wPUccHVZ/mDxHnhtrH4w/RxwHVf8APIs4C1V/sBzGPEeYfqPyfYqh6Xwj9
oxhqvi9E/gtUnsEXIv6uGCLe4wOht0DlG9wh/JoSVD5SeAIAy/FP8g==
             "]}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1,
             0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxtlLFLHEEUxicKVvkHbARBhECKgwUrwdk7ESSHzHlVSLMILgYEr9m9TXdi
e12aDFhsJYIiiE1CmgUhCG5xIAhiYyFB8TgUKzvHm++5b5ZbWGZ/8968ee+b
Nzu9trW6Pi6E+GDeNfOOieEjvYO2tJ8LknEn3JNvYxAeOSzE7xJnJT5r2zgn
4B7iZ4h3OeQsz6X1u4b/M/xvYP/o2/EW66Vvxztwx7frHig+/Pu0vmr3GyC/
0OGK91O9jamedupP9VPMOctnhtzLu4pzR+uqw+Es4s/GqM+38T6Bu8jvM7iO
eiqIN+nb9XMx1yPL5yke9KrFXF/pfYm5/tJrUn7gbw4HYehwqr+P5KL+3WgU
F+e973Cqjx2W3t8Sn0Zu/ueIn4EvIl5vqq8irofpj4jrZfoD6yX0vgd3qB8o
PvR+RHzbH8TG3+FUTyrOvbyurH4D2H8ovl+qNez/wX8Uz7fiXShej5lXvN6K
96y4Hql+UVwv8zS4nkE40eB6E9N5ENN5lfmX1g07b/uh4Kk25mvIr83t5isZ
xUX8rsPS23HY6OawEK2E12f2TXj9Ziax+veh31fYr6BPE/H+Qf8V+B/Cfxnc
hX0JvIn1NewvHTb5OUz3/Z1x37N8MbEj3fdlMN33Orju83ypf6meor8Digfe
gJ3+py3sT/cvofxwX7YdpvMgpvMqsyj9/4f8CjTreeM=
            "]]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1,
             0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1,
             0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
            3}}}, CompressedData["
1:eJxtlT9oE1Ecx19VnEoXFwsOunQsgTd1qXeXxCnDRboEOhxSD8RAlYCYu1Aq
QqcOgosHRQKF4FCEEigtOqQIXbyhkMUgiFAoCBmEQCGL+Gt+3x+8X8hBePm8
7+/v+3P34Mnm46c3jTFz9Nuk3w0zeaL4V+LRuB3Hq9ejZ78o7uV7zFk2YfoH
XnzI+obo4Ar8l7zrsZ2tgDsTjuIl0X2Odzdhv9xnfUHiBTx/K+H5uMj2JuG4
tZLLnm2Utb4YunyeV0KO86/JejPkcQzOoF+BT+D/d8IF24f9nybP/w457wX0
Efgn/MfgPuxNlfl7k/PcrrLdqWJjjhX38oOZ/CHLqjz/OZnFYu/Z/UTnyxKd
753iKN5J3Hp7eStx+4niV1jPIdbnBfQB1ucZ4p2F7L8B+wPYR+Bd6OvgOvxr
yO8ppvqm9bLLtP8lNx79K7r5PWvBdTmPgdsP6QGPb3H+Br67PjQDbkt+n/Mf
yn3w2f8b4o08tvsh8TzOP1RMfaVav5e6/lG8zDruSzvzYV9DPSH0jo/+Ux7n
A+wH4jXAL2F/GbD/65Tz8P2K4i3wZZHt36Tov+Qy3eOyywV7J9T6I+z3NvQG
7kMKfh+6+Qu2G7r1nec57J+nPD+Q8wR9KOcH/iPwGuzH4Arql/tXVEzvJ8Wy
3tNM9eI+zLdmsdjT09L+Vyoe7f9UPReqXupT9UPvD9kP9JND7+M+niFeD/6n
sO/A/it4B/qJ7Df8j5B/RTE9iqnPssu0/zgPh9AreD9/Au8GbPcRnMt9wnm0
eN9vgbs4/3XRwWs47/x9kf2S748x97le211lfQ7nm79f6vv2H6WjrZs=
            "]]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            37.099998474121094`, 33.400001525878906`}, {42., 25.}, {42., 
            33.900001525878906`}, {36.900001525878906`, 
            41.400001525878906`}, {37.099998474121094`, 
            33.400001525878906`}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            31.899999618530273`, 56.900001525878906`}, {25.5, 
            48.599998474121094`}, {35.5, 45.599998474121094`}, {41.5, 
            53.70000076293945}, {31.899999618530273`, 
            56.900001525878906`}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            26.100000381469727`, 40.400001525878906`}, {24.899999618530273`, 
            29.300003051757812`}, {35.20000076293945, 33.80000305175781}, {
            35., 43.29999923706055}, {26.100000381469727`, 
            40.400001525878906`}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            43., 52.599998474121094`}, {37.099998474121094`, 44.5}, {43., 
            35.900001525878906`}, {48.900001525878906`, 44.5}, {43., 
            52.599998474121094`}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            53.79999923706055, 69.20000076293945}, {43.900001525878906`, 
            65.70000076293945}, {43.900001525878906`, 55.5}, {53.5, 
            58.70000076293945}, {53.79999923706055, 69.20000076293945}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            51., 43.29999923706055}, {50.79999923706055, 33.80000305175781}, {
            61., 29.300003051757812`}, {59.900001525878906`, 
            40.400001525878906`}, {51., 43.29999923706055}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            54.099998474121094`, 56.900001525878906`}, {44.5, 
            53.70000076293945}, {50.400001525878906`, 45.599998474121094`}, {
            60.5, 48.599998474121094`}, {54.099998474121094`, 
            56.900001525878906`}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            42., 55.5}, {42., 65.70000076293945}, {32.20000076293945, 
            69.20000076293945}, {32.5, 58.70000076293945}, {42., 55.5}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            40.20000076293945, 68.29999923706055}, {35.599998474121094`, 
            74.29999923706055}, {26.700000762939453`, 78.20000076293945}, {
            31.799999237060547`, 71.29999923706055}, {40.20000076293945, 
            68.29999923706055}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            30.5, 61.099998474121094`}, {30.299999237060547`, 
            70.20000076293945}, {25.100000381469727`, 77.10000038146973}, {
            26.100000381469727`, 67.4000015258789}, {30.5, 
            61.099998474121094`}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            28.799999237060547`, 56.}, {21.5, 53.29999923706055}, {
            15.100000381469727`, 46.099998474121094`}, {23.299999237060547`, 
            48.900001525878906`}, {28.799999237060547`, 56.}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            30.100000381469727`, 58.5}, {24.799999237060547`, 66.}, {
            13.800000190734863`, 63.599998474121094`}, {21.299999237060547`, 
            55.20000076293945}, {30.100000381469727`, 58.5}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            32.70000076293945, 44.5}, {23.899999618530273`, 
            47.099998474121094`}, {15.5, 44.20000076293945}, {
            25.100000381469727`, 42.099998474121094`}, {32.70000076293945, 
            44.5}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            43.900001525878906`, 25.}, {48.900001525878906`, 
            33.400001525878906`}, {49., 41.400001525878906`}, {
            43.900001525878906`, 33.900001525878906`}, {43.900001525878906`, 
            25.}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
              3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {0,
              1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
             0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
             0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJRKA0BIg5gKiHUAYnfMHOmHYh2MDbWA4sbG+uD6AUz
Ix2gfCUQfeAMjyuYn5YmBlXvCjVHDKoewp81UxQiXwzhmxiLQuRnoslvRtN/
E8V8oHovZPuB6gOR3Qe0PwTN/SHI/lsw8ydEPYNCOIQv6QvhO0RA6AZXZP6B
M2eskflA83SQ9aOHH9A8TxB94QxPMNS9/lBzwe5ISHvmB6INjD8HQMx/EwTh
G0P5PQFQc7yR5YHucEXWf+CMjwuy+Q1paVbI9oOciuwfYHgYQ/U7IssDw88M
zD/rA9NvAfWvC0R9mgqEf8AVqt4YYj+PN7L8hTM6Acj6L5x5E4BiPsL/jhD/
CgejhrdCGEb4AQAnYISO
            "]]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 
             1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 0}, {
             1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
             3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3,
              3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBmIQDQQOxsIhDkA6I21ZmAOYPzkQRKeluUU4gFU0+IBo
Y2PjSCjfFZXPYIvMT0hL0wfRZ874gPUfOHNGDNn8BTNnCkLkc8Kg8hwg2sTY
OAxqHgOInjHzZyjUvG/2YP5NFD7QHbZQ/X/A/LNnbKD6NZHphLRndmA+1B0O
xsUuyPbA/MNgYPzZHmxejxuavDeyfqCJQcjmHzjDA3YXg/FmG4h9amB+Q1qa
LTLfxPhyKFQflP85FBIeO0Mg4aETBvVfCHL4oMQPANLHWh4=
             "], CompressedData["
1:eJxTTMoPSmViYGBQA2IQDQYHQhyA5IyZM0MdkPhAYAeiHYw3Q/jGm21B9IKZ
kkFg/tkz2iA6IU3NG8w/c0YGos/BDcrnIYbvYGyMxv/sCuabGHND7YfwZ8zk
hPCLXaHqOaD6IfyMNC6ou12hNNS8zS6o5uPnJ6QtQ+EvmDnTHtl/B86c0UL2
PxBwIIcPjN+Q9gyFb2D8OQSZb2I8ORRFP8OCUIj9aQIOYO/eDIX6TxSiXjgM
Ki/lAPauWxjEPT4GIDot7Vk4VL0thH8sAmJugysyf8HMSB9kPtC8QGT9C2be
DHYAe9cHar4ONH1IhkHkK6H+eICSXjLSlqHwwekJADolewo=
             "]}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            48.70000076293945, 75.10000038146973}, {43., 84.79999923706055}, {
            37.29999923706055, 75.10000038146973}, {43., 67.9000015258789}, {
            48.70000076293945, 75.10000038146973}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            53.29999923706055, 44.5}, {60.79999923706055, 
            42.099998474121094`}, {70.5, 44.20000076293945}, {
            62.099998474121094`, 47.099998474121094`}, {53.29999923706055, 
            44.5}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            54.20000076293945, 71.29999923706055}, {59.29999923706055, 
            78.10000038146973}, {50.400001525878906`, 74.29999923706055}, {
            45.70000076293945, 68.29999923706055}, {54.20000076293945, 
            71.29999923706055}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            57.20000076293945, 56.}, {62.70000076293945, 
            48.900001525878906`}, {70.9000015258789, 46.099998474121094`}, {
            64.5, 53.29999923706055}, {57.20000076293945, 56.}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            64.69999694824219, 55.20000076293945}, {72.19999694824219, 
            63.599998474121094`}, {61.20000076293945, 66.}, {
            55.900001525878906`, 58.5}, {64.69999694824219, 
            55.20000076293945}}}]}, {
           FaceForm[{
             RGBColor[1., 1., 1.], 
             Opacity[1.]}], 
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
            55.5, 61.099998474121094`}, {59.900001525878906`, 
            67.4000015258789}, {60.900001525878906`, 77.10000038146973}, {
            55.70000076293945, 70.20000076293945}, {55.5, 
            61.099998474121094`}}}]}}, {
         ImageSize -> 170, AspectRatio -> Automatic, 
          ImageSize -> {450., 102.}, PlotRange -> {{0., 450.}, {0., 102.}}}], 
        ImageSize -> Full, Alignment -> {Right, Center}]}}, 
     GridBoxAlignment -> {"Columns" -> {Left, Right}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.8], 
         Scaled[0.2]}}, 
     GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
    "Grid"]], "DockedTitle", CellMargins -> {{0, 0}, {0, 0}}, 
  StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
  CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
  CellFrameMargins -> {{20, 20}, {15, 15}}, LineSpacing -> {1, 4}, 
  LanguageCategory -> "NaturalLanguage", CounterIncrements -> "Title", 
  CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {"Figure", 0}, {
    "Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {"Subitem", 0}, {
    "Subsubitem", 0}, {"ItemNumbered", 0}, {"SubitemNumbered", 0}, {
    "SubsubitemNumbered", 0}}, MenuSortingValue -> 1100, MenuCommandKey :> 
  First[{"1"}], FontFamily -> "Source Sans Pro", FontSize -> 34, 
  FontTracking -> -0.5, FontColor -> GrayLevel[1], Background -> RGBColor[
    Rational[22, 255], 
    Rational[8, 51], 
    Rational[21, 85]]],
ShowCellBracket->True,
TaggingRules->{
 "WolframUNotebook" -> True, 
  "PresenterSettings" -> {"ShowNavigationBar" -> True}, "TryRealOnly" -> 
  False, "ShowNavigationBar" -> True},
ShowCellTags->False,
TrackCellChangeTimes->False,
Magnification->Automatic,
FrontEndVersion->"13.3 for Mac OS X x86 (64-bit) (July 24, 2023)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       StyleData["Title"], CellMargins -> {{27, Inherited}, {10, 30}}, 
       FontSize -> 40, FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["DockedTitle", StyleDefinitions -> StyleData["Title"]], 
       CellMargins -> {{0, 0}, {0, 0}}, 
       CellFrameMargins -> {{20, 20}, {15, 15}}, FontSize -> 34, FontColor -> 
       GrayLevel[1], Background -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Subtitle"], CellMargins -> {{27, Inherited}, {0, 20}}, 
       FontSize -> 34, FontWeight -> 400, FontColor -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Subsubtitle"], CellMargins -> {{27, Inherited}, {0, 2}}, 
       FontSize -> 20, FontWeight -> "Thin", FontSlant -> "Italic", FontColor -> 
       RGBColor[
         Rational[91, 255], 
         Rational[178, 255], 
         Rational[166, 255]]], 
      Cell[
       StyleData["Chapter"], FontSize -> 31, FontColor -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Section"], CellMargins -> {{27, Inherited}, {8, 10}}, 
       CellFrameMargins -> 7, CellFrameColor -> GrayLevel[0.8], FontColor -> 
       RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Subsection"], CellMargins -> {{50.3477, 3.}, {8., 20.}}, 
       FontColor -> RGBColor[
         Rational[91, 255], 
         Rational[178, 255], 
         Rational[166, 255]]], 
      Cell[
       StyleData["Subsubsection"], 
       CounterAssignments -> {{"Subsubsubsection", 0}, {"Item", 0}, {
         "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
         "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}, {
         "ItemRomanNumbered", 0}}, FontSize -> 15, FontWeight -> "Bold", 
       FontVariations -> {"CapsType" -> "AllCaps"}, FontColor -> GrayLevel[
         Rational[4, 15]]], 
      Cell[
       StyleData["Subsubsubsection"], 
       CounterAssignments -> {{"Subsubsubsubsection", 0}, {"Item", 0}, {
         "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
         "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}, {
         "ItemRomanNumbered", 0}}, FontWeight -> "Bold", FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Subsubsubsubsection"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["WolframULogo"], CellMargins -> {{27, 0}, {0, 25}}, 
          CellGroupingRules -> "GraphicsGrouping", PageBreakWithin -> False], 
         
         Cell[
          StyleData[
          "WolframULogo", "SlideShow", StyleDefinitions -> 
           StyleData["WolframULogo"]], 
          CellFrameLabels -> {{None, None}, {None, None}}], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Working", StyleDefinitions -> 
           StyleData["WolframULogo", "SlideShow"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "TitleGraphic", StyleDefinitions -> StyleData["WolframULogo"]], 
          StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
          CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
          LineSpacing -> {1, 4}, CounterIncrements -> "Title", 
          CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
            "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {
            "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
            "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}}, 
          FontTracking -> -0.5], 
         Cell[
          StyleData[
          "TitleGraphic", "SlideShow", StyleDefinitions -> 
           StyleData["TitleGraphic"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Working", StyleDefinitions -> 
           StyleData["TitleGraphic", "SlideShow"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["TitleGraphic", "SlideShow"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["TitleGraphic", "SlideShow"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Closed]]}, 
     Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Body Content", "Section"], 
      Cell[
       StyleData["Author"], CellMargins -> {{27, Inherited}, {0, 2}}, 
       FontWeight -> "Thin", FontSlant -> "Italic"], 
      Cell[
       StyleData["Affiliation"], CellMargins -> {{27, Inherited}, {0, 2}}, 
       FontWeight -> "Thin", FontSlant -> "Italic"], 
      Cell[
       StyleData["Text"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData[
       "OpenCollapsedSection", StyleDefinitions -> StyleData["Text"]], 
       CellMargins -> {{27, Inherited}, {8, 10}}, MenuSortingValue -> 10000, 
       FontSize -> 11], 
      Cell[
       StyleData["CodeText"]], 
      Cell[
       StyleData["Item"], CellDingbat -> 
       StyleBox[
        "\[FilledSmallCircle]", Alignment -> Top, FontSize -> 5, FontColor -> 
         RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]]], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["Subitem"], CellDingbat -> 
       StyleBox[
        "\[FilledSmallCircle]", Alignment -> Top, FontSize -> 5, FontColor -> 
         RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]]], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["Subsubitem"], CellDingbat -> 
       StyleBox[
        "\[FilledSmallCircle]", Alignment -> Top, FontSize -> 5, FontColor -> 
         RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]]], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["ItemNumbered"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubitemNumbered"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubitemNumbered"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["ItemParagraph"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubitemParagraph"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubitemParagraph"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData[
       "ItemRomanNumbered", StyleDefinitions -> StyleData["ItemNumbered"]], 
       CellDingbat -> Cell[
         TextData[{
           CounterBox["ItemRomanNumbered", CounterFunction -> RomanNumeral], 
           "."}], FontWeight -> Bold], CounterIncrements -> 
       "ItemRomanNumbered"], 
      Cell[
       StyleData["KeyEvent"], CellFrame -> {{1, 1}, {1, 1}}, 
       CellFrameMargins -> {{2, 2}, {2, 2}}, CellFrameColor -> GrayLevel[0.8],
        FontFamily -> "Source Sans Pro", FontColor -> GrayLevel[0.360784], 
       Background -> GrayLevel[0.964706]], 
      Cell[
       StyleData["AuthorNote", StyleDefinitions -> StyleData["Text"]], 
       CellDingbat -> 
       StyleBox["Author note:", "Text", Italic, FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], Alignment -> Baseline], FontSlant -> Italic, 
       FontColor -> GrayLevel[0.4]], 
      Cell[
       StyleData["HintHeader", StyleDefinitions -> StyleData["Text"]], 
       ShowGroupOpener -> True, GroupOpenerInsideFrame -> False, 
       CellGroupingRules -> {"SectionGrouping", 80}, PageBreakBelow -> False, 
       FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Hint", StyleDefinitions -> StyleData["Text"]], CellFrame -> 
       True, Background -> RGBColor[
         Rational[173, 255], 
         Rational[433, 510], 
         Rational[421, 510]]], 
      Cell[
       StyleData["ExperimentalInput", StyleDefinitions -> StyleData["Input"]],
        Editable -> True, CellFrame -> True, 
       StyleKeyMapping -> {"=" -> "WolframAlphaShort", "*" -> "Item"}, 
       CellFrameColor -> RGBColor[
         Rational[91, 255], 
         Rational[178, 255], 
         Rational[166, 255]], CellFrameLabels -> {{
          Cell[
           BoxData[
            RotationBox["Experimental", BoxRotation -> 1.5708]], "Text", 
           FontSize -> 10, FontColor -> RGBColor[
             Rational[91, 255], 
             Rational[178, 255], 
             Rational[166, 255]]], None}, {None, None}}], 
      Cell[
       StyleData["WolframLanguageLogo"], FontColor -> 
       RGBColor[0.09, 0.16, 0.25]], 
      Cell[
       StyleData["Hyperlink"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["HyperlinkActive"], FontColor -> RGBColor[
         Rational[91, 255], 
         Rational[178, 255], 
         Rational[166, 255]]]}, Closed]]}, Visible -> False, FrontEndVersion -> 
  "13.3 for Mac OS X x86 (64-bit) (July 24, 2023)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"519b7442-57d4-49e9-bc53-699b7b40c6e3"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "answer"->{
  Cell[191701, 3276, 29115, 621, 110, "Text",ExpressionUUID->"eb340e34-e685-4d3f-83f8-ecaa17c2d581",
   CellTags->"answer"],
  Cell[269490, 4993, 16613, 371, 110, "Text",ExpressionUUID->"b74bd8c0-0bbf-4fca-ab4c-00b80a257516",
   CellTags->"answer"],
  Cell[303002, 5891, 16858, 372, 110, "Text",ExpressionUUID->"24280149-2c7b-4d19-bccc-7065dc652446",
   CellTags->"answer"],
  Cell[346304, 7006, 11487, 261, 110, "Text",ExpressionUUID->"3af3e6b6-6a9b-4fbb-8ac6-f8b75182e882",
   CellTags->"answer"],
  Cell[364643, 7484, 28829, 620, 110, "Text",ExpressionUUID->"2cf35974-9d09-49d5-9a9c-80781583d431",
   CellTags->"answer"],
  Cell[396604, 8198, 16874, 372, 110, "Text",ExpressionUUID->"3c9c0eca-f553-41c2-89d9-4adbb6d44dfa",
   CellTags->"answer"],
  Cell[431699, 9118, 18084, 398, 110, "Text",ExpressionUUID->"545a6094-bf4d-403e-889f-cc6a3896e4c4",
   CellTags->"answer"],
  Cell[467143, 10048, 17417, 383, 110, "Text",ExpressionUUID->"f31de257-a524-4de1-8bc8-7b69b5eefe24",
   CellTags->"answer"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"answer", 525831, 11333}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[616, 23, 97, 0, 64, "Subtitle",ExpressionUUID->"abd2714b-c40b-491d-9b98-1f3d249655e3"],
Cell[716, 25, 557, 18, 37, "OpenCollapsedSection",ExpressionUUID->"828c07e1-0af3-4e1d-9cc7-5abbac8f295f"],
Cell[CellGroupData[{
Cell[1298, 47, 93, 0, 62, "Section",ExpressionUUID->"a97f34a4-babe-4547-8f90-f67ece348d5f"],
Cell[1394, 49, 244, 6, 35, "Text",ExpressionUUID->"8763c07a-e85a-4b98-9650-d4239191e7d7"],
Cell[CellGroupData[{
Cell[1663, 59, 164, 3, 54, "Subsection",ExpressionUUID->"dd79d975-2382-4695-825f-af23fdf885c0"],
Cell[1830, 64, 187, 3, 35, "Item",ExpressionUUID->"ae7292b4-e40f-4421-9140-d80f5062b274"]
}, Closed]],
Cell[CellGroupData[{
Cell[2054, 72, 633, 9, 38, "Subsection",ExpressionUUID->"121eeb56-b4cb-40ef-b054-f5ba8ec2f5e1"],
Cell[2690, 83, 238, 5, 35, "Item",ExpressionUUID->"879fd4f4-2964-4543-bbf2-df40a5b032d0"],
Cell[2931, 90, 271, 4, 35, "Item",ExpressionUUID->"3a603bdb-8139-4e0f-bcea-ebbec08928ec"],
Cell[3205, 96, 263, 4, 35, "Item",ExpressionUUID->"f5ad4b53-f64d-48e5-937c-b0476758cc1b"]
}, Closed]],
Cell[CellGroupData[{
Cell[3505, 105, 157, 2, 38, "Subsection",ExpressionUUID->"284fcb5b-f809-422e-a1e8-e19a7cb922e8"],
Cell[CellGroupData[{
Cell[3687, 111, 347, 7, 35, "Item",ExpressionUUID->"519d0be0-ad1c-43f6-8a17-cd8a6dd60f9a"],
Cell[4037, 120, 216, 4, 34, "Subitem",ExpressionUUID->"e40f690e-92a2-4de7-98e8-9a1d6fca85cb"],
Cell[4256, 126, 216, 4, 34, "Subitem",ExpressionUUID->"6b70d80f-dffa-4269-9998-07c16deff4a7"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[4521, 136, 168, 3, 38, "Subsection",ExpressionUUID->"52a7457a-6e31-4346-9c8d-315ef47eceec"],
Cell[4692, 141, 222, 4, 35, "Item",ExpressionUUID->"a5aaae66-111a-4866-be73-7aad7fc19d9b"],
Cell[4917, 147, 162, 3, 35, "Item",ExpressionUUID->"d9d606f6-ffdb-450e-af8c-27c0f2b03d95"]
}, Closed]],
Cell[CellGroupData[{
Cell[5116, 155, 278, 4, 38, "Subsection",ExpressionUUID->"54e8e0e0-762e-4982-9c46-2272b8e48b1b"],
Cell[5397, 161, 313, 5, 35, "Item",ExpressionUUID->"6a7d4045-b60f-4242-9e07-2dc61ca64ec8"],
Cell[5713, 168, 389, 6, 35, "Item",ExpressionUUID->"7ccdb54d-149e-4b39-b74a-84dd12288628"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6151, 180, 92, 0, 62, "Section",ExpressionUUID->"546f8fe2-fa18-4012-b162-93e5daa714d1"],
Cell[6246, 182, 444, 9, 35, "Text",ExpressionUUID->"9078e285-a3c8-4021-b7cb-53cba3ee1db9"],
Cell[6693, 193, 543, 11, 32, "Item",ExpressionUUID->"26c973b1-d1fb-415e-b283-6a7946d7617f"],
Cell[7239, 206, 1127, 20, 53, "Item",ExpressionUUID->"0a5de4ed-19ea-44fb-881f-bdbb2577d2b1"],
Cell[8369, 228, 198, 3, 35, "Text",ExpressionUUID->"3e743bff-8aa6-488b-b2a1-912e1c043fbd"],
Cell[8570, 233, 142, 3, 30, "Input",ExpressionUUID->"5fa7ee3e-2c4b-4f85-9a93-430231bc6a05"],
Cell[8715, 238, 151, 3, 30, "Input",ExpressionUUID->"cc7c5f2f-9fd1-4e5a-a0bd-55a3d2a8de45"],
Cell[8869, 243, 175, 4, 30, "Input",ExpressionUUID->"9957193c-6aaf-4b2c-9c1d-624860867160"],
Cell[9047, 249, 257, 6, 30, "Input",ExpressionUUID->"0ad63792-1bc3-4e4e-8465-172d9b80edbd"],
Cell[9307, 257, 244, 8, 30, "Input",ExpressionUUID->"f2a787e7-7fba-4e61-944a-ef958feb4dfd"],
Cell[9554, 267, 199, 5, 42, "Input",ExpressionUUID->"afa3a94e-8af9-4885-a6e5-a25c3efd15c8"],
Cell[9756, 274, 301, 9, 42, "Input",ExpressionUUID->"2844eaed-34de-44a7-8090-bfc2584096bf"],
Cell[10060, 285, 181186, 2975, 145, "Input",ExpressionUUID->"17bee132-1432-4cee-9d14-8de0f4bf9089"],
Cell[191249, 3262, 200, 4, 42, "Input",ExpressionUUID->"d1567fb1-2c6a-4355-886c-e5d299b174b5"],
Cell[191452, 3268, 246, 6, 35, "Text",ExpressionUUID->"9116f42f-1d5d-4834-8297-9617c8b76974"],
Cell[191701, 3276, 29115, 621, 110, "Text",ExpressionUUID->"eb340e34-e685-4d3f-83f8-ecaa17c2d581",
 CellTags->"answer"]
}, Open  ]],
Cell[CellGroupData[{
Cell[220853, 3902, 114, 1, 139, "Section",ExpressionUUID->"2e1480e0-bc6a-4865-bca8-1c969b7b4830",
 CellID->150258009],
Cell[220970, 3905, 552, 9, 58, "Text",ExpressionUUID->"87f3d081-22fe-4ca7-9bbc-e624beccfdc5",
 CellID->1679675790],
Cell[221525, 3916, 534, 9, 35, "Text",ExpressionUUID->"474df3d2-97b6-48b4-997c-79ed0325aac8"],
Cell[222062, 3927, 518, 12, 65, "Program",ExpressionUUID->"37be7423-0bea-4d0d-b341-6b3f7e642137",
 CellID->1645951534],
Cell[222583, 3941, 449, 8, 81, "Text",ExpressionUUID->"6041db04-88cd-4a30-9a31-41559240eda1"],
Cell[223035, 3951, 247, 5, 35, "Text",ExpressionUUID->"631b827d-1b40-4683-aace-f75874ef18b2"],
Cell[223285, 3958, 443, 10, 65, "Program",ExpressionUUID->"e11f719f-fbb9-47a0-85e3-e3f975c73361",
 CellID->1074997770],
Cell[223731, 3970, 336, 9, 35, "Text",ExpressionUUID->"72c695f6-0523-4110-9cb0-5243be42f1a7"],
Cell[224070, 3981, 731, 20, 35, "Item",ExpressionUUID->"b81df762-bf3e-48e2-898c-d83214cd3469"],
Cell[224804, 4003, 826, 21, 35, "Item",ExpressionUUID->"51f21b21-8d3e-4307-9f09-e5d2b979b860"],
Cell[225633, 4026, 842, 25, 35, "Item",ExpressionUUID->"adf0dcf1-451c-4b85-8c31-08c0c98785f4"],
Cell[226478, 4053, 782, 23, 35, "Item",ExpressionUUID->"3d275bc9-cd82-469e-a68f-c47c1f36960b"],
Cell[227263, 4078, 929, 26, 35, "Item",ExpressionUUID->"08962480-12ba-43c3-8ed6-47cfcb38e832"],
Cell[228195, 4106, 597, 11, 58, "Text",ExpressionUUID->"999befd4-5d7f-4d2f-a8da-bbc4cb7ad408"],
Cell[CellGroupData[{
Cell[228817, 4121, 136, 1, 91, "Subsection",ExpressionUUID->"89cd0357-ba71-4c4a-90d8-750a997e6683",
 CellID->89546494],
Cell[228956, 4124, 813, 13, 35, "Text",ExpressionUUID->"1c20e680-354b-4e8f-a71f-bcc67f365e7b",
 CellID->1769371758],
Cell[229772, 4139, 13214, 235, 150, "Input",ExpressionUUID->"a39a8049-e7f9-4cae-be23-f14069b1814a"],
Cell[242989, 4376, 273, 5, 51, "Input",ExpressionUUID->"766aa4e3-d3d6-4360-8d92-f8d40eecfc3a"],
Cell[243265, 4383, 139, 3, 42, "Input",ExpressionUUID->"e2cf963a-774f-4d6c-a5d6-8357dbf6e0cd"],
Cell[243407, 4388, 104, 1, 42, "Input",ExpressionUUID->"d9db57ef-3467-4298-90ef-6a6bd656b82e"],
Cell[243514, 4391, 919, 17, 35, "Text",ExpressionUUID->"3316f3c3-11f4-4ffa-a0fa-0ef5b8e04ce0"],
Cell[244436, 4410, 184, 4, 42, "Input",ExpressionUUID->"e7d5ad4a-6d3e-479e-ad0d-47d452bcbbc3",
 CellID->967023933],
Cell[244623, 4416, 223, 5, 42, "Input",ExpressionUUID->"c2062be8-6862-41fe-b2ab-9d8f38fe3f85",
 CellID->490325034],
Cell[244849, 4423, 340, 8, 52, "Input",ExpressionUUID->"b24f5eae-b79d-4858-962e-b9be6bbc9f81"],
Cell[245192, 4433, 13293, 236, 78, "Input",ExpressionUUID->"510d01b6-55ac-4d75-8f17-81308d1c4ef9",
 CellID->952586776]
}, Closed]],
Cell[CellGroupData[{
Cell[258522, 4674, 110, 0, 55, "Subsection",ExpressionUUID->"469f74f5-1f64-4b05-ad03-e82644e9a553"],
Cell[258635, 4676, 267, 6, 35, "Text",ExpressionUUID->"4954c7d6-3099-4f4e-a1c9-82f6db347ced"],
Cell[258905, 4684, 214, 4, 35, "CodeText",ExpressionUUID->"ba9ee1f3-dc98-445b-8e37-4782d2ce7f0a"],
Cell[259122, 4690, 109, 1, 42, "Input",ExpressionUUID->"74c6a082-388e-4dd9-85db-82f19737c92b"],
Cell[259234, 4693, 217, 4, 35, "CodeText",ExpressionUUID->"4c142bb4-7efe-4d2e-ac8e-05a13f23b5b1"],
Cell[259454, 4699, 104, 1, 42, "Input",ExpressionUUID->"415de72f-3c73-45ae-906e-3fb3ac5deaf5"],
Cell[259561, 4702, 165, 3, 35, "CodeText",ExpressionUUID->"b63be199-951f-4005-a3d9-cbee9a7be0e0"],
Cell[259729, 4707, 105, 1, 42, "Input",ExpressionUUID->"ec353b9c-c354-4a31-874c-965f4600c05c"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[259883, 4714, 92, 0, 139, "Section",ExpressionUUID->"b691a348-44a9-4ef0-a337-e8e9fee471fb"],
Cell[259978, 4716, 688, 12, 58, "Text",ExpressionUUID->"95f7f5fb-0f7a-48b2-a6df-cb466d8923da"],
Cell[CellGroupData[{
Cell[260691, 4732, 178, 3, 91, "Subsection",ExpressionUUID->"f81acd13-97ba-47d6-9985-a5b6931782fc"],
Cell[CellGroupData[{
Cell[260894, 4739, 1601, 42, 35, "Item",ExpressionUUID->"2381767c-2885-4eab-8204-4fea32a76626"],
Cell[262498, 4783, 102, 1, 42, "Input",ExpressionUUID->"96040601-ade4-41d2-952b-8d15bd1aabcb"],
Cell[262603, 4786, 121, 2, 58, "Input",ExpressionUUID->"2ae1083c-9166-4eac-b4d7-3a361d68f789"],
Cell[262727, 4790, 106, 1, 42, "Input",ExpressionUUID->"0ccc54a3-2d9f-4d78-8290-b1ce87b8377b"],
Cell[262836, 4793, 145, 4, 42, "Input",ExpressionUUID->"7e56e4f3-6fa1-43b3-ae36-c1a64f4dab4f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[263018, 4802, 733, 19, 35, "Item",ExpressionUUID->"09970d98-5316-4437-87df-c3c9bcf9876f"],
Cell[263754, 4823, 113, 1, 42, "Input",ExpressionUUID->"759fed5a-301c-4561-af9c-792360e738af"],
Cell[263870, 4826, 110, 1, 42, "Input",ExpressionUUID->"06fbd5e1-2347-4112-b5fd-fac5f6ef9ce9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264017, 4832, 241, 4, 35, "Item",ExpressionUUID->"5f6c3da9-d413-421f-9cde-7496c40bd199"],
Cell[CellGroupData[{
Cell[264283, 4840, 492, 7, 33, "ItemParagraph",ExpressionUUID->"e2fd064f-3475-4455-b691-b04e897d0090"],
Cell[264778, 4849, 107, 1, 42, "Input",ExpressionUUID->"adbd236a-9168-4ed3-b5a9-672d6dcfc762"],
Cell[264888, 4852, 103, 1, 42, "Input",ExpressionUUID->"380473c2-6039-4225-a2d1-5b09eca22d1d"]
}, Open  ]],
Cell[265006, 4856, 400, 7, 34, "Subitem",ExpressionUUID->"eed7151e-a5db-4ced-a5af-f43b3328c556"],
Cell[265409, 4865, 514, 8, 34, "Subitem",ExpressionUUID->"d852bf24-ea34-4a81-9418-fb3c55aa587b"],
Cell[265926, 4875, 1281, 44, 34, "Subitem",ExpressionUUID->"b39ead97-3c02-4f6c-99eb-94ffa02caa03"],
Cell[CellGroupData[{
Cell[267232, 4923, 303, 6, 33, "ItemParagraph",ExpressionUUID->"143fa65b-9755-4927-87d9-a20cb8bb9585"],
Cell[267538, 4931, 100, 1, 42, "Input",ExpressionUUID->"2afa1a68-5410-49a1-a25e-d7c0f07be72f"],
Cell[267641, 4934, 133, 2, 42, "Input",ExpressionUUID->"7f32dda6-49e1-4591-ab00-ded390ba857b"],
Cell[267777, 4938, 255, 8, 42, "Input",ExpressionUUID->"3939f466-b438-4c15-acc0-a5c8834b4e82"]
}, Open  ]]
}, Open  ]],
Cell[268059, 4950, 493, 9, 58, "Text",ExpressionUUID->"5b85392a-0640-45cb-b23d-c04d236b3f79"],
Cell[268555, 4961, 255, 8, 42, "Input",ExpressionUUID->"f91e5189-fb0a-4cdc-b430-a5f695c851c8"],
Cell[268813, 4971, 674, 20, 42, "Input",ExpressionUUID->"b508702b-35ca-4e8a-86fb-acb078090a9b"],
Cell[269490, 4993, 16613, 371, 110, "Text",ExpressionUUID->"b74bd8c0-0bbf-4fca-ab4c-00b80a257516",
 CellTags->"answer"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[286152, 5370, 119, 1, 139, "Section",ExpressionUUID->"e8f8b1c2-db67-4b76-9e54-074aa5f5df3f",
 CellID->1060376315],
Cell[286274, 5373, 411, 8, 58, "Text",ExpressionUUID->"e2243d5a-0b62-4e86-9c8a-3543e4ea0fd4"],
Cell[CellGroupData[{
Cell[286710, 5385, 175, 3, 91, "Subsection",ExpressionUUID->"eaa229a4-0361-400a-a44b-89f699f58901"],
Cell[286888, 5390, 200, 3, 35, "CodeText",ExpressionUUID->"b28a3c7d-ab33-4098-93ef-da7c662638e7"],
Cell[CellGroupData[{
Cell[287113, 5397, 266, 8, 42, "Input",ExpressionUUID->"8e056cb1-c524-420e-b3bf-7b8c610994ee"],
Cell[287382, 5407, 490, 17, 62, "Output",ExpressionUUID->"4fb533e3-cc54-4861-8963-49a8e900d42b"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[287921, 5430, 215, 4, 55, "Subsection",ExpressionUUID->"59c39ca0-19f0-4edb-bbad-ae627508697e"],
Cell[288139, 5436, 177, 3, 35, "Text",ExpressionUUID->"001dcbbd-926a-4d74-9d81-c2f8a717937b"],
Cell[288319, 5441, 503, 11, 35, "CodeText",ExpressionUUID->"376e7198-8570-4e1b-9eb5-f5555149b13c"],
Cell[CellGroupData[{
Cell[288847, 5456, 266, 8, 42, "Input",ExpressionUUID->"7006d7f8-5fbc-4e7c-93e9-f7e651253094"],
Cell[289116, 5466, 7467, 202, 381, "Output",ExpressionUUID->"5b6b3576-224d-4e79-977b-91396d4c228b"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[296632, 5674, 437, 6, 55, "Subsection",ExpressionUUID->"aa70ee94-439d-430e-adf9-bba57fea1e49",
 CellID->1858304529],
Cell[297072, 5682, 540, 11, 35, "Text",ExpressionUUID->"fe111747-0a35-4533-8de4-66a52c32538b",
 CellID->1669540582],
Cell[297615, 5695, 437, 11, 35, "CodeText",ExpressionUUID->"ced82b88-dd71-4394-9303-a1a2aa9915d3"],
Cell[CellGroupData[{
Cell[298077, 5710, 196, 5, 42, "Input",ExpressionUUID->"45adbdea-d467-4abb-822f-8b7a21aa0b55",
 CellID->947229972],
Cell[298276, 5717, 178, 5, 48, "Output",ExpressionUUID->"d321b876-d2a5-42d2-ac70-f7380aeb80d8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298491, 5727, 229, 6, 42, "Input",ExpressionUUID->"e5e0a7a6-1547-446c-8bde-65929899cd4d",
 CellID->797864193],
Cell[298723, 5735, 114, 2, 62, "Output",ExpressionUUID->"8ed2108f-40d7-4aed-a029-453229d6231e"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[298886, 5743, 171, 3, 55, "Subsection",ExpressionUUID->"d3027b63-21fb-4e10-a423-e82212bf23b0"],
Cell[299060, 5748, 450, 11, 35, "Text",ExpressionUUID->"5c432ccf-b8bc-47ab-b4ff-82a45359be35"],
Cell[CellGroupData[{
Cell[299535, 5763, 231, 6, 42, "Input",ExpressionUUID->"bbd28a4d-2dd6-4a25-bf6e-4d209d18b377",
 CellID->753244599],
Cell[299769, 5771, 111, 2, 32, "Output",ExpressionUUID->"45968b90-2be3-4df3-a786-50a92a2d07fc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299917, 5778, 292, 9, 42, "Input",ExpressionUUID->"f51f8718-696b-4dad-9765-51a7fe2a9432"],
Cell[300212, 5789, 111, 2, 62, "Output",ExpressionUUID->"5d40d0d2-52af-43f1-93bf-8322cdad1e26"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[300372, 5797, 169, 3, 55, "Subsection",ExpressionUUID->"97528b7e-ec49-418e-97bd-584534acfe93"],
Cell[300544, 5802, 293, 6, 58, "Text",ExpressionUUID->"be373a6e-4320-4750-9da4-36a35532d714"],
Cell[300840, 5810, 543, 13, 35, "CodeText",ExpressionUUID->"83c2623d-7326-4c6c-999a-41c057dcaa8d"],
Cell[CellGroupData[{
Cell[301408, 5827, 222, 6, 42, "Input",ExpressionUUID->"01dbc8b3-88de-4868-9815-0b358e3f4e9b"],
Cell[301633, 5835, 111, 2, 32, "Output",ExpressionUUID->"af8f0ea9-1207-4822-bc9f-ee9ca1cd8bc7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[301781, 5842, 217, 6, 42, "Input",ExpressionUUID->"058cfa83-480e-4e4f-96b2-fd0dadd326aa"],
Cell[302001, 5850, 111, 2, 32, "Output",ExpressionUUID->"a8f1dbd7-0a0b-4456-b21f-1202c1ff65ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[302149, 5857, 334, 11, 42, "Input",ExpressionUUID->"eda42106-d0d0-43b6-ab7f-353a3ff6f6e4"],
Cell[302486, 5870, 133, 3, 32, "Output",ExpressionUUID->"f1b0773a-0820-4c95-8359-ed42a6c6ff21"]
}, Open  ]],
Cell[CellGroupData[{
Cell[302656, 5878, 217, 6, 42, "Input",ExpressionUUID->"da98a2ba-1411-42d5-9d4c-5d2bbb0ae5e4"],
Cell[302876, 5886, 111, 2, 62, "Output",ExpressionUUID->"d0167a3e-01a1-400d-a0b5-aba35fbed6d6"]
}, Open  ]],
Cell[303002, 5891, 16858, 372, 110, "Text",ExpressionUUID->"24280149-2c7b-4d19-bccc-7065dc652446",
 CellTags->"answer"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[319909, 6269, 85, 0, 139, "Section",ExpressionUUID->"ad734211-c52f-41d1-b32c-91f3e8d29e93"],
Cell[319997, 6271, 1095, 23, 58, "Text",ExpressionUUID->"a7bf047b-97a1-47e6-a875-10133aadbd49"],
Cell[CellGroupData[{
Cell[321117, 6298, 168, 3, 91, "Subsection",ExpressionUUID->"72da1777-4c2a-44b4-8ea4-7fb0a91c5364"],
Cell[321288, 6303, 219, 4, 35, "Text",ExpressionUUID->"8cf50176-86e5-4a28-8cd8-686213c4ebd7"],
Cell[321510, 6309, 428, 9, 65, "Program",ExpressionUUID->"6ce9be20-c12d-4871-b4e9-0af0da87f5fb",
 CellID->1741750011],
Cell[321941, 6320, 289, 7, 35, "Text",ExpressionUUID->"2144dd1b-f1bb-4fb3-b0c8-29d343be2011"],
Cell[CellGroupData[{
Cell[322255, 6331, 132, 3, 42, "Input",ExpressionUUID->"0955c695-7819-4863-87e9-b3f6cf30386b"],
Cell[322390, 6336, 111, 2, 32, "Output",ExpressionUUID->"b445755c-38a5-47c6-9189-91b3bf5d5ae8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[322538, 6343, 155, 4, 42, "Input",ExpressionUUID->"4724269c-8f4d-4db4-a0c4-7dd9c03028d3"],
Cell[322696, 6349, 111, 2, 32, "Output",ExpressionUUID->"b6e47c04-53c6-4565-b513-db74c86784f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[322844, 6356, 155, 4, 42, "Input",ExpressionUUID->"6f7f0ec0-280c-4007-bd32-25cbcd3765ea"],
Cell[323002, 6362, 112, 2, 32, "Output",ExpressionUUID->"22319aa7-eb46-4f8b-9e84-d6a6cf86af14"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323151, 6369, 261, 8, 42, "Input",ExpressionUUID->"a96b9283-b73c-4538-9235-37e4bae6ed6c"],
Cell[323415, 6379, 114, 2, 32, "Output",ExpressionUUID->"2dceead0-3e7e-4896-8a4f-4d4a24d9b06f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323566, 6386, 206, 5, 42, "Input",ExpressionUUID->"1fa70398-1a04-4a44-b4c7-77ba4f3a8983"],
Cell[323775, 6393, 169, 4, 62, "Output",ExpressionUUID->"1749b3fd-172c-471b-bfc3-5d8f4a95d0d6"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[323993, 6403, 168, 3, 55, "Subsection",ExpressionUUID->"d83b4850-b673-4765-8bd0-1855889b4dcc"],
Cell[324164, 6408, 246, 6, 35, "Text",ExpressionUUID->"8616641d-9b3b-418c-a384-47fc73b2fca6"],
Cell[324413, 6416, 291, 4, 35, "Text",ExpressionUUID->"a0793282-c043-4eb0-9fca-ad2b82244a3c"],
Cell[324707, 6422, 428, 9, 65, "Program",ExpressionUUID->"76f70578-3776-4951-96f0-46c13161d51c",
 CellID->213003452],
Cell[325138, 6433, 382, 7, 35, "Text",ExpressionUUID->"e354d794-7d5c-4004-b86b-d17261f2b904"],
Cell[325523, 6442, 161, 4, 42, "Input",ExpressionUUID->"c31e2893-44d8-427c-a75c-c072dece8531"],
Cell[CellGroupData[{
Cell[325709, 6450, 110, 2, 42, "Input",ExpressionUUID->"a02e7697-21b2-489c-9d53-1fac74512eac"],
Cell[325822, 6454, 111, 2, 32, "Output",ExpressionUUID->"ebe48bfd-cf3c-4956-8ae7-a704e5da973b"]
}, Open  ]],
Cell[325948, 6459, 150, 4, 42, "Input",ExpressionUUID->"b55ba1bd-3938-47dd-840f-a4a358e8b54b"],
Cell[CellGroupData[{
Cell[326123, 6467, 110, 2, 42, "Input",ExpressionUUID->"31e5aea3-acce-47df-a628-fa1537208f34"],
Cell[326236, 6471, 111, 2, 32, "Output",ExpressionUUID->"5c2049ab-691d-45b2-96b5-c1c325358f34"]
}, Open  ]],
Cell[CellGroupData[{
Cell[326384, 6478, 110, 2, 42, "Input",ExpressionUUID->"0bb11795-49b2-48b1-8a5d-1aaaa18842a3"],
Cell[326497, 6482, 111, 2, 32, "Output",ExpressionUUID->"3af8ed4e-cf36-48c4-b699-51b146b85fc1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[326645, 6489, 127, 3, 42, "Input",ExpressionUUID->"672419cb-32d1-41e9-a495-dd8e5b85cdba"],
Cell[326775, 6494, 9283, 236, 189, "Output",ExpressionUUID->"d89c7896-e3b9-42d3-97b7-f5f00ce1e90d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[336095, 6735, 127, 3, 42, "Input",ExpressionUUID->"958db057-d8ae-4191-8734-25327572f304"],
Cell[336225, 6740, 9345, 238, 221, "Output",ExpressionUUID->"287b608d-c3fa-4d96-858d-b202945e6a63"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[345619, 6984, 165, 3, 55, "Subsection",ExpressionUUID->"bbc252c9-367f-4a06-8bd6-df7ad7606130"],
Cell[345787, 6989, 216, 4, 35, "CodeText",ExpressionUUID->"87e8f78b-7141-466e-b33c-6192c3308eaa"],
Cell[346006, 6995, 128, 3, 42, "Input",ExpressionUUID->"83ccbc96-932f-4628-86b6-c1febc820a8f"],
Cell[346137, 7000, 164, 4, 72, "Input",ExpressionUUID->"17b5fdbd-009d-4d9a-b1a7-8a8f69819c70"],
Cell[346304, 7006, 11487, 261, 110, "Text",ExpressionUUID->"3af3e6b6-6a9b-4fbb-8ac6-f8b75182e882",
 CellTags->"answer"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[357840, 7273, 92, 0, 139, "Section",ExpressionUUID->"331bd44b-c370-4953-8c92-7dc834b63279"],
Cell[357935, 7275, 310, 7, 35, "Text",ExpressionUUID->"dc0dd63e-fd78-439f-ba78-203eb13f75c2"],
Cell[358248, 7284, 419, 12, 35, "CodeText",ExpressionUUID->"d447ce4f-6c21-491d-aa51-24c56649cbbf"],
Cell[358670, 7298, 210, 6, 42, "Input",ExpressionUUID->"38a3290c-4af8-45b8-a5c7-e7c106d93f1f"],
Cell[358883, 7306, 248, 6, 35, "CodeText",ExpressionUUID->"36b03f25-dd46-4ae0-8a8b-dfee7be1d6d6"],
Cell[CellGroupData[{
Cell[359156, 7316, 171, 4, 42, "Input",ExpressionUUID->"ea14e834-f797-42c9-82c4-55c13d9cf41f"],
Cell[359330, 7322, 144, 3, 32, "Output",ExpressionUUID->"6545dd0f-700a-480e-bca3-3afd0484aad7"]
}, Open  ]],
Cell[359489, 7328, 145, 3, 35, "CodeText",ExpressionUUID->"8aa51fa7-37bf-4bf1-a8ef-820dd954ca63"],
Cell[359637, 7333, 141, 3, 42, "Input",ExpressionUUID->"8b597e3c-58c8-48f4-b86c-9c9890e3a5cc"],
Cell[359781, 7338, 411, 7, 58, "Text",ExpressionUUID->"53da2f0a-0450-489f-9f4e-60807a2874a0"],
Cell[360195, 7347, 202, 4, 35, "CodeText",ExpressionUUID->"a408359b-b8ff-4ae2-96dc-9dd22d28c189"],
Cell[CellGroupData[{
Cell[360422, 7355, 160, 4, 42, "Input",ExpressionUUID->"26b6cd38-8325-4056-9124-da6e2e55bb19"],
Cell[360585, 7361, 111, 2, 32, "Output",ExpressionUUID->"478ef1f4-f87b-4923-8602-e695d3d7f28f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[360733, 7368, 160, 4, 42, "Input",ExpressionUUID->"bdfa5768-000d-43f8-a652-0bbdf03b7bfb"],
Cell[360896, 7374, 111, 2, 32, "Output",ExpressionUUID->"4ab99494-8289-407c-b31e-8f509b003564"]
}, Open  ]],
Cell[361022, 7379, 163, 3, 35, "CodeText",ExpressionUUID->"21e4d617-2927-4732-ac16-22eb009706bb"],
Cell[CellGroupData[{
Cell[361210, 7386, 330, 9, 42, "Input",ExpressionUUID->"8cc8d936-6799-47f2-aac5-fd139658cc37"],
Cell[361543, 7397, 273, 7, 32, "Output",ExpressionUUID->"1c091adc-6109-4518-b56d-e41966000a33"]
}, Open  ]],
Cell[361831, 7407, 245, 4, 35, "CodeText",ExpressionUUID->"61e6bb66-8d09-46b6-99c3-bab498fa97f4"],
Cell[362079, 7413, 298, 9, 42, "Input",ExpressionUUID->"2a93dc83-e2d0-4a66-924b-c0a6dafb788d"],
Cell[362380, 7424, 1073, 21, 81, "Text",ExpressionUUID->"2d7caccc-6540-46c5-b78a-5fcab22500c3"],
Cell[363456, 7447, 439, 10, 35, "CodeText",ExpressionUUID->"40d489d8-7490-4584-8e8f-c01d76c23c8e"],
Cell[363898, 7459, 300, 9, 42, "Input",ExpressionUUID->"c911b2d1-568f-4edb-8396-6627b16f745a"],
Cell[364201, 7470, 223, 5, 42, "Input",ExpressionUUID->"72425850-50b4-4929-97df-4a80c7c050c1"],
Cell[364427, 7477, 213, 5, 42, "Input",ExpressionUUID->"5785a21d-f952-4498-a19a-dcfe19b32533"],
Cell[364643, 7484, 28829, 620, 110, "Text",ExpressionUUID->"2cf35974-9d09-49d5-9a9c-80781583d431",
 CellTags->"answer"]
}, Open  ]],
Cell[CellGroupData[{
Cell[393509, 8109, 88, 0, 139, "Section",ExpressionUUID->"6d5a3061-d7b7-411a-b0f6-09a1bff9e580"],
Cell[393600, 8111, 983, 20, 58, "Text",ExpressionUUID->"b2fa77cf-46a1-412e-b3d7-d750011c2111"],
Cell[394586, 8133, 359, 7, 35, "Text",ExpressionUUID->"8e607aee-ca9e-4135-bbaf-843f00e6db17"],
Cell[394948, 8142, 214, 6, 42, "Input",ExpressionUUID->"3ccf3ba8-f2ad-44e3-9f8d-09323ddb54bc"],
Cell[395165, 8150, 189, 3, 35, "CodeText",ExpressionUUID->"ee319231-a104-4216-b9e9-dd57a4836fa8"],
Cell[CellGroupData[{
Cell[395379, 8157, 246, 7, 42, "Input",ExpressionUUID->"ffb567a7-5d8b-4c4b-af8f-9cc60a00d20a"],
Cell[395628, 8166, 114, 2, 32, "Output",ExpressionUUID->"e1b0f9c6-85fc-4242-bca7-75d5cd1ce95c"]
}, Open  ]],
Cell[395757, 8171, 412, 8, 35, "CodeText",ExpressionUUID->"4bf90e85-74bd-4f56-93e0-630d5f223da4"],
Cell[CellGroupData[{
Cell[396194, 8183, 280, 8, 42, "Input",ExpressionUUID->"6910530f-0285-4c02-939f-3ddc960e620c"],
Cell[396477, 8193, 112, 2, 32, "Output",ExpressionUUID->"e00c2767-ed6d-4298-8504-f3a3a4293fb5"]
}, Open  ]],
Cell[396604, 8198, 16874, 372, 110, "Text",ExpressionUUID->"3c9c0eca-f553-41c2-89d9-4adbb6d44dfa",
 CellTags->"answer"]
}, Open  ]],
Cell[CellGroupData[{
Cell[413515, 8575, 79, 0, 139, "Section",ExpressionUUID->"96c5a9c8-d6e3-4b13-9f8b-f3fdf0211b57"],
Cell[413597, 8577, 317, 7, 35, "Text",ExpressionUUID->"ef7a344b-70fd-4d7e-afd6-e97f1ce954f9"],
Cell[413917, 8586, 166, 3, 35, "CodeText",ExpressionUUID->"b2766f54-fd57-4c64-a636-1a5e2b32e7b8"],
Cell[414086, 8591, 159, 3, 42, "Input",ExpressionUUID->"3de1ce87-d878-4945-95d9-8ac549c7c8cb"],
Cell[414248, 8596, 1929, 53, 64, "Input",ExpressionUUID->"97a7bb68-0a5a-4d63-b22c-b6c3b901ce59"],
Cell[416180, 8651, 1128, 21, 35, "Text",ExpressionUUID->"cd279f58-4f96-48d0-b844-25aef5d94e4d"],
Cell[417311, 8674, 838, 12, 35, "Item",ExpressionUUID->"77856c12-8810-485c-813f-02564be81d01"],
Cell[418152, 8688, 803, 12, 35, "Item",ExpressionUUID->"b209ba35-621a-49c7-bd7e-af477d52bff5"],
Cell[418958, 8702, 816, 12, 35, "Item",ExpressionUUID->"f8eeb08f-6f9b-4037-8af2-56f3289fbb47"],
Cell[419777, 8716, 256, 5, 35, "Text",ExpressionUUID->"a7bad7ee-390e-4195-b362-8790517bbc85"],
Cell[420036, 8723, 179, 4, 42, "Input",ExpressionUUID->"0bcdd614-5499-42a5-80ce-0b05d12d7ad5"],
Cell[420218, 8729, 217, 4, 35, "Text",ExpressionUUID->"4f50bd6e-0c69-4ce9-a131-b389ecdcd7d0"],
Cell[420438, 8735, 251, 8, 42, "Input",ExpressionUUID->"ba3c9764-b854-447e-a811-aa8a29df63fc"],
Cell[CellGroupData[{
Cell[420714, 8747, 320, 10, 42, "Input",ExpressionUUID->"e8a36ed6-5f40-49a6-b83b-fac0e7667f2c"],
Cell[421037, 8759, 579, 18, 61, "Output",ExpressionUUID->"ad23725e-2858-43f1-be46-8bafee482943"]
}, Open  ]],
Cell[421631, 8780, 252, 4, 35, "Text",ExpressionUUID->"cd33b1b1-c49c-46e1-a834-439455693a63"],
Cell[421886, 8786, 477, 12, 35, "Text",ExpressionUUID->"efd8944b-e893-4226-bca5-60cd5c65a745"],
Cell[CellGroupData[{
Cell[422388, 8802, 142, 3, 42, "Input",ExpressionUUID->"c1b747dd-a1e5-424e-b438-2bedd003b2fd"],
Cell[422533, 8807, 244, 6, 32, "Output",ExpressionUUID->"135d286f-c231-4947-a227-70c15b61cacd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[422814, 8818, 181, 4, 42, "Input",ExpressionUUID->"bcf04880-3771-4e7d-9a9d-5f04f8b8bc75"],
Cell[422998, 8824, 448, 9, 32, "Output",ExpressionUUID->"83f94a1f-065d-4ab7-a470-98a35dfcac5a"]
}, Open  ]],
Cell[423461, 8836, 450, 12, 35, "Text",ExpressionUUID->"2ae3d7bd-51b2-404a-8967-bb0a030277f5"],
Cell[CellGroupData[{
Cell[423936, 8852, 213, 6, 42, "Input",ExpressionUUID->"5851b29b-e179-412c-be8e-369e9341dda7"],
Cell[424152, 8860, 186, 4, 32, "Output",ExpressionUUID->"c64ee220-08b5-4ea9-8aba-bbc57f482db8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[424375, 8869, 237, 7, 42, "Input",ExpressionUUID->"6ba84afb-0b8c-406e-b3f0-a005296ae99b"],
Cell[424615, 8878, 188, 4, 32, "Output",ExpressionUUID->"629f0b8e-27d2-4544-bb69-7fcf8b728bfe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[424840, 8887, 260, 7, 42, "Input",ExpressionUUID->"12f46f42-5daf-49af-acbb-a1a91307b064"],
Cell[425103, 8896, 444, 9, 54, "Output",ExpressionUUID->"d5c00d95-f47e-4b23-b06f-1aa257a86a31"]
}, Open  ]],
Cell[CellGroupData[{
Cell[425584, 8910, 482, 15, 42, "Input",ExpressionUUID->"2a17b70b-c91a-4eca-8f48-c80034f453f1"],
Cell[426069, 8927, 835, 28, 35, "Output",ExpressionUUID->"2c9350d2-1f99-42af-93ea-11e75e012f7a"]
}, Open  ]],
Cell[426919, 8958, 215, 5, 35, "Text",ExpressionUUID->"7d6d9327-eec5-4912-8bac-9016f0d31aef"],
Cell[CellGroupData[{
Cell[427159, 8967, 142, 3, 42, "Input",ExpressionUUID->"b5116f84-7ffa-4cc6-8d10-1157bb557915"],
Cell[427304, 8972, 111, 2, 32, "Output",ExpressionUUID->"3840f2fc-6d2f-40f7-b6e2-6d83749ad682"]
}, Open  ]],
Cell[427430, 8977, 235, 4, 35, "Text",ExpressionUUID->"76e0ddc4-f0ab-437d-bc05-a90c56325475"],
Cell[CellGroupData[{
Cell[427690, 8985, 184, 4, 42, "Input",ExpressionUUID->"cd87aaab-b820-488f-b99a-1b858def854a"],
Cell[427877, 8991, 396, 7, 32, "Output",ExpressionUUID->"effdf2e3-f2e5-4e0f-890f-0dad77c5a349"]
}, Open  ]],
Cell[428288, 9001, 560, 10, 35, "CodeText",ExpressionUUID->"3f2cfabc-303d-4664-8b0c-a4b7762724a9"],
Cell[CellGroupData[{
Cell[428873, 9015, 167, 4, 42, "Input",ExpressionUUID->"cb7b0cd9-f46b-4df2-9153-907cef2b6968"],
Cell[429043, 9021, 125, 2, 32, "Output",ExpressionUUID->"4cea4120-3848-45b3-8894-d59b614ddd4b"]
}, Open  ]],
Cell[429183, 9026, 442, 11, 35, "CodeText",ExpressionUUID->"0b98d772-d415-4985-b0cd-97bc15c15bfb"],
Cell[CellGroupData[{
Cell[429650, 9041, 164, 4, 42, "Input",ExpressionUUID->"3e67e1ca-185d-4b81-a223-f6da887a1392"],
Cell[429817, 9047, 125, 2, 32, "Output",ExpressionUUID->"6fa844ad-b399-4949-bcaf-43b0707d1b4c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[429979, 9054, 183, 5, 42, "Input",ExpressionUUID->"66f26c4c-ed61-4cd2-8ae4-e7becb09cb33"],
Cell[430165, 9061, 128, 2, 32, "Output",ExpressionUUID->"91d47f00-54f4-4c66-aa44-ee63bcb6cf35"]
}, Open  ]],
Cell[CellGroupData[{
Cell[430330, 9068, 189, 5, 42, "Input",ExpressionUUID->"b004d439-4a8c-45d1-a812-e1eb565a4bc0"],
Cell[430522, 9075, 215, 5, 32, "Output",ExpressionUUID->"36af55f6-46e1-47ab-a57c-b0466ee9e465"]
}, Open  ]],
Cell[CellGroupData[{
Cell[430774, 9085, 184, 5, 42, "Input",ExpressionUUID->"52a906b0-fe90-496c-aa6c-6607bebf732f"],
Cell[430961, 9092, 241, 5, 32, "Output",ExpressionUUID->"1bb5759b-2614-4762-a06a-01372139a783"]
}, Open  ]],
Cell[CellGroupData[{
Cell[431239, 9102, 223, 6, 42, "Input",ExpressionUUID->"d2fd3454-c965-43ba-82ff-8903bee3d066"],
Cell[431465, 9110, 219, 5, 62, "Output",ExpressionUUID->"aa48c908-e236-49da-a62d-5b55d47e11b2"]
}, Open  ]],
Cell[431699, 9118, 18084, 398, 110, "Text",ExpressionUUID->"545a6094-bf4d-403e-889f-cc6a3896e4c4",
 CellTags->"answer"]
}, Open  ]],
Cell[CellGroupData[{
Cell[449820, 9521, 97, 0, 139, "Section",ExpressionUUID->"e58b24b7-e764-4943-a6e1-c72df59460a8"],
Cell[449920, 9523, 283, 6, 35, "Text",ExpressionUUID->"158e1a7b-310b-4463-a045-c4d9785ef02f"],
Cell[450206, 9531, 344, 7, 35, "CodeText",ExpressionUUID->"1d7c97f3-c270-49d6-be4b-1b9e308e36f0"],
Cell[CellGroupData[{
Cell[450575, 9542, 315, 9, 42, "Input",ExpressionUUID->"8e25f76e-8632-4c7e-abfd-ef96b68550a9"],
Cell[450893, 9553, 245, 6, 32, "Output",ExpressionUUID->"2984a335-3535-4a95-9866-0eeb1722985b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[451175, 9564, 388, 11, 42, "Input",ExpressionUUID->"30fec869-860b-449c-b934-3c24d79d3aed"],
Cell[451566, 9577, 4055, 108, 44, "Output",ExpressionUUID->"ad05b09c-ad5d-4fbf-a55d-69315dd5301b"]
}, Open  ]],
Cell[455636, 9688, 516, 12, 35, "CodeText",ExpressionUUID->"277c732c-1cfc-4a71-ad74-94dec5f912b2"],
Cell[CellGroupData[{
Cell[456177, 9704, 198, 5, 42, "Input",ExpressionUUID->"3b752eac-969c-4067-a96f-0147a8ed6eea"],
Cell[456378, 9711, 1618, 56, 44, "Output",ExpressionUUID->"01191906-a5f2-4bdb-9fcb-f1aa1a99e7ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[458033, 9772, 168, 4, 42, "Input",ExpressionUUID->"f676fc43-0345-492f-8597-43b70fefd006"],
Cell[458204, 9778, 1618, 56, 44, "Output",ExpressionUUID->"bebdcf05-1fb1-495a-94fc-312798fbae9c"]
}, Open  ]],
Cell[459837, 9837, 354, 7, 35, "Text",ExpressionUUID->"8eb3f54a-0352-4bbe-81ed-67c1e03c28b4"],
Cell[CellGroupData[{
Cell[460216, 9848, 313, 9, 42, "Input",ExpressionUUID->"c4a19d6b-b103-4140-802d-01b329f44dd9"],
Cell[460532, 9859, 4068, 108, 44, "Output",ExpressionUUID->"8b3b1eeb-bd1f-48ac-9da7-ef05d1e81961"]
}, Open  ]],
Cell[464615, 9970, 578, 11, 35, "CodeText",ExpressionUUID->"0eba2c66-e2ee-48a6-9201-2f7c647f6ce1"],
Cell[CellGroupData[{
Cell[465218, 9985, 139, 3, 42, "Input",ExpressionUUID->"f6f3a482-f9a6-4c5d-81a5-265147b26a9d"],
Cell[465360, 9990, 111, 2, 32, "Output",ExpressionUUID->"d8029f88-c312-42f9-b8d8-b65fd5d706fb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[465508, 9997, 196, 5, 42, "Input",ExpressionUUID->"2a14306d-f590-4955-88fc-92dfef15d602"],
Cell[465707, 10004, 259, 7, 62, "Output",ExpressionUUID->"ac79b5ec-02c3-49f0-b02b-b62ff2854b43"]
}, Open  ]],
Cell[465981, 10014, 1159, 32, 35, "Text",ExpressionUUID->"1aaf6919-3dd0-4f66-9143-178dab47ff75"],
Cell[467143, 10048, 17417, 383, 110, "Text",ExpressionUUID->"f31de257-a524-4de1-8bc8-7b69b5eefe24",
 CellTags->"answer"]
}, Open  ]],
Cell[CellGroupData[{
Cell[484597, 10436, 84, 0, 139, "Section",ExpressionUUID->"2080476f-828a-4d5c-b06d-f020c63c80eb"],
Cell[484684, 10438, 450, 11, 35, "Item",ExpressionUUID->"51825842-d28a-45c4-adc5-86f02d1698c2"],
Cell[485137, 10451, 433, 11, 35, "Item",ExpressionUUID->"2f3c3649-cd3c-46f9-91b6-d1b6b6a337ea"],
Cell[485573, 10464, 433, 10, 35, "Item",ExpressionUUID->"68907250-3787-4d1c-b4a5-09481ac4533f"],
Cell[486009, 10476, 501, 11, 35, "Item",ExpressionUUID->"959f7780-1020-4a51-bbdb-ab2a584718c3"],
Cell[486513, 10489, 469, 11, 35, "Item",ExpressionUUID->"30cb760e-7d2c-44ff-8490-c0253eb60b61"],
Cell[486985, 10502, 478, 11, 35, "Item",ExpressionUUID->"a476f672-c840-4c3c-a030-7d22391fe792"],
Cell[487466, 10515, 478, 11, 35, "Item",ExpressionUUID->"57735141-211f-44ee-8895-ebb00a4d17a7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[487981, 10531, 88, 0, 139, "Section",ExpressionUUID->"2e79852a-321b-4b25-bb7c-46a590f2a34f"],
Cell[488072, 10533, 183, 4, 88, "Input",ExpressionUUID->"44e3e1da-b0a2-492b-b285-6097fba51ec3",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}
]
*)

